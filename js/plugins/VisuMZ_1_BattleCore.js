//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.44;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.44] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @param alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\"","DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]"}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x2d1202=_0x49c5;function _0x49c5(_0x1a4f63,_0x1f489b){const _0x2828fc=_0x2828();return _0x49c5=function(_0x49c50e,_0x326ae6){_0x49c50e=_0x49c50e-0x1b5;let _0x5eaabe=_0x2828fc[_0x49c50e];return _0x5eaabe;},_0x49c5(_0x1a4f63,_0x1f489b);}(function(_0x5f059d,_0x3bfecd){const _0x2a21ff=_0x49c5,_0x5577c6=_0x5f059d();while(!![]){try{const _0x17a66a=-parseInt(_0x2a21ff(0x8e1))/0x1+parseInt(_0x2a21ff(0x981))/0x2+parseInt(_0x2a21ff(0x386))/0x3+-parseInt(_0x2a21ff(0xb46))/0x4*(-parseInt(_0x2a21ff(0x1c4))/0x5)+-parseInt(_0x2a21ff(0xa92))/0x6*(-parseInt(_0x2a21ff(0x2c9))/0x7)+parseInt(_0x2a21ff(0xa72))/0x8+-parseInt(_0x2a21ff(0x6f0))/0x9*(parseInt(_0x2a21ff(0xa64))/0xa);if(_0x17a66a===_0x3bfecd)break;else _0x5577c6['push'](_0x5577c6['shift']());}catch(_0x276420){_0x5577c6['push'](_0x5577c6['shift']());}}}(_0x2828,0x4ee20));var label=_0x2d1202(0xa3c),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x2d1202(0xb5f)](function(_0x440afe){const _0x1408be=_0x2d1202;return _0x440afe[_0x1408be(0x789)]&&_0x440afe[_0x1408be(0x23e)]['includes']('['+label+']');})[0x0];VisuMZ[label][_0x2d1202(0x6a1)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x2d1202(0x433)]=function(_0x2c83da,_0x7ddc39){const _0x1695fe=_0x2d1202;for(const _0x51511e in _0x7ddc39){if(_0x1695fe(0x1cf)===_0x1695fe(0x2c7))this[_0x1695fe(0xa83)]();else{if(_0x51511e[_0x1695fe(0xaa0)](/(.*):(.*)/i)){if(_0x1695fe(0x241)!=='bkokC'){_0x58951a[_0x1695fe(0x9ef)]&&this[_0x1695fe(0x8ca)]()&&this[_0x1695fe(0xb30)]();const _0x298491=_0xf92ded[_0x1695fe(0x76c)](),_0x56204e=[];for(const _0x555331 of _0x298491){_0x56204e[_0x1695fe(0x5c8)](new _0x4f0d72(_0x555331));}_0x56204e['sort'](this['compareEnemySprite']['bind'](this));for(const _0xaf7f3a of _0x56204e){this[_0x1695fe(0xb77)][_0x1695fe(0x304)](_0xaf7f3a);}this['_enemySprites']=_0x56204e;}else{const _0x4eed19=String(RegExp['$1']),_0xb4934b=String(RegExp['$2'])[_0x1695fe(0x248)]()[_0x1695fe(0x43b)]();let _0x971e2e,_0x2a6e7c,_0x147a30;switch(_0xb4934b){case _0x1695fe(0x1d5):_0x971e2e=_0x7ddc39[_0x51511e]!==''?Number(_0x7ddc39[_0x51511e]):0x0;break;case _0x1695fe(0x383):_0x2a6e7c=_0x7ddc39[_0x51511e]!==''?JSON[_0x1695fe(0x647)](_0x7ddc39[_0x51511e]):[],_0x971e2e=_0x2a6e7c[_0x1695fe(0x64c)](_0x4a74a2=>Number(_0x4a74a2));break;case'EVAL':_0x971e2e=_0x7ddc39[_0x51511e]!==''?eval(_0x7ddc39[_0x51511e]):null;break;case _0x1695fe(0xaf5):_0x2a6e7c=_0x7ddc39[_0x51511e]!==''?JSON['parse'](_0x7ddc39[_0x51511e]):[],_0x971e2e=_0x2a6e7c[_0x1695fe(0x64c)](_0x339c6b=>eval(_0x339c6b));break;case _0x1695fe(0x7b9):_0x971e2e=_0x7ddc39[_0x51511e]!==''?JSON[_0x1695fe(0x647)](_0x7ddc39[_0x51511e]):'';break;case _0x1695fe(0xb2d):_0x2a6e7c=_0x7ddc39[_0x51511e]!==''?JSON[_0x1695fe(0x647)](_0x7ddc39[_0x51511e]):[],_0x971e2e=_0x2a6e7c[_0x1695fe(0x64c)](_0x269be2=>JSON[_0x1695fe(0x647)](_0x269be2));break;case'FUNC':_0x971e2e=_0x7ddc39[_0x51511e]!==''?new Function(JSON[_0x1695fe(0x647)](_0x7ddc39[_0x51511e])):new Function(_0x1695fe(0x64d));break;case _0x1695fe(0xb4e):_0x2a6e7c=_0x7ddc39[_0x51511e]!==''?JSON[_0x1695fe(0x647)](_0x7ddc39[_0x51511e]):[],_0x971e2e=_0x2a6e7c['map'](_0x3c2261=>new Function(JSON[_0x1695fe(0x647)](_0x3c2261)));break;case'STR':_0x971e2e=_0x7ddc39[_0x51511e]!==''?String(_0x7ddc39[_0x51511e]):'';break;case _0x1695fe(0x4d3):_0x2a6e7c=_0x7ddc39[_0x51511e]!==''?JSON[_0x1695fe(0x647)](_0x7ddc39[_0x51511e]):[],_0x971e2e=_0x2a6e7c[_0x1695fe(0x64c)](_0xddaf7=>String(_0xddaf7));break;case'STRUCT':_0x147a30=_0x7ddc39[_0x51511e]!==''?JSON[_0x1695fe(0x647)](_0x7ddc39[_0x51511e]):{},_0x2c83da[_0x4eed19]={},VisuMZ['ConvertParams'](_0x2c83da[_0x4eed19],_0x147a30);continue;case _0x1695fe(0x86b):_0x2a6e7c=_0x7ddc39[_0x51511e]!==''?JSON['parse'](_0x7ddc39[_0x51511e]):[],_0x971e2e=_0x2a6e7c[_0x1695fe(0x64c)](_0x1af3ea=>VisuMZ[_0x1695fe(0x433)]({},JSON[_0x1695fe(0x647)](_0x1af3ea)));break;default:continue;}_0x2c83da[_0x4eed19]=_0x971e2e;}}}}return _0x2c83da;},(_0x140629=>{const _0x4ec699=_0x2d1202,_0x3b7d7d=_0x140629['name'];for(const _0x3f3c02 of dependencies){if(_0x4ec699(0x93f)===_0x4ec699(0x93f)){if(!Imported[_0x3f3c02]){if(_0x4ec699(0x441)!=='XilSe'){alert(_0x4ec699(0xb5a)[_0x4ec699(0x995)](_0x3b7d7d,_0x3f3c02)),SceneManager[_0x4ec699(0xb3e)]();break;}else{const _0xb73ba3=this[_0x4ec699(0xb90)]()?this[_0x4ec699(0x832)]():this[_0x4ec699(0xae4)]();if(_0xb73ba3){const _0xfa0ebd=_0xb73ba3[_0x4ec699(0x5fe)];if(_0xfa0ebd[_0x4ec699(0xaa0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x3bb244(_0x539c98['$1'])*0.01;else{if(_0xfa0ebd[_0x4ec699(0xaa0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x14ba88(_0x3bf24c['$1'])||0x0;}}return 0x1;}}}else return _0x2ac951(_0x16442f['$1'])/0x64;}const _0x1f6d35=_0x140629[_0x4ec699(0x23e)];if(_0x1f6d35[_0x4ec699(0xaa0)](/\[Version[ ](.*?)\]/i)){const _0x26e3a1=Number(RegExp['$1']);_0x26e3a1!==VisuMZ[label][_0x4ec699(0x7f2)]&&(_0x4ec699(0x677)===_0x4ec699(0x677)?(alert(_0x4ec699(0x26d)[_0x4ec699(0x995)](_0x3b7d7d,_0x26e3a1)),SceneManager[_0x4ec699(0xb3e)]()):(_0x47fb38[_0x4ec699(0x8ec)][_0x4ec699(0x69b)][_0x4ec699(0x86c)](this),this[_0x4ec699(0x7cd)]()));}if(_0x1f6d35['match'](/\[Tier[ ](\d+)\]/i)){if('PojAy'==='PojAy'){const _0x5cd925=Number(RegExp['$1']);_0x5cd925<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'['format'](_0x3b7d7d,_0x5cd925,tier)),SceneManager[_0x4ec699(0xb3e)]()):tier=Math[_0x4ec699(0x717)](_0x5cd925,tier);}else _0x55d3bf['reserveCommonEvent'](_0x4f135f[_0x742fc7]);}VisuMZ[_0x4ec699(0x433)](VisuMZ[label][_0x4ec699(0x6a1)],_0x140629[_0x4ec699(0xa3e)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x5d358a){const _0x1850ae=_0x2d1202;let _0x5ab771=[];for(const _0x36a106 of _0x5d358a){_0x5ab771=_0x5ab771['concat'](VisuMZ[_0x1850ae(0x5ab)](_0x36a106));}return _0x5ab771[_0x1850ae(0xb5f)](_0x24d987=>_0x24d987);},VisuMZ[_0x2d1202(0x5ab)]=function(_0x9d5542){const _0x4ddbd1=_0x2d1202,_0x5c1605=BattleManager[_0x4ddbd1(0x26c)]()[_0x4ddbd1(0xb5f)](_0x556474=>_0x556474&&_0x556474['isAppeared']()),_0x1dc2ff=BattleManager[_0x4ddbd1(0x403)],_0x26257c=BattleManager[_0x4ddbd1(0x823)],_0x1adc71=BattleManager[_0x4ddbd1(0x934)]?BattleManager['_allTargets']['slice'](0x0):_0x5c1605;_0x9d5542=_0x9d5542[_0x4ddbd1(0x8e4)]()['trim']();if(_0x9d5542===_0x4ddbd1(0x1eb)){if('BlmrC'!==_0x4ddbd1(0x4b1)){if(this['_battlePortrait']===_0x5bf299)this[_0x4ddbd1(0x801)]();this[_0x4ddbd1(0x881)]=_0x17129d;if(_0x10270e[_0x4ddbd1(0x346)]()&&_0x17bf88['battleMembers']()[_0x4ddbd1(0x7c6)](this)){const _0x45b1eb=_0x5bd602[_0x4ddbd1(0xb69)][_0x4ddbd1(0x210)];if(_0x45b1eb)_0x45b1eb[_0x4ddbd1(0xa90)](this);}}else return[_0x1dc2ff];}else{if(_0x9d5542===_0x4ddbd1(0x230))return[_0x26257c];else{if(_0x9d5542===_0x4ddbd1(0x57f)){if(_0x26257c){const _0x1f9111=_0x1adc71['indexOf'](_0x26257c);return _0x1f9111>=0x0?[_0x1adc71[_0x1f9111-0x1]||_0x26257c]:[_0x26257c];}}else{if(_0x9d5542===_0x4ddbd1(0x70e)){if(_0x4ddbd1(0x769)!=='COnlX')_0x11cc11[_0x4ddbd1(0x5c8)](_0x4ddbd1(0x3c3),_0x1b8211,_0xe46238);else{if(_0x26257c){if(_0x4ddbd1(0xa00)==='FMkMR')_0x5cd175=_0x29ec82['x']+_0x2f7c70[_0x4ddbd1(0xbc7)]+0x8;else{const _0x3b1425=_0x1adc71[_0x4ddbd1(0x783)](_0x26257c);return _0x3b1425>=0x0?[_0x1adc71[_0x3b1425+0x1]||_0x26257c]:[_0x26257c];}}}}else{if(_0x9d5542===_0x4ddbd1(0x37f))return _0x1adc71;else{if(_0x9d5542===_0x4ddbd1(0x989))return[_0x1dc2ff][_0x4ddbd1(0x8d2)](_0x1adc71);else{if(_0x9d5542==='not\x20focus')return _0x4ddbd1(0x46c)===_0x4ddbd1(0x46c)?_0x5c1605['filter'](_0x41498e=>_0x41498e!==_0x1dc2ff&&!_0x1adc71[_0x4ddbd1(0x7c6)](_0x41498e)&&_0x41498e[_0x4ddbd1(0x4c4)]()):0x0;}}}}}}if(_0x1dc2ff){if('eVkHd'!==_0x4ddbd1(0x422))_0x48ff4b['_subject'][_0x4ddbd1(0x48f)](_0x5c134f);else{if(_0x9d5542===_0x4ddbd1(0x8fe)){if(_0x4ddbd1(0x930)===_0x4ddbd1(0x930))return _0x1dc2ff[_0x4ddbd1(0x30d)]()[_0x4ddbd1(0x973)]();else{const _0x144deb=_0x4ddbd1(0x439)[_0x4ddbd1(0x995)](_0x42fb45[_0x4ddbd1(0x3c4)]()),_0x5ac208=this['createInnerPortrait'](_0x144deb,_0x165481),_0xb9c6b=_0x1d2fca[_0x4ddbd1(0x4f8)]();_0xb9c6b!==''?_0x5ac208['bitmap']=_0x4cc1bd[_0x4ddbd1(0x546)](_0xb9c6b):_0x5ac208[_0x4ddbd1(0x834)]=_0x4c0ac3[_0x4ddbd1(0xb1c)];const _0x9e6832=this[_0x4ddbd1(0x6d0)](_0xacb67d);_0x5ac208[_0x4ddbd1(0x5e0)]['x']=0.5,_0x5ac208[_0x4ddbd1(0x5e0)]['y']=0x1;let _0x50dc90=_0x55cc39[_0x4ddbd1(0x4b4)](_0x9e6832['x']+_0x9e6832[_0x4ddbd1(0x72b)]/0x2)+this[_0x4ddbd1(0x895)];_0x50dc90+=_0x446ec8[_0x4ddbd1(0x223)]();let _0x6b3317=_0x280b58[_0x4ddbd1(0x4b4)](this[_0x4ddbd1(0x940)]);_0x6b3317+=_0x29c6eb[_0x4ddbd1(0x30b)](),_0x5ac208['move'](_0x50dc90,_0x6b3317);const _0x5489f4=_0x2fa198[_0x4ddbd1(0xa3c)][_0x4ddbd1(0x6a1)][_0x4ddbd1(0xbd5)]['PortraitScale'];_0x5ac208[_0x4ddbd1(0x1de)]['x']=_0x5489f4,_0x5ac208[_0x4ddbd1(0x1de)]['y']=_0x5489f4,_0x5ac208['show']();}}else{if(_0x9d5542==='alive\x20friends\x20not\x20user'){if(_0x4ddbd1(0x45a)==='EKnxW')_0x4277a3=_0x4789a5[_0x4ddbd1(0x717)](_0x2057ab,_0x229518);else return _0x1dc2ff[_0x4ddbd1(0x30d)]()[_0x4ddbd1(0x973)]()[_0x4ddbd1(0xb5f)](_0x2a90c0=>_0x2a90c0!==_0x1dc2ff);}else{if(_0x9d5542===_0x4ddbd1(0x9c4)){if('zWJnl'===_0x4ddbd1(0x813)){if(!_0x44d82c[_0x4ddbd1(0x1fd)]())return![];return![];}else return _0x1dc2ff['friendsUnit']()[_0x4ddbd1(0x973)]()[_0x4ddbd1(0xb5f)](_0x1c0675=>_0x1c0675!==_0x26257c);}else{if(_0x9d5542===_0x4ddbd1(0x298))return _0x1dc2ff[_0x4ddbd1(0x30d)]()[_0x4ddbd1(0x2ba)]();else{if(_0x9d5542[_0x4ddbd1(0xaa0)](/FRIEND INDEX (\d+)/i)){if('ipOEx'!==_0x4ddbd1(0xaa6))this[_0x4ddbd1(0x7e4)]=_0x9b9283;else{const _0x19f7e5=Number(RegExp['$1']);return[_0x1dc2ff['friendsUnit']()[_0x4ddbd1(0x76c)]()[_0x19f7e5]];}}}}}}if(_0x9d5542===_0x4ddbd1(0x6e9)){if(_0x4ddbd1(0x5b3)===_0x4ddbd1(0x40b)){if(!_0x8030df[_0x4ddbd1(0x346)]())return;if(!_0x1bd486['VisuMZ_3_ActSeqCamera'])return;_0x58202e['ConvertParams'](_0x2fb351,_0x677bfd);const _0x341382=_0x111548[_0x4ddbd1(0xa20)](),_0x53aec5=_0x4db843[_0x4ddbd1(0x722)];if(!_0x341382)return;_0x4df44a[_0x4ddbd1(0x87f)](_0x315cb4[_0x4ddbd1(0x4da)],_0x223788[_0x4ddbd1(0x86e)],_0x5e49cc['EasingType']);if(_0x53aec5)_0x341382[_0x4ddbd1(0x76a)](_0x4ddbd1(0x5cc));}else return _0x1dc2ff[_0x4ddbd1(0x9cd)]()[_0x4ddbd1(0x973)]();}else{if(_0x9d5542===_0x4ddbd1(0x6bd))return _0x1dc2ff[_0x4ddbd1(0x9cd)]()[_0x4ddbd1(0x973)]()[_0x4ddbd1(0xb5f)](_0x5377b7=>_0x5377b7!==_0x26257c);else{if(_0x9d5542==='dead\x20opponents'){if(_0x4ddbd1(0x49c)!==_0x4ddbd1(0x619))return _0x1dc2ff[_0x4ddbd1(0x9cd)]()['deadMembers']();else{let _0x2b5872=_0x476706[_0x4ddbd1(0x57c)](_0x15a225[_0x4ddbd1(0x4bb)]);_0x35f4f2[_0x4ddbd1(0x206)]>0x0&&(_0x2b5872+=_0x3260ce[_0x4ddbd1(0x4d4)](_0x30d815[_0x4ddbd1(0x206)])),_0x2646a8[_0x4ddbd1(0x4d7)](_0x5cfb49[_0x4ddbd1(0x4bb)],_0x2b5872);}}else{if(_0x9d5542[_0x4ddbd1(0xaa0)](/OPPONENT INDEX (\d+)/i)){if(_0x4ddbd1(0xb37)!==_0x4ddbd1(0x367)){const _0x29d43a=Number(RegExp['$1']);return[_0x1dc2ff['opponentsUnit']()['members']()[_0x29d43a]];}else return this[_0x4ddbd1(0xb96)]();}}}}}}if(_0x9d5542===_0x4ddbd1(0xa0d)){if(_0x4ddbd1(0x2a0)===_0x4ddbd1(0x58d))_0xb14c04[_0x4ddbd1(0xa3c)][_0x4ddbd1(0xb57)][_0x4ddbd1(0x86c)](this),this[_0x4ddbd1(0x36f)]()[_0x4ddbd1(0x5fe)][_0x4ddbd1(0xaa0)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x44a5b4['_commonEventQueue']=[]),_0x3494d6[_0x4ddbd1(0x52b)](this['item']())&&(_0x4c5ac4[_0x4ddbd1(0x2a2)]=[]);else return $gameParty[_0x4ddbd1(0x973)]();}else{if(_0x9d5542===_0x4ddbd1(0x523)){if(_0x4ddbd1(0x93b)===_0x4ddbd1(0xbd7)){const _0x355559=_0x1333b9[_0x4ddbd1(0xa3c)][_0x4ddbd1(0x6a1)][_0x4ddbd1(0xbd5)],_0x278e3f=this[_0x4ddbd1(0x832)](_0x304c6e),_0x476996=this['itemRect'](_0x1f2bea),_0xccc2e7=_0x3cc92d[_0x4ddbd1(0x4b4)](_0x476996['x']+(_0x476996[_0x4ddbd1(0x72b)]-0x80)/0x2),_0x3122bb=this[_0x4ddbd1(0x660)](_0x476996);let _0x20c572=_0xccc2e7-_0x379fc2[_0x4ddbd1(0x629)]/0x2-0x4,_0x53af02=_0x3122bb+_0x4b455f[_0x4ddbd1(0x420)]/0x2;_0x20c572-_0x12617f[_0x4ddbd1(0x629)]/0x2<_0x476996['x']&&(_0x20c572=_0xccc2e7+_0x2870c9[_0x4ddbd1(0x629)]/0x2-0x4,_0x53af02=_0x3122bb-_0x43a13b[_0x4ddbd1(0x420)]/0x2);const _0x373f93=_0xccc2e7,_0x4fa194=this[_0x4ddbd1(0x9da)](_0x476996);this[_0x4ddbd1(0x726)](_0x278e3f,_0xccc2e7+(_0x355559[_0x4ddbd1(0x87d)]||0x0),_0x3122bb+(_0x355559[_0x4ddbd1(0x2c8)]||0x0)),this[_0x4ddbd1(0x5bf)](_0x278e3f,_0xccc2e7+(_0x355559['NameOffsetX']||0x0),_0x3122bb+(_0x355559[_0x4ddbd1(0x5da)]||0x0)),this[_0x4ddbd1(0x782)](_0x278e3f,_0x20c572+(_0x355559[_0x4ddbd1(0x6cb)]||0x0),_0x53af02+(_0x355559[_0x4ddbd1(0x603)]||0x0)),this['placeGauge'](_0x278e3f,'hp',_0x373f93+(_0x355559['HpGaugeOffsetX']||0x0),_0x4fa194+(_0x355559[_0x4ddbd1(0x36a)]||0x0)),this[_0x4ddbd1(0xba3)](_0x278e3f,'mp',_0x373f93+(_0x355559['MpGaugeOffsetX']||0x0),_0x4fa194+this[_0x4ddbd1(0x43f)]()+(_0x355559[_0x4ddbd1(0x5b0)]||0x0)),_0xa54c2b[_0x4ddbd1(0x2f9)]&&this[_0x4ddbd1(0xba3)](_0x278e3f,'tp',_0x373f93+(_0x355559[_0x4ddbd1(0xa2f)]||0x0),_0x4fa194+this[_0x4ddbd1(0x43f)]()*0x2+(_0x355559['TpGaugeOffsetY']||0x0));}else return $gameParty[_0x4ddbd1(0x973)]()[_0x4ddbd1(0xb5f)](_0x110dfe=>_0x110dfe!==_0x1dc2ff);}else{if(_0x9d5542===_0x4ddbd1(0x462))return $gameParty[_0x4ddbd1(0x973)]()[_0x4ddbd1(0xb5f)](_0x840aa4=>_0x840aa4!==_0x26257c);else{if(_0x9d5542===_0x4ddbd1(0x3f3)){if(_0x4ddbd1(0x7ac)===_0x4ddbd1(0x397))this[_0x4ddbd1(0x22c)]()['refreshMotion']();else return $gameParty['deadMembers']();}else{if(_0x9d5542[_0x4ddbd1(0xaa0)](/ACTOR INDEX (\d+)/i)){if(_0x4ddbd1(0x87a)==='aAuXc'){const _0x34cede=this[_0x4ddbd1(0x403)][_0x4ddbd1(0x8dd)]();if(_0x34cede)_0x34cede['actionBattleCoreJS'](_0x4ddbd1(0x8f8));_0x546e0b[_0x4ddbd1(0xa3c)][_0x4ddbd1(0x595)][_0x4ddbd1(0x86c)](this);if(_0x34cede)_0x34cede[_0x4ddbd1(0xad7)]('PostStartActionJS');}else{const _0x3490e0=Number(RegExp['$1']);return[$gameParty[_0x4ddbd1(0x76c)]()[_0x3490e0]];}}else{if(_0x9d5542['match'](/ACTOR ID (\d+)/i)){if(_0x4ddbd1(0xb8b)===_0x4ddbd1(0x1d3))_0xa5acbe[_0x4ddbd1(0x675)]=_0x192058['actor']();else{const _0x50e9d8=Number(RegExp['$1']);return[$gameActors[_0x4ddbd1(0x832)](_0x50e9d8)];}}}}}}}if(_0x9d5542===_0x4ddbd1(0xae2)){if(_0x4ddbd1(0x793)!==_0x4ddbd1(0x328))return $gameTroop['aliveMembers']();else for(const _0x5f004c of _0x5b6a69){const _0x31d48e=_0x1036fe[0x0][_0x4ddbd1(0x995)](_0x5f004c[0x0]),_0x128ef8=_0x470c4e[0x1][_0x4ddbd1(0x995)](_0x5f004c[0x1]),_0x249426=new _0xe1921b(_0x5ec995[_0x4ddbd1(0x995)](_0x128ef8),'i');_0x254699[_0x31d48e]=_0x249426;}}else{if(_0x9d5542===_0x4ddbd1(0x7c2))return $gameTroop[_0x4ddbd1(0x973)]()['filter'](_0x45c88a=>_0x45c88a!==_0x1dc2ff);else{if(_0x9d5542===_0x4ddbd1(0x7ca))return _0x4ddbd1(0x897)!==_0x4ddbd1(0x2e5)?$gameTroop['aliveMembers']()[_0x4ddbd1(0xb5f)](_0x5bf4f5=>_0x5bf4f5!==_0x26257c):_0x479387[_0x4ddbd1(0x5fe)][_0x4ddbd1(0xaa0)](/<COMMAND ICON: (\d+)>/i)?_0x13fe1e(_0x578a6a['$1']):_0x2b1d80[_0x4ddbd1(0x24f)];else{if(_0x9d5542===_0x4ddbd1(0x263))return $gameTroop[_0x4ddbd1(0x2ba)]();else{if(_0x9d5542[_0x4ddbd1(0xaa0)](/ENEMY INDEX (\d+)/i)){const _0xd4c99b=Number(RegExp['$1']);return[$gameTroop[_0x4ddbd1(0x76c)]()[_0xd4c99b]];}else{if(_0x9d5542[_0x4ddbd1(0xaa0)](/ENEMY ID (\d+)/i)){if(_0x4ddbd1(0xb1d)!=='oBexS'){const _0x191fbe=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x4ddbd1(0xb5f)](_0x5976b7=>_0x5976b7['enemyId']()===_0x191fbe);}else _0xe1ebc4=this[_0x4ddbd1(0x5e2)]();}}}}}}if(_0x9d5542===_0x4ddbd1(0xb06))return _0x5c1605[_0x4ddbd1(0xb5f)](_0x3399e3=>_0x3399e3[_0x4ddbd1(0xb23)]());else{if(_0x9d5542===_0x4ddbd1(0x1be))return _0x5c1605['filter'](_0x3a1ff3=>_0x3a1ff3[_0x4ddbd1(0xb23)]()&&_0x3a1ff3!==_0x1dc2ff);else{if(_0x9d5542===_0x4ddbd1(0x2d5))return _0x5c1605[_0x4ddbd1(0xb5f)](_0x37ecd0=>_0x37ecd0['isAlive']()&&_0x37ecd0!==_0x26257c);else{if(_0x9d5542==='dead\x20battlers')return _0x5c1605[_0x4ddbd1(0xb5f)](_0x1ecae1=>_0x1ecae1[_0x4ddbd1(0x7a6)]());}}}return[];},PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Set_SetupAction',_0xa6a83b=>{const _0x264553=_0x2d1202;if(!SceneManager[_0x264553(0x346)]())return;VisuMZ['ConvertParams'](_0xa6a83b,_0xa6a83b);const _0x35094e=$gameTemp[_0x264553(0xa20)](),_0x4d3a57=BattleManager[_0x264553(0xa74)],_0x19bea3=BattleManager[_0x264553(0x403)],_0x38293a=BattleManager[_0x264553(0x934)]?BattleManager[_0x264553(0x934)]['slice'](0x0):[],_0x417595=BattleManager[_0x264553(0x5d0)];if(!_0x35094e||!_0x4d3a57||!_0x19bea3)return;if(!_0x4d3a57[_0x264553(0x36f)]())return;if(_0xa6a83b[_0x264553(0x5eb)])_0x417595[_0x264553(0x949)](_0x19bea3,_0x4d3a57[_0x264553(0x36f)]());if(_0xa6a83b[_0x264553(0x9fc)]){if(_0x264553(0x89b)===_0x264553(0x89b))_0x417595[_0x264553(0x5c8)]('applyImmortal',_0x19bea3,_0x38293a,!![]);else{if(!_0x130f43['isSceneBattle']())return;const _0x255261=_0x582593['getLastPluginCommandInterpreter']();if(!_0x255261)return;_0x255261[_0x264553(0x76a)](_0x264553(0x388));}}if(_0xa6a83b[_0x264553(0xba0)])_0x417595[_0x264553(0x5c8)](_0x264553(0xa42),_0x19bea3,_0x4d3a57);if(_0xa6a83b[_0x264553(0x564)])_0x417595['push'](_0x264553(0x2be));if(_0xa6a83b[_0x264553(0xb3c)])_0x417595['push'](_0x264553(0x2cf),_0x19bea3,_0x4d3a57);if(_0xa6a83b[_0x264553(0x593)])_0x417595[_0x264553(0x5c8)](_0x264553(0x2aa));_0x35094e[_0x264553(0x76a)](_0x264553(0x34c));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xafb),_0x410241=>{const _0xccc6d6=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xccc6d6(0x433)](_0x410241,_0x410241);const _0x147457=$gameTemp[_0xccc6d6(0xa20)](),_0x34fa67=BattleManager[_0xccc6d6(0xa74)],_0x1069d0=BattleManager[_0xccc6d6(0x403)],_0x177dcf=BattleManager['_allTargets']?BattleManager[_0xccc6d6(0x934)][_0xccc6d6(0x9e9)](0x0):[],_0x219d9f=BattleManager[_0xccc6d6(0x5d0)],_0xeffdae=_0x410241[_0xccc6d6(0x80d)]??![];if(!_0x147457||!_0x34fa67||!_0x1069d0)return;if(!_0x34fa67[_0xccc6d6(0x36f)]())return;let _0xf0eafe=_0xeffdae?_0x219d9f[_0xccc6d6(0x501)](_0x1069d0):0x1;for(let _0x3507e2=0x0;_0x3507e2<_0xf0eafe;_0x3507e2++){if('CgPAk'!==_0xccc6d6(0x3a0)){_0xeffdae&&_0x1069d0[_0xccc6d6(0xb90)]()&&('IdJKa'!==_0xccc6d6(0xa06)?_0x2c3d63[_0xccc6d6(0x8ec)][_0xccc6d6(0x362)][_0xccc6d6(0x86c)](this,_0x90276):_0x219d9f['push'](_0xccc6d6(0x3c3),_0x1069d0,_0x3507e2));if(_0x410241['PerformAction'])_0x219d9f['push'](_0xccc6d6(0x2b3),_0x1069d0,_0x34fa67);if(_0x410241[_0xccc6d6(0xa81)]>0x0)_0x219d9f['push']('waitCount',_0x410241[_0xccc6d6(0xa81)]);if(_0x410241[_0xccc6d6(0x33e)])_0x219d9f[_0xccc6d6(0x5c8)](_0xccc6d6(0x698),_0x1069d0,_0x177dcf,_0x34fa67[_0xccc6d6(0x36f)]()[_0xccc6d6(0x836)]);if(_0x410241[_0xccc6d6(0x593)])_0x219d9f['push'](_0xccc6d6(0x2aa));for(const _0x3ea013 of _0x177dcf){if(!_0x3ea013)continue;if(_0x410241[_0xccc6d6(0xb44)])_0x219d9f[_0xccc6d6(0x5c8)]('actionEffect',_0x1069d0,_0x3ea013);}}else this[_0xccc6d6(0xa1e)]();}_0xeffdae&&_0x1069d0['isActor']()&&_0x219d9f[_0xccc6d6(0x5c8)](_0xccc6d6(0x4a3),_0x1069d0);if(_0x410241[_0xccc6d6(0x9fc)])_0x219d9f[_0xccc6d6(0x5c8)](_0xccc6d6(0xb2e),_0x1069d0,_0x177dcf,![]);_0x147457[_0xccc6d6(0x76a)](_0xccc6d6(0x34c));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Set_TargetActionSet',_0x3719cb=>{const _0x3330b1=_0x2d1202;if(!SceneManager[_0x3330b1(0x346)]())return;VisuMZ[_0x3330b1(0x433)](_0x3719cb,_0x3719cb);const _0x1ce517=$gameTemp[_0x3330b1(0xa20)](),_0x294b42=BattleManager[_0x3330b1(0xa74)],_0x377ceb=BattleManager['_subject'],_0x2756f4=BattleManager[_0x3330b1(0x934)]?BattleManager['_allTargets'][_0x3330b1(0x9e9)](0x0):[],_0x27f835=BattleManager[_0x3330b1(0x5d0)],_0x343e4b=_0x3719cb['DualWield']??![];if(!_0x1ce517||!_0x294b42||!_0x377ceb)return;if(!_0x294b42[_0x3330b1(0x36f)]())return;let _0x7bde7c=_0x343e4b?_0x27f835[_0x3330b1(0x501)](_0x377ceb):0x1;for(let _0x2dd06f=0x0;_0x2dd06f<_0x7bde7c;_0x2dd06f++){for(const _0x2ed90d of _0x2756f4){if(!_0x2ed90d)continue;if(_0x343e4b&&_0x377ceb[_0x3330b1(0xb90)]()){if(_0x3330b1(0x6db)==='AfUik')_0x27f835[_0x3330b1(0x5c8)](_0x3330b1(0x3c3),_0x377ceb,_0x2dd06f);else{const _0x8268ec=this[_0x3330b1(0x870)]();if(!_0x8268ec)return null;if(_0x8268ec['isBattleMember']()&&_0x8268ec['isAlive']())return _0x8268ec;}}if(_0x3719cb[_0x3330b1(0x497)])_0x27f835[_0x3330b1(0x5c8)](_0x3330b1(0x2b3),_0x377ceb,_0x294b42);if(_0x3719cb[_0x3330b1(0xb48)]>0x0)_0x27f835[_0x3330b1(0x5c8)](_0x3330b1(0x886),_0x3719cb['WaitCount1']);if(_0x3719cb['ActionAnimation'])_0x27f835[_0x3330b1(0x5c8)](_0x3330b1(0x698),_0x377ceb,[_0x2ed90d],_0x294b42[_0x3330b1(0x36f)]()[_0x3330b1(0x836)]);if(_0x3719cb['WaitCount2']>0x0)_0x27f835[_0x3330b1(0x5c8)](_0x3330b1(0x886),_0x3719cb[_0x3330b1(0x70f)]);if(_0x3719cb[_0x3330b1(0xb44)])_0x27f835[_0x3330b1(0x5c8)](_0x3330b1(0x5af),_0x377ceb,_0x2ed90d);}}_0x343e4b&&_0x377ceb['isActor']()&&_0x27f835[_0x3330b1(0x5c8)](_0x3330b1(0x4a3),_0x377ceb);if(_0x3719cb['ApplyImmortal'])_0x27f835['push'](_0x3330b1(0xb2e),_0x377ceb,_0x2756f4,![]);_0x1ce517[_0x3330b1(0x76a)](_0x3330b1(0x34c));}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x806),_0x55efba=>{const _0x453f5a=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x453f5a(0x433)](_0x55efba,_0x55efba);const _0x3d0595=$gameTemp[_0x453f5a(0xa20)](),_0x4749c6=BattleManager[_0x453f5a(0xa74)],_0x435fe2=BattleManager[_0x453f5a(0x403)],_0x5276a=BattleManager['_allTargets']?BattleManager['_allTargets'][_0x453f5a(0x9e9)](0x0):[],_0x2471ce=BattleManager[_0x453f5a(0x5d0)];if(!_0x3d0595||!_0x4749c6||!_0x435fe2)return;if(!_0x4749c6[_0x453f5a(0x36f)]())return;if(_0x55efba['ApplyImmortal'])_0x2471ce[_0x453f5a(0x5c8)](_0x453f5a(0xb2e),_0x435fe2,_0x5276a,![]);if(_0x55efba[_0x453f5a(0x237)])_0x2471ce[_0x453f5a(0x5c8)]('waitForNewLine');if(_0x55efba[_0x453f5a(0x4bd)])_0x2471ce[_0x453f5a(0x5c8)](_0x453f5a(0x394));if(_0x55efba['ClearBattleLog'])_0x2471ce['push']('clear');if(_0x55efba[_0x453f5a(0x539)])_0x2471ce[_0x453f5a(0x5c8)]('performActionEnd',_0x435fe2);if(_0x55efba[_0x453f5a(0x564)])_0x2471ce[_0x453f5a(0x5c8)](_0x453f5a(0x2be));_0x3d0595[_0x453f5a(0x76a)]('battlelog');}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x4c9),_0x1d1bf6=>{const _0x496d8a=_0x2d1202;if(!SceneManager[_0x496d8a(0x346)]())return;if(!Imported[_0x496d8a(0x893)])return;VisuMZ['ConvertParams'](_0x1d1bf6,_0x1d1bf6);const _0x1468dc=$gameTemp[_0x496d8a(0xa20)](),_0xb9610e=_0x1d1bf6[_0x496d8a(0x514)];if(!_0x1468dc)return;$gameScreen[_0x496d8a(0x8bb)](_0x1d1bf6['Angle'],_0x1d1bf6[_0x496d8a(0x86e)],_0x1d1bf6[_0x496d8a(0xb10)]);if(_0xb9610e)_0x1468dc[_0x496d8a(0x76a)](_0x496d8a(0x753));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x812),_0x1ba9be=>{const _0x2bd41c=_0x2d1202;if(!SceneManager[_0x2bd41c(0x346)]())return;if(!Imported[_0x2bd41c(0x893)])return;VisuMZ['ConvertParams'](_0x1ba9be,_0x1ba9be);const _0x19d489=$gameTemp[_0x2bd41c(0xa20)](),_0x26b734=_0x1ba9be['WaitForAngle'];if(!_0x19d489)return;$gameScreen[_0x2bd41c(0x8bb)](0x0,_0x1ba9be['Duration'],_0x1ba9be['EasingType']);if(_0x26b734)_0x19d489[_0x2bd41c(0x76a)](_0x2bd41c(0x753));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x5a1),_0x8da12b=>{const _0x23d709=_0x2d1202;if(!SceneManager[_0x23d709(0x346)]())return;if(!Imported[_0x23d709(0x893)])return;const _0x58ee3b=$gameTemp[_0x23d709(0xa20)]();if(!_0x58ee3b)return;_0x58ee3b[_0x23d709(0x76a)]('battleAngle');}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x71d),_0x3fca43=>{const _0x1eaf80=_0x2d1202;if(!SceneManager[_0x1eaf80(0x346)]())return;VisuMZ[_0x1eaf80(0x433)](_0x3fca43,_0x3fca43);const _0xb2546d=$gameTemp[_0x1eaf80(0xa20)](),_0x5272c7=BattleManager[_0x1eaf80(0xa74)],_0x364e9d=BattleManager[_0x1eaf80(0x403)],_0x151463=VisuMZ[_0x1eaf80(0xb4c)](_0x3fca43[_0x1eaf80(0x22f)]),_0x36e033=_0x3fca43[_0x1eaf80(0x5df)],_0x81525f=BattleManager[_0x1eaf80(0x5d0)];if(!_0xb2546d||!_0x5272c7||!_0x364e9d)return;if(!_0x5272c7[_0x1eaf80(0x36f)]())return;let _0x5cf3fe=_0x5272c7['item']()['animationId'];if(_0x5cf3fe<0x0)_0x5cf3fe=_0x364e9d[_0x1eaf80(0xb96)]();$gameTemp['requestAnimation'](_0x151463,_0x5cf3fe,_0x36e033),_0x3fca43['WaitForAnimation']&&(_0x1eaf80(0x317)==='IILBW'?_0xb2546d[_0x1eaf80(0x76a)](_0x1eaf80(0x873)):(_0x38ebe6=_0x104c04[_0x1eaf80(0xb5f)]((_0x32a509,_0x5d0a51,_0x317230)=>_0x317230[_0x1eaf80(0x783)](_0x32a509)===_0x5d0a51),_0x14407e['isSceneBattle']()&&_0x5c6c3f['isBattleFlipped']()&&(_0x123578=!_0x2968b9),_0x1dec00['BattleCore']['Game_Temp_requestAnimation'][_0x1eaf80(0x86c)](this,_0x148626,_0x4ee471,_0x3ee03f),_0x1f7d62['isSceneBattle']()&&_0x93241b[_0x1eaf80(0x3d2)]['processAnimationRequests']()));}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],'ActSeq_Animation_AttackAnimation',_0x49b33e=>{const _0x3e68f9=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3e68f9(0x433)](_0x49b33e,_0x49b33e);const _0x33db3c=$gameTemp['getLastPluginCommandInterpreter'](),_0x21b45d=BattleManager[_0x3e68f9(0x403)],_0x11aeb2=VisuMZ['CreateActionSequenceTargets'](_0x49b33e['Targets']),_0x3beecb=_0x49b33e[_0x3e68f9(0x5df)],_0xe9249=BattleManager[_0x3e68f9(0x5d0)];if(!_0x33db3c||!_0x21b45d)return;const _0xcacbfa=_0x21b45d[_0x3e68f9(0xb96)]();$gameTemp[_0x3e68f9(0x872)](_0x11aeb2,_0xcacbfa,_0x3beecb),_0x49b33e[_0x3e68f9(0x593)]&&_0x33db3c[_0x3e68f9(0x76a)](_0x3e68f9(0x873));}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0xb24),_0x4e2423=>{const _0x594b61=_0x2d1202;if(!SceneManager[_0x594b61(0x346)]())return;VisuMZ[_0x594b61(0x433)](_0x4e2423,_0x4e2423);const _0x2ed435=_0x4162da[_0x594b61(0x612)](_0x4e2423[_0x594b61(0x5ed)]);if(_0x2ed435<=0x0)return;const _0x1ba9e3=$gameTemp[_0x594b61(0xa20)](),_0x4162da=BattleManager[_0x594b61(0x403)],_0x4e799a=VisuMZ[_0x594b61(0xb4c)](_0x4e2423['Targets']),_0xddf40e=_0x4e2423['Mirror'],_0x45012e=BattleManager[_0x594b61(0x5d0)];if(!_0x1ba9e3||!_0x4162da)return;$gameTemp[_0x594b61(0x872)](_0x4e799a,_0x2ed435,_0xddf40e),_0x4e2423[_0x594b61(0x593)]&&_0x1ba9e3['setWaitMode']('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x35f),_0x5c1c7a=>{const _0xb34c49=_0x2d1202;if(!SceneManager[_0xb34c49(0x346)]())return;VisuMZ[_0xb34c49(0x433)](_0x5c1c7a,_0x5c1c7a);const _0x52e08a=$gameTemp[_0xb34c49(0xa20)](),_0xaeeabb=BattleManager[_0xb34c49(0xa74)],_0x2d7842=_0x5c1c7a[_0xb34c49(0x5df)],_0x2f7d95=VisuMZ[_0xb34c49(0xb4c)](_0x5c1c7a['Targets']);if(!_0x52e08a||!_0xaeeabb)return;if(!_0xaeeabb['item']())return;for(const _0x3eced8 of _0x2f7d95){if(!_0x3eced8)continue;_0x3eced8[_0xb34c49(0x2cf)](_0xaeeabb,_0x2d7842);}if(_0x5c1c7a[_0xb34c49(0x593)])_0x52e08a['setWaitMode'](_0xb34c49(0x873));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Animation_ChangeBattlePortrait',_0x4efe9a=>{const _0x2e8aeb=_0x2d1202;VisuMZ['ConvertParams'](_0x4efe9a,_0x4efe9a);const _0x39732d=$gameTemp[_0x2e8aeb(0xa20)](),_0x61de2c=VisuMZ[_0x2e8aeb(0xb4c)](_0x4efe9a[_0x2e8aeb(0x22f)]),_0x1b14d7=_0x4efe9a['Filename'];if(!_0x1b14d7)return;for(const _0x216d6f of _0x61de2c){if(!_0x216d6f)continue;if(!_0x216d6f[_0x2e8aeb(0xb90)]())continue;_0x216d6f[_0x2e8aeb(0x3b3)](_0x1b14d7);}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Animation_PlayAtCoordinate',_0x2ab814=>{const _0x364e8a=_0x2d1202;if(!SceneManager[_0x364e8a(0xb69)])return;if(!SceneManager[_0x364e8a(0xb69)][_0x364e8a(0x3d2)])return;if(!Imported[_0x364e8a(0x9ef)])return;VisuMZ[_0x364e8a(0x433)](_0x2ab814,_0x2ab814);const _0x33c82f=$gameTemp[_0x364e8a(0xa20)](),_0x442c67=Math[_0x364e8a(0x4b4)](_0x2ab814[_0x364e8a(0x465)]),_0x4d2543=Math[_0x364e8a(0x4b4)](_0x2ab814[_0x364e8a(0x91b)]);$gameTemp[_0x364e8a(0xaef)](_0x442c67,_0x4d2543,_0x2ab814[_0x364e8a(0xa1f)],_0x2ab814['Mirror'],_0x2ab814[_0x364e8a(0x2d8)]),_0x2ab814[_0x364e8a(0x222)]&&_0x33c82f&&(SceneManager[_0x364e8a(0xb69)][_0x364e8a(0x3d2)][_0x364e8a(0x310)](),_0x33c82f[_0x364e8a(0x76a)](_0x364e8a(0x873)));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x979),_0x36e252=>{const _0x845146=_0x2d1202;if(!SceneManager[_0x845146(0x346)]())return;VisuMZ[_0x845146(0x433)](_0x36e252,_0x36e252);const _0x5d9077=$gameTemp[_0x845146(0xa20)](),_0x54c10b=VisuMZ[_0x845146(0xb4c)](_0x36e252[_0x845146(0x22f)]),_0x155d85=_0x36e252[_0x845146(0xa1f)],_0x22eb84=_0x36e252['Mirror'];if(!_0x5d9077)return;$gameTemp[_0x845146(0x872)](_0x54c10b,_0x155d85,_0x22eb84);if(_0x36e252['WaitForAnimation'])_0x5d9077[_0x845146(0x76a)](_0x845146(0x873));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x8b6),_0x2d5218=>{const _0x46876e=_0x2d1202;if(!SceneManager[_0x46876e(0x346)]())return;const _0x314c6e=$gameTemp[_0x46876e(0xa20)]();if(!_0x314c6e)return;_0x314c6e[_0x46876e(0x76a)]('battleAnimation');}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x1e5),_0x20690e=>{const _0x343d63=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x20690e,_0x20690e);const _0x4d4288=BattleManager[_0x343d63(0x5d0)],_0x2915a1=_0x20690e['CopyCombatLog']&&Imported[_0x343d63(0xb56)];_0x4d4288['addText'](_0x20690e[_0x343d63(0x9ce)]),_0x2915a1&&Imported[_0x343d63(0xb56)]&&$gameSystem[_0x343d63(0xa2c)](_0x20690e[_0x343d63(0x9ce)]||'',_0x20690e[_0x343d63(0x3b8)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x9db),_0x510580=>{const _0x4dda4a=_0x2d1202;if(!SceneManager[_0x4dda4a(0x346)]())return;const _0x29c49b=BattleManager[_0x4dda4a(0x5d0)];_0x29c49b[_0x4dda4a(0x932)]();}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x76f),_0x199911=>{const _0x1fb33f=_0x2d1202;if(!SceneManager['isSceneBattle']())return;const _0xdd5713=$gameTemp[_0x1fb33f(0xa20)](),_0x2ed964=BattleManager[_0x1fb33f(0xa74)],_0x17b0ab=BattleManager['_subject'],_0x5af9fe=BattleManager[_0x1fb33f(0x5d0)];if(!_0xdd5713||!_0x2ed964||!_0x17b0ab)return;if(!_0x2ed964[_0x1fb33f(0x36f)]())return;_0x5af9fe['displayAction'](_0x17b0ab,_0x2ed964[_0x1fb33f(0x36f)]()),_0xdd5713[_0x1fb33f(0x76a)](_0x1fb33f(0x34c));}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x885),_0x2f4ae7=>{const _0xd57252=_0x2d1202;if(!SceneManager[_0xd57252(0x346)]())return;const _0x5cb23e=BattleManager['_logWindow'];_0x5cb23e[_0xd57252(0x6af)]();}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x3fa),_0x2d090e=>{const _0xcd0fc5=_0x2d1202;if(!SceneManager[_0xcd0fc5(0x346)]())return;const _0x3223ac=BattleManager[_0xcd0fc5(0x5d0)];_0x3223ac[_0xcd0fc5(0x4bc)]();}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xb12),_0x4fa692=>{const _0x2f5284=_0x2d1202;if(!SceneManager['isSceneBattle']())return;const _0x416aba=BattleManager[_0x2f5284(0x5d0)];_0x416aba[_0x2f5284(0x2bd)]();}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x48e),_0x158c52=>{const _0xd5cc1e=_0x2d1202;if(!SceneManager[_0xd5cc1e(0x346)]())return;VisuMZ[_0xd5cc1e(0x433)](_0x158c52,_0x158c52),SceneManager[_0xd5cc1e(0xb69)][_0xd5cc1e(0x4e6)](_0x158c52[_0xd5cc1e(0xb68)]);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_BattleLog_WaitForBattleLog',_0x3878bf=>{const _0x1b6256=_0x2d1202;if(!SceneManager[_0x1b6256(0x346)]())return;const _0x825dae=$gameTemp[_0x1b6256(0xa20)]();_0x825dae[_0x1b6256(0x76a)](_0x1b6256(0x34c));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x3af),_0x301418=>{const _0x42dd13=_0x2d1202;if(!SceneManager[_0x42dd13(0x346)]())return;const _0x420a4e=$gameTemp[_0x42dd13(0xa20)](),_0x286bb7=BattleManager[_0x42dd13(0x5d0)];_0x286bb7['waitForNewLine'](),_0x420a4e[_0x42dd13(0x76a)](_0x42dd13(0x34c));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Camera_Clamp',_0x32db36=>{const _0x5f3143=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5f3143(0x893)])return;VisuMZ[_0x5f3143(0x433)](_0x32db36,_0x32db36);const _0x211e93=$gameScreen['battleCameraData']();_0x211e93[_0x5f3143(0x3cb)]=_0x32db36[_0x5f3143(0x47d)];}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x49b),_0x31f95a=>{const _0x3424db=_0x2d1202;if(!SceneManager[_0x3424db(0x346)]())return;if(!Imported[_0x3424db(0x893)])return;VisuMZ[_0x3424db(0x433)](_0x31f95a,_0x31f95a);const _0x28a531=$gameTemp[_0x3424db(0xa20)](),_0x4abc61=_0x31f95a['WaitForCamera'];$gameScreen[_0x3424db(0x54f)](_0x31f95a['FocusX'],_0x31f95a[_0x3424db(0xa8f)],_0x31f95a['Duration'],_0x31f95a[_0x3424db(0xb10)]);if(_0x4abc61)_0x28a531[_0x3424db(0x76a)]('battleCamera');}),PluginManager[_0x2d1202(0x520)](pluginData['name'],'ActSeq_Camera_FocusTarget',_0x33bba7=>{const _0x5af7ab=_0x2d1202;if(!SceneManager[_0x5af7ab(0x346)]())return;if(!Imported[_0x5af7ab(0x893)])return;VisuMZ[_0x5af7ab(0x433)](_0x33bba7,_0x33bba7);const _0x5c1585=$gameTemp[_0x5af7ab(0xa20)](),_0x591574=VisuMZ[_0x5af7ab(0xb4c)](_0x33bba7[_0x5af7ab(0x22f)]),_0x45ec54=_0x33bba7[_0x5af7ab(0xa21)];$gameScreen['setBattleCameraTargets'](_0x591574,_0x33bba7['Duration'],_0x33bba7['EasingType']);if(_0x45ec54)_0x5c1585[_0x5af7ab(0x76a)](_0x5af7ab(0x424));}),PluginManager[_0x2d1202(0x520)](pluginData['name'],'ActSeq_Camera_Offset',_0x50d409=>{const _0x26f807=_0x2d1202;if(!SceneManager[_0x26f807(0x346)]())return;if(!Imported[_0x26f807(0x893)])return;VisuMZ[_0x26f807(0x433)](_0x50d409,_0x50d409);const _0x544b6b=$gameTemp[_0x26f807(0xa20)](),_0x4599dd=_0x50d409[_0x26f807(0xa21)];$gameScreen[_0x26f807(0xa36)](_0x50d409[_0x26f807(0x9cc)],_0x50d409[_0x26f807(0xa1d)],_0x50d409['Duration'],_0x50d409[_0x26f807(0xb10)]);if(_0x4599dd)_0x544b6b[_0x26f807(0x76a)](_0x26f807(0x424));}),PluginManager[_0x2d1202(0x520)](pluginData['name'],'ActSeq_Camera_Reset',_0xa9e601=>{const _0x296bfd=_0x2d1202;if(!SceneManager[_0x296bfd(0x346)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0xa9e601,_0xa9e601);const _0x325302=$gameTemp[_0x296bfd(0xa20)](),_0x86e9fe=_0xa9e601['ResetFocus'],_0x424ea8=_0xa9e601[_0x296bfd(0x48d)],_0x18ecff=_0xa9e601[_0x296bfd(0xa21)];if(_0x86e9fe){if(_0x296bfd(0x50a)==='DuNOw'){const _0x535b96=Math[_0x296bfd(0x4b4)](Graphics[_0x296bfd(0x72b)]/0x2),_0x17752e=Math[_0x296bfd(0x4b4)](Graphics['height']/0x2);$gameScreen[_0x296bfd(0x54f)](_0x535b96,_0x17752e,_0xa9e601['Duration'],_0xa9e601[_0x296bfd(0xb10)]);}else _0x1cd7e8=_0x4936ea;}if(_0x424ea8){if('xGcLS'!==_0x296bfd(0x73f))$gameScreen[_0x296bfd(0xa36)](0x0,0x0,_0xa9e601['Duration'],_0xa9e601[_0x296bfd(0xb10)]);else return _0x4c3c85(_0x5c4032['$1'])||0x0;}if(_0x18ecff)_0x325302['setWaitMode'](_0x296bfd(0x424));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x8e5),_0x5b6567=>{const _0x237d8c=_0x2d1202;if(!SceneManager[_0x237d8c(0x346)]())return;if(!Imported[_0x237d8c(0x893)])return;const _0x12a957=$gameTemp[_0x237d8c(0xa20)]();if(!_0x12a957)return;_0x12a957['setWaitMode'](_0x237d8c(0x424));}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],'ActSeq_DB_DragonbonesMotionAni',_0x468d5f=>{const _0x2bb644=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2bb644(0x44a)])return;VisuMZ[_0x2bb644(0x433)](_0x468d5f,_0x468d5f);const _0x370278=VisuMZ[_0x2bb644(0xb4c)](_0x468d5f[_0x2bb644(0x22f)]),_0x4b94dc=_0x468d5f['MotionAni'][_0x2bb644(0x8e4)]()[_0x2bb644(0x43b)]();for(const _0x3ab823 of _0x370278){if(!_0x3ab823)continue;_0x3ab823[_0x2bb644(0x771)](_0x4b94dc);}}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x695),_0x2471ed=>{const _0x32a127=_0x2d1202;if(!SceneManager[_0x32a127(0x346)]())return;if(!Imported[_0x32a127(0x44a)])return;VisuMZ[_0x32a127(0x433)](_0x2471ed,_0x2471ed);const _0x4fa163=VisuMZ[_0x32a127(0xb4c)](_0x2471ed[_0x32a127(0x22f)]),_0x1678be=_0x2471ed['TimeScale'];for(const _0x743a8d of _0x4fa163){if(!_0x743a8d)continue;_0x743a8d[_0x32a127(0x57e)]()[_0x32a127(0xa69)]=_0x1678be;}}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x3f9),_0x2bcacb=>{const _0x13e3b7=_0x2d1202;if(!SceneManager[_0x13e3b7(0x346)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x13e3b7(0x433)](_0x2bcacb,_0x2bcacb);const _0x3fa311=BattleManager[_0x13e3b7(0xa74)],_0x3a92e2=_0x2bcacb['Elements'];if(!_0x3fa311)return;_0x3fa311[_0x13e3b7(0x302)]=_0x3a92e2;}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x96d),_0x51e1b1=>{const _0x19152f=_0x2d1202;if(!SceneManager[_0x19152f(0x346)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x234c68=BattleManager[_0x19152f(0xa74)];if(!_0x234c68)return;_0x234c68[_0x19152f(0xb34)]();}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x920),_0xd05dc0=>{const _0x1c6abf=_0x2d1202;if(!SceneManager[_0x1c6abf(0x346)]())return;if(!Imported[_0x1c6abf(0x716)])return;VisuMZ[_0x1c6abf(0x433)](_0xd05dc0,_0xd05dc0);const _0xa2094c=BattleManager[_0x1c6abf(0xa74)],_0x4c5a3d=_0xd05dc0['Elements'];if(!_0xa2094c)return;_0xa2094c[_0x1c6abf(0x4c5)]=_0x4c5a3d;}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x551),_0x4e34e2=>{const _0x253eff=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x253eff(0x716)])return;const _0x5d46d5=BattleManager['_action'];if(!_0x5d46d5)return;_0x5d46d5[_0x253eff(0xa67)]=!![];}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x911),_0x5e51ce=>{const _0x4cda0e=_0x2d1202;if(!Imported[_0x4cda0e(0x22b)])return;if(!SceneManager[_0x4cda0e(0x346)]())return;VisuMZ[_0x4cda0e(0x433)](_0x5e51ce,_0x5e51ce);const _0x5d7e64=VisuMZ[_0x4cda0e(0xb4c)](_0x5e51ce[_0x4cda0e(0x22f)]);for(const _0x320421 of _0x5d7e64){if('HLdjz'!==_0x4cda0e(0x972)){if(!_0x320421)continue;_0x320421[_0x4cda0e(0x752)](_0x4cda0e(0x9e7)),_0x320421[_0x4cda0e(0x752)](_0x4cda0e(0x2c0)),_0x320421[_0x4cda0e(0x752)]('tv'),_0x320421['clearHorrorEffects']();}else _0x4fe75e[_0x4cda0e(0x8ec)]['updatePadding'][_0x4cda0e(0x86c)](this);}$gamePlayer[_0x4cda0e(0x2bd)]();}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x978),_0x28033f=>{const _0x2fb587=_0x2d1202;if(!Imported[_0x2fb587(0x22b)])return;if(!SceneManager[_0x2fb587(0x346)]())return;VisuMZ[_0x2fb587(0x433)](_0x28033f,_0x28033f);const _0x34ef92=VisuMZ['CreateActionSequenceTargets'](_0x28033f[_0x2fb587(0x22f)]),_0x30207d=_0x2fb587(0x2c0);_0x28033f[_0x2fb587(0x96e)]=Math[_0x2fb587(0xb26)](_0x28033f['slices']/0x2),_0x28033f[_0x2fb587(0x7d2)]=_0x28033f['slices'],_0x28033f[_0x2fb587(0x511)]=!![];for(const _0x26b289 of _0x34ef92){if(!_0x26b289)continue;_0x26b289[_0x2fb587(0x2a7)](_0x30207d,_0x28033f);}$gamePlayer[_0x2fb587(0x2bd)]();}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Horror_GlitchRemove',_0x5712d5=>{const _0x1adf8e=_0x2d1202;if(!Imported[_0x1adf8e(0x22b)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1adf8e(0x433)](_0x5712d5,_0x5712d5);const _0x9c435b=VisuMZ[_0x1adf8e(0xb4c)](_0x5712d5[_0x1adf8e(0x22f)]);for(const _0x11a21b of _0x9c435b){if('vfbTL'!==_0x1adf8e(0x655)){if(!_0x11a21b)continue;_0x11a21b['removeHorrorEffect'](_0x1adf8e(0x2c0));}else{if(_0x226d80[_0x1adf8e(0x88e)]!==_0x305fcd)return _0x4c8acd[_0x1adf8e(0x88e)];if(this[_0x1adf8e(0x239)])return this[_0x1adf8e(0x239)];return this[_0x1adf8e(0x239)]=_0xa53eda[_0x1adf8e(0xa3c)][_0x1adf8e(0x6a1)][_0x1adf8e(0xbd5)][_0x1adf8e(0x4d6)][_0x1adf8e(0x8e4)]()['trim'](),this[_0x1adf8e(0x239)]===_0x1adf8e(0x549)&&!_0x552294[_0x1adf8e(0xa55)]&&(this[_0x1adf8e(0x239)]=_0x1adf8e(0x376)),this[_0x1adf8e(0x239)];}}$gamePlayer[_0x1adf8e(0x2bd)]();}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x631),_0x11d6dc=>{const _0x55f5a1=_0x2d1202;if(!Imported[_0x55f5a1(0x22b)])return;if(!SceneManager[_0x55f5a1(0x346)]())return;VisuMZ[_0x55f5a1(0x433)](_0x11d6dc,_0x11d6dc);const _0x57775b=VisuMZ[_0x55f5a1(0xb4c)](_0x11d6dc[_0x55f5a1(0x22f)]),_0x2c8469='noise';for(const _0x36fc36 of _0x57775b){if(_0x55f5a1(0x905)!==_0x55f5a1(0x905)){const _0x5f41d4=_0x493054['x']+_0x3ee978['floor']((_0x4bfcac['width']-_0xf518e4)/0x2);this[_0x55f5a1(0xb6a)](_0xdb4270,_0x5f41d4,_0x12b1f4['y'],_0x30b48e);}else{if(!_0x36fc36)continue;_0x36fc36['setHorrorEffectSettings'](_0x2c8469,_0x11d6dc);}}$gamePlayer[_0x55f5a1(0x2bd)]();}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x7f8),_0x643497=>{const _0x433c71=_0x2d1202;if(!Imported[_0x433c71(0x22b)])return;if(!SceneManager[_0x433c71(0x346)]())return;VisuMZ[_0x433c71(0x433)](_0x643497,_0x643497);const _0x151f6c=VisuMZ[_0x433c71(0xb4c)](_0x643497[_0x433c71(0x22f)]);for(const _0x10ae7a of _0x151f6c){if(_0x433c71(0x2ad)!=='GIUTG'){const _0x93b2b3=new _0x3445fd(0x0,0x0,_0xef1c4f[_0x433c71(0x72b)],_0x7d4e97[_0x433c71(0x940)]);this[_0x433c71(0xa0c)]=new _0x1fead2(_0x93b2b3),this['_commandNameWindow'][_0x433c71(0xad4)]=0x0,this[_0x433c71(0x304)](this[_0x433c71(0xa0c)]),this[_0x433c71(0x508)]();}else{if(!_0x10ae7a)continue;_0x10ae7a[_0x433c71(0x752)](_0x433c71(0x9e7));}}$gamePlayer[_0x433c71(0x2bd)]();}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x6e6),_0x39e894=>{const _0x5c1774=_0x2d1202;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x5c1774(0x346)]())return;VisuMZ[_0x5c1774(0x433)](_0x39e894,_0x39e894);const _0x2a32c6=VisuMZ['CreateActionSequenceTargets'](_0x39e894[_0x5c1774(0x22f)]),_0x45071b='tv';for(const _0x161742 of _0x2a32c6){if(!_0x161742)continue;_0x161742[_0x5c1774(0x2a7)](_0x45071b,_0x39e894);}$gamePlayer[_0x5c1774(0x2bd)]();}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x389),_0x14f7b2=>{const _0x350db0=_0x2d1202;if(!Imported[_0x350db0(0x22b)])return;if(!SceneManager[_0x350db0(0x346)]())return;VisuMZ[_0x350db0(0x433)](_0x14f7b2,_0x14f7b2);const _0x15b5d4=VisuMZ[_0x350db0(0xb4c)](_0x14f7b2[_0x350db0(0x22f)]);for(const _0x3fc288 of _0x15b5d4){if(_0x350db0(0x807)===_0x350db0(0x807)){if(!_0x3fc288)continue;_0x3fc288[_0x350db0(0x752)]('tv');}else return _0x16dcba;}$gamePlayer['refresh']();}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x1ff),_0x41e58b=>{const _0x4b6b6d=_0x2d1202;if(!SceneManager[_0x4b6b6d(0x346)]())return;if(!Imported[_0x4b6b6d(0x75d)])return;const _0x32a695=SceneManager[_0x4b6b6d(0xb69)][_0x4b6b6d(0x3d2)];if(!_0x32a695)return;VisuMZ['ConvertParams'](_0x41e58b,_0x41e58b);const _0x59ad46=_0x41e58b[_0x4b6b6d(0x6c1)]||0x1,_0x5e3398=_0x41e58b[_0x4b6b6d(0x86e)]||0x1,_0x27d2d5=_0x41e58b[_0x4b6b6d(0xb10)]||_0x4b6b6d(0x9d0);_0x32a695[_0x4b6b6d(0x48b)](_0x59ad46,_0x5e3398,_0x27d2d5);}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0xac5),_0x52b4a1=>{const _0x1e20bf=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1e20bf(0x75d)])return;const _0x2611aa=SceneManager[_0x1e20bf(0xb69)][_0x1e20bf(0x3d2)];if(!_0x2611aa)return;VisuMZ['ConvertParams'](_0x52b4a1,_0x52b4a1);const _0x4fe6b0=Number(_0x52b4a1[_0x1e20bf(0x71a)])||0x0,_0x2746a8=Number(_0x52b4a1['Rate']),_0xb9a9d6=_0x52b4a1[_0x1e20bf(0x86e)]||0x1,_0x2ad9f9=_0x52b4a1[_0x1e20bf(0xb10)]||_0x1e20bf(0x9d0);_0x2611aa['setupMotionBlurImpactFilter'](_0x4fe6b0,_0x2746a8,_0xb9a9d6,_0x2ad9f9);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x797),_0x2e4d83=>{const _0xb4531a=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xb4531a(0x75d)])return;const _0x459a0a=SceneManager['_scene'][_0xb4531a(0x3d2)];if(!_0x459a0a)return;VisuMZ['ConvertParams'](_0x2e4d83,_0x2e4d83);const _0x2f001c=Number(_0x2e4d83[_0xb4531a(0x71a)])||0x0,_0x4899e1=Number(_0x2e4d83[_0xb4531a(0x5be)]),_0x4135ab=_0x2e4d83['Duration']||0x1,_0x73eb94=_0x2e4d83[_0xb4531a(0xb10)]||'Linear',_0x360572=VisuMZ['CreateActionSequenceTargets'](_0x2e4d83[_0xb4531a(0x22f)]);for(const _0x1b6f5b of _0x360572){if(_0xb4531a(0xa4f)==='LiGAP'){_0x548ca1-=_0x1d053a;const _0x36c6d2=_0x26b531[_0xb4531a(0xa3c)]['Settings']['Damage'][_0xb4531a(0x62a)],_0x42036d=_0x3075f5[_0xb4531a(0x717)](0x1-_0x43ee08/((_0x18286d-_0x10164a)*_0x36c6d2+_0x47add1),0.01);_0x3e998f*=_0x42036d,_0x3b3085+=_0x5e1653;}else{if(!_0x1b6f5b)continue;if(!_0x1b6f5b[_0xb4531a(0x22c)]())continue;_0x1b6f5b[_0xb4531a(0x22c)]()[_0xb4531a(0x345)](_0x2f001c,_0x4899e1,_0x4135ab,_0x73eb94);}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Impact_MotionTrailCreate',_0x191c12=>{const _0x2ff580=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2ff580(0x75d)])return;VisuMZ['ConvertParams'](_0x191c12,_0x191c12);const _0xe15541={'delay':_0x191c12[_0x2ff580(0x6f9)],'duration':_0x191c12[_0x2ff580(0xbcd)],'hue':_0x191c12['hue'],'opacityStart':_0x191c12[_0x2ff580(0x7c0)],'tone':_0x191c12[_0x2ff580(0xb9b)],'visible':!![]},_0x2cdbf5=VisuMZ[_0x2ff580(0xb4c)](_0x191c12[_0x2ff580(0x22f)]);for(const _0x3bcf03 of _0x2cdbf5){if(_0x2ff580(0x7eb)==='biOuu'){if(this[_0x2ff580(0xb7b)]())this[_0x2ff580(0x746)][_0x2ff580(0x3e1)](_0x4cb3e4);}else{if(!_0x3bcf03)continue;_0x3bcf03[_0x2ff580(0x969)](_0xe15541);}}}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0xb0b),_0x16bd68=>{const _0x4d9977=_0x2d1202;if(!SceneManager[_0x4d9977(0x346)]())return;if(!Imported[_0x4d9977(0x75d)])return;VisuMZ[_0x4d9977(0x433)](_0x16bd68,_0x16bd68);const _0x3f89cb=VisuMZ[_0x4d9977(0xb4c)](_0x16bd68[_0x4d9977(0x22f)]);for(const _0x4474c0 of _0x3f89cb){if(!_0x4474c0)continue;_0x4474c0[_0x4d9977(0x575)]();}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xabe),_0x34dbf7=>{const _0x82c316=_0x2d1202;if(!Imported[_0x82c316(0x75d)])return;const _0x51d1aa=SceneManager['_scene'][_0x82c316(0x3d2)];if(!_0x51d1aa)return;VisuMZ[_0x82c316(0x433)](_0x34dbf7,_0x34dbf7);const _0x42e8a2=_0x34dbf7['X']||0x0,_0x42a8d6=_0x34dbf7['Y']||0x0,_0x3e2c9a=_0x34dbf7[_0x82c316(0x9f1)]||0x0,_0x2c1b35=_0x34dbf7[_0x82c316(0x3bd)]||0x0,_0x29985f=_0x34dbf7[_0x82c316(0x86e)]||0x1;_0x51d1aa[_0x82c316(0x764)](_0x42e8a2,_0x42a8d6,_0x3e2c9a,_0x2c1b35,_0x29985f);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x4cf),_0x130777=>{const _0x5530de=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5530de(0x75d)])return;const _0x596792=SceneManager[_0x5530de(0xb69)][_0x5530de(0x3d2)];if(!_0x596792)return;VisuMZ[_0x5530de(0x433)](_0x130777,_0x130777);const _0x50dbbf=VisuMZ[_0x5530de(0xb4c)](_0x130777[_0x5530de(0x22f)]),_0x441990=_0x130777[_0x5530de(0x8b9)],_0x5459be=_0x130777[_0x5530de(0x9cc)]||0x0,_0x430813=_0x130777[_0x5530de(0xa1d)]||0x0,_0x23bfde=_0x130777[_0x5530de(0x9f1)]||0x0,_0x3413c8=_0x130777[_0x5530de(0x3bd)]||0x0,_0x1b0a9d=_0x130777[_0x5530de(0x86e)]||0x1;for(const _0x4a137a of _0x50dbbf){if('OuKct'===_0x5530de(0x69c)){if(!_0x4a137a)continue;if(!_0x4a137a[_0x5530de(0x22c)]())continue;const _0x35a379=_0x4a137a['battler']();let _0x45ad91=_0x35a379[_0x5530de(0x99a)],_0x1b7d46=_0x35a379[_0x5530de(0x75a)];_0x45ad91+=(Graphics[_0x5530de(0x72b)]-Graphics[_0x5530de(0x203)])/0x2,_0x1b7d46+=(Graphics['height']-Graphics[_0x5530de(0x9ec)])/0x2;if(_0x441990['match'](/front/i))_0x45ad91+=(_0x4a137a[_0x5530de(0xad8)]()?0x1:-0x1)*_0x35a379['mainSpriteWidth']()/0x2;else _0x441990[_0x5530de(0xaa0)](/back/i)&&(_0x45ad91+=(_0x4a137a['isEnemy']()?-0x1:0x1)*_0x35a379[_0x5530de(0x81d)]()/0x2);if(_0x441990[_0x5530de(0xaa0)](/head/i))'YwFat'!==_0x5530de(0x331)?(_0x10e207['BattleCore']['Window_BattleLog_popupDamage'][_0x5530de(0x86c)](this,_0x18f762),this['callNextMethod']()):_0x1b7d46-=_0x35a379[_0x5530de(0x668)]();else{if(_0x441990[_0x5530de(0xaa0)](/center/i)){if(_0x5530de(0x384)===_0x5530de(0xb4f)){if(!this[_0x5530de(0x329)])return![];return _0x6ecbd[_0x5530de(0xa3c)][_0x5530de(0xb72)][_0x5530de(0x86c)](this);}else _0x1b7d46-=_0x35a379[_0x5530de(0x668)]()/0x2;}}_0x45ad91+=_0x5459be,_0x1b7d46+=_0x430813,_0x596792['setupShockwaveImpactFilter'](_0x45ad91,_0x1b7d46,_0x23bfde,_0x3413c8,_0x1b0a9d);}else{this[_0x5530de(0xbab)]['bitmap']=_0x1d2a50[_0x5530de(0xb1c)];return;}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x4b3),_0x1d382f=>{const _0x2302b4=_0x2d1202;if(!SceneManager[_0x2302b4(0x346)]())return;if(!Imported[_0x2302b4(0x75d)])return;const _0x35541a=SceneManager['_scene']['_spriteset'];if(!_0x35541a)return;VisuMZ['ConvertParams'](_0x1d382f,_0x1d382f);const _0x39704a=VisuMZ[_0x2302b4(0xb4c)](_0x1d382f[_0x2302b4(0x22f)]),_0x53d8ac=_0x1d382f[_0x2302b4(0x8b9)],_0x1697b9=_0x1d382f[_0x2302b4(0x9cc)]||0x0,_0x4c8f8a=_0x1d382f[_0x2302b4(0xa1d)]||0x0,_0x2a31db=_0x1d382f[_0x2302b4(0x9f1)]||0x0,_0xe525ef=_0x1d382f[_0x2302b4(0x3bd)]||0x0,_0x4a8ac4=_0x1d382f[_0x2302b4(0x86e)]||0x1,_0x125c8b=Math[_0x2302b4(0x52e)](..._0x39704a[_0x2302b4(0x64c)](_0x195773=>_0x195773[_0x2302b4(0x22c)]()[_0x2302b4(0x99a)]-_0x195773[_0x2302b4(0x22c)]()['mainSpriteWidth']()/0x2)),_0x52c217=Math[_0x2302b4(0x717)](..._0x39704a[_0x2302b4(0x64c)](_0x458098=>_0x458098[_0x2302b4(0x22c)]()[_0x2302b4(0x99a)]+_0x458098[_0x2302b4(0x22c)]()[_0x2302b4(0x81d)]()/0x2)),_0x4f4bc6=Math[_0x2302b4(0x52e)](..._0x39704a[_0x2302b4(0x64c)](_0x3984eb=>_0x3984eb['battler']()['_baseY']-_0x3984eb[_0x2302b4(0x22c)]()[_0x2302b4(0x668)]())),_0x26b2ea=Math['max'](..._0x39704a[_0x2302b4(0x64c)](_0x25d9dc=>_0x25d9dc[_0x2302b4(0x22c)]()[_0x2302b4(0x75a)])),_0x14e9cb=_0x39704a['filter'](_0xcc44ad=>_0xcc44ad[_0x2302b4(0xb90)]())[_0x2302b4(0x1d7)],_0x902d09=_0x39704a[_0x2302b4(0xb5f)](_0x1e51cb=>_0x1e51cb[_0x2302b4(0xad8)]())[_0x2302b4(0x1d7)];let _0xa6c760=0x0,_0x1bcddc=0x0;if(_0x53d8ac[_0x2302b4(0xaa0)](/front/i))_0xa6c760=_0x14e9cb>=_0x902d09?_0x125c8b:_0x52c217;else{if(_0x53d8ac['match'](/middle/i))_0x2302b4(0xaae)===_0x2302b4(0xaae)?(_0xa6c760=(_0x125c8b+_0x52c217)/0x2,melee=-0x1):(_0x45b8ae[_0x2302b4(0xa3c)][_0x2302b4(0x8df)]&&_0x11b3c3[_0x2302b4(0xa3c)]['ParseArmorNotetags'][_0x2302b4(0x86c)](this,_0x28dd6a),_0x535d59[_0x2302b4(0xa3c)][_0x2302b4(0x512)](_0x3b2ce3));else _0x53d8ac[_0x2302b4(0xaa0)](/back/i)&&(_0xa6c760=_0x14e9cb>=_0x902d09?_0x52c217:_0x125c8b);}if(_0x53d8ac[_0x2302b4(0xaa0)](/head/i)){if(_0x2302b4(0x740)!==_0x2302b4(0xa80))_0x1bcddc=_0x4f4bc6;else{const _0x81d6de=this[_0x2302b4(0x22c)]();_0x81d6de&&(_0x81d6de[_0x2302b4(0x3e1)](_0x271492),['swing',_0x2302b4(0x261),_0x2302b4(0x7fb)][_0x2302b4(0x7c6)](_0x4d504d)&&this[_0x2302b4(0xa1e)]());}}else{if(_0x53d8ac['match'](/center/i))_0x1bcddc=(_0x4f4bc6+_0x26b2ea)/0x2;else{if(_0x53d8ac[_0x2302b4(0xaa0)](/base/i)){if(_0x2302b4(0x343)!==_0x2302b4(0x658))_0x1bcddc=_0x26b2ea;else{if(this[_0x2302b4(0x277)]<=0x0)return;const _0x5a03b1=this[_0x2302b4(0x277)],_0x373b8e=this[_0x2302b4(0x4a0)],_0x31db09=this['_angleEasing'];_0x2a3d05['VisuMZ_0_CoreEngine']?this['_currentAngle']=this[_0x2302b4(0xa4c)](this['_currentAngle'],this['_targetAngle'],_0x5a03b1,_0x373b8e,_0x31db09):this[_0x2302b4(0x32c)]=(this[_0x2302b4(0x32c)]*(_0x5a03b1-0x1)+this['_targetAngle'])/_0x5a03b1;this[_0x2302b4(0x277)]--;if(this[_0x2302b4(0x277)]<=0x0)this[_0x2302b4(0x568)]();}}}}_0xa6c760+=(Graphics[_0x2302b4(0x72b)]-Graphics[_0x2302b4(0x203)])/0x2,_0x1bcddc+=(Graphics[_0x2302b4(0x940)]-Graphics[_0x2302b4(0x9ec)])/0x2,_0xa6c760+=_0x1697b9,_0x1bcddc+=_0x4c8f8a,_0x35541a[_0x2302b4(0x764)](_0xa6c760,_0x1bcddc,_0x2a31db,_0xe525ef,_0x4a8ac4);}),PluginManager[_0x2d1202(0x520)](pluginData['name'],'ActSeq_Impact_ZoomBlurPoint',_0x212536=>{const _0x19fedb=_0x2d1202;if(!Imported[_0x19fedb(0x75d)])return;const _0x564235=SceneManager[_0x19fedb(0xb69)][_0x19fedb(0x3d2)];if(!_0x564235)return;VisuMZ['ConvertParams'](_0x212536,_0x212536);const _0x33788a=_0x212536['X']||0x0,_0x42870e=_0x212536['Y']||0x0,_0x5f1a8b=_0x212536['Strength']||0x0,_0x1ace76=_0x212536['Radius']||0x0,_0x3f913f=_0x212536[_0x19fedb(0x86e)]||0x1,_0x20e734=_0x212536[_0x19fedb(0xb10)]||_0x19fedb(0x9d0);_0x564235[_0x19fedb(0x207)](_0x5f1a8b,_0x33788a,_0x42870e,_0x1ace76,_0x3f913f,_0x20e734);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xa59),_0x1dbf1e=>{const _0x4bd0be=_0x2d1202;if(!Imported[_0x4bd0be(0x75d)])return;const _0x39e6f4=SceneManager[_0x4bd0be(0xb69)][_0x4bd0be(0x3d2)];if(!_0x39e6f4)return;VisuMZ['ConvertParams'](_0x1dbf1e,_0x1dbf1e);const _0x3296ca=VisuMZ[_0x4bd0be(0xb4c)](_0x1dbf1e[_0x4bd0be(0x22f)]),_0x35b2b9=_0x1dbf1e['TargetLocation'],_0x57b336=_0x1dbf1e['OffsetX']||0x0,_0x2beb95=_0x1dbf1e[_0x4bd0be(0xa1d)]||0x0,_0x3b74bd=_0x1dbf1e[_0x4bd0be(0x566)]||0x0,_0x1e6844=_0x1dbf1e['Radius']||0x0,_0x3ba784=_0x1dbf1e[_0x4bd0be(0x86e)]||0x1,_0x2480b1=_0x1dbf1e[_0x4bd0be(0xb10)]||_0x4bd0be(0x9d0),_0x50ddde=Math[_0x4bd0be(0x52e)](..._0x3296ca['map'](_0x5236e3=>_0x5236e3[_0x4bd0be(0x22c)]()[_0x4bd0be(0x99a)]-_0x5236e3['battler']()[_0x4bd0be(0x81d)]()/0x2)),_0x46ab9f=Math['max'](..._0x3296ca['map'](_0x26fe3d=>_0x26fe3d[_0x4bd0be(0x22c)]()[_0x4bd0be(0x99a)]+_0x26fe3d[_0x4bd0be(0x22c)]()[_0x4bd0be(0x81d)]()/0x2)),_0x5936ba=Math[_0x4bd0be(0x52e)](..._0x3296ca[_0x4bd0be(0x64c)](_0x267fbb=>_0x267fbb[_0x4bd0be(0x22c)]()['_baseY']-_0x267fbb[_0x4bd0be(0x22c)]()[_0x4bd0be(0x668)]())),_0x2ec4c2=Math[_0x4bd0be(0x717)](..._0x3296ca[_0x4bd0be(0x64c)](_0xcf5b3b=>_0xcf5b3b['battler']()[_0x4bd0be(0x75a)])),_0x4bbb5b=_0x3296ca['filter'](_0x14ebf6=>_0x14ebf6[_0x4bd0be(0xb90)]())['length'],_0x481be8=_0x3296ca['filter'](_0x53f5c7=>_0x53f5c7[_0x4bd0be(0xad8)]())['length'];let _0x16e1d4=0x0,_0x23e473=0x0;if(_0x35b2b9[_0x4bd0be(0xaa0)](/front/i)){if(_0x4bd0be(0x6c4)===_0x4bd0be(0x6c4))_0x16e1d4=_0x4bbb5b>=_0x481be8?_0x50ddde:_0x46ab9f;else{let _0x498b01=_0x38253e[_0x4bd0be(0xa3c)][_0x4bd0be(0xa38)]['call'](this);if(this['_tempEquipCheck'])return _0x498b01;if(this[_0x4bd0be(0x80c)]!==_0x7025ad){this[_0x4bd0be(0x1b5)]=!![];const _0x43aa04=this[_0x4bd0be(0x25b)]();for(let _0x1231bb=0x0;_0x1231bb<_0x43aa04[_0x4bd0be(0x1d7)];_0x1231bb++){_0x43aa04[_0x1231bb]===0x1&&this['_activeWeaponSlot']!==_0x1231bb&&(_0x498b01[_0x1231bb]=null);}this['_tempEquipCheck']=_0x43ed6e;}return _0x498b01;}}else{if(_0x35b2b9[_0x4bd0be(0xaa0)](/middle/i))_0x16e1d4=(_0x50ddde+_0x46ab9f)/0x2,melee=-0x1;else _0x35b2b9[_0x4bd0be(0xaa0)](/back/i)&&(_0x16e1d4=_0x4bbb5b>=_0x481be8?_0x46ab9f:_0x50ddde);}if(_0x35b2b9[_0x4bd0be(0xaa0)](/head/i))_0x23e473=_0x5936ba;else{if(_0x35b2b9[_0x4bd0be(0xaa0)](/center/i))_0x23e473=(_0x5936ba+_0x2ec4c2)/0x2;else _0x35b2b9['match'](/base/i)&&(_0x23e473=_0x2ec4c2);}_0x16e1d4+=(Graphics['width']-Graphics[_0x4bd0be(0x203)])/0x2,_0x23e473+=(Graphics['height']-Graphics[_0x4bd0be(0x9ec)])/0x2,_0x16e1d4+=_0x57b336,_0x23e473+=_0x2beb95,_0x39e6f4[_0x4bd0be(0x207)](_0x3b74bd,_0x16e1d4,_0x23e473,_0x1e6844,_0x3ba784,_0x2480b1);}),PluginManager[_0x2d1202(0x520)](pluginData['name'],'ActSeq_Mechanics_ActionEffect',_0x4f5858=>{const _0x29f8e8=_0x2d1202;if(!SceneManager[_0x29f8e8(0x346)]())return;VisuMZ[_0x29f8e8(0x433)](_0x4f5858,_0x4f5858);const _0x52fbc0=$gameTemp['getLastPluginCommandInterpreter'](),_0x11b882=BattleManager[_0x29f8e8(0xa74)],_0x3f6148=BattleManager[_0x29f8e8(0x403)],_0x18553c=BattleManager[_0x29f8e8(0x5d0)];if(!_0x52fbc0||!_0x11b882||!_0x3f6148)return;if(!_0x11b882['item']())return;const _0x5c6657=VisuMZ[_0x29f8e8(0xb4c)](_0x4f5858[_0x29f8e8(0x22f)]);for(const _0x38b106 of _0x5c6657){if(!_0x38b106)continue;_0x18553c['push'](_0x29f8e8(0x5af),_0x3f6148,_0x38b106);}_0x52fbc0[_0x29f8e8(0x76a)](_0x29f8e8(0x34c));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x3ca),_0x545480=>{const _0xdf37e8=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xdf37e8(0x433)](_0x545480,_0x545480);const _0x427a55=[_0xdf37e8(0xac4),_0xdf37e8(0xb42),_0xdf37e8(0x2a5),_0xdf37e8(0xb64),_0xdf37e8(0x700),_0xdf37e8(0x457),_0xdf37e8(0x56d),_0xdf37e8(0x55b)],_0x1e0529=_0x545480[_0xdf37e8(0x40e)],_0x28c269=_0x545480['Debuffs'],_0x2e3fbc=_0x545480[_0xdf37e8(0x928)],_0x2bc1a8=VisuMZ[_0xdf37e8(0xb4c)](_0x545480[_0xdf37e8(0x22f)]);for(const _0x3578f5 of _0x2bc1a8){if(!_0x3578f5)continue;for(const _0x2d2ef9 of _0x1e0529){if(_0xdf37e8(0x861)===_0xdf37e8(0x861)){const _0xb1b3c2=_0x427a55[_0xdf37e8(0x783)](_0x2d2ef9[_0xdf37e8(0x248)]()[_0xdf37e8(0x43b)]());if(_0xb1b3c2>=0x0&&_0xb1b3c2<=0x7){if(_0xdf37e8(0x999)!==_0xdf37e8(0x999)){const _0x7d5c9f=_0xfff8f0[_0xdf37e8(0x832)](),_0x576e7e=_0x7d5c9f[_0xdf37e8(0x22c)]();if(_0x576e7e)_0x576e7e[_0xdf37e8(0x255)]();const _0x18ff28=_0x207c35[_0xdf37e8(0x973)]()[_0xdf37e8(0xb5f)](_0x69061d=>_0x69061d['isTpbCharged']()&&_0x69061d[_0xdf37e8(0xa24)]()),_0x3ebce=_0x18ff28['indexOf'](_0x7d5c9f),_0x50587b=_0x18ff28[_0x3ebce+0x1];_0x5be2d5[_0xdf37e8(0x545)]=_0x50587b||null;if(_0x50587b)_0x50587b[_0xdf37e8(0x9f5)](_0xdf37e8(0x901));_0x7d5c9f[_0xdf37e8(0x9f5)](_0xdf37e8(0xa48)),this[_0xdf37e8(0x754)]();}else _0x3578f5[_0xdf37e8(0x55c)](_0xb1b3c2,_0x2e3fbc);}}else _0x594d86['BattleCore'][_0xdf37e8(0x6f7)][_0xdf37e8(0x86c)](this),this[_0xdf37e8(0xaa2)]=[];}for(const _0x292645 of _0x28c269){if(_0xdf37e8(0x201)===_0xdf37e8(0x723))return![];else{const _0x20d804=_0x427a55['indexOf'](_0x292645[_0xdf37e8(0x248)]()[_0xdf37e8(0x43b)]());_0x20d804>=0x0&&_0x20d804<=0x7&&_0x3578f5['addDebuff'](_0x20d804,_0x2e3fbc);}}}}),PluginManager['registerCommand'](pluginData['name'],_0x2d1202(0xadc),_0x2cd5f7=>{const _0x2ea0e0=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2ea0e0(0x433)](_0x2cd5f7,_0x2cd5f7);const _0x50a784=_0x2cd5f7[_0x2ea0e0(0xbbe)],_0x46ede8=VisuMZ[_0x2ea0e0(0xb4c)](_0x2cd5f7[_0x2ea0e0(0x22f)]);for(const _0x175283 of _0x46ede8){if(!_0x175283)continue;for(const _0x4fc743 of _0x50a784){if(_0x2ea0e0(0x93e)!==_0x2ea0e0(0x25f))_0x175283[_0x2ea0e0(0xaf7)](_0x4fc743);else{const _0x455902=_0x1d11f8[_0x2ea0e0(0x3d8)],_0x36191e=_0x2ea0e0(0x294);this[_0x2ea0e0(0x814)](_0x455902,_0x36191e);}}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xa91),_0x58b7d3=>{const _0x40a750=_0x2d1202;if(!SceneManager[_0x40a750(0x346)]())return;VisuMZ[_0x40a750(0x433)](_0x58b7d3,_0x58b7d3);const _0x21f703=BattleManager['_action'],_0x5a9907={'arPenRate':_0x58b7d3[_0x40a750(0xb66)],'arPenFlat':_0x58b7d3[_0x40a750(0x31b)],'arRedRate':_0x58b7d3[_0x40a750(0x6c7)],'arRedFlat':_0x58b7d3[_0x40a750(0x299)]};_0x21f703[_0x40a750(0x3d7)]=_0x5a9907;}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x289),_0x5932f8=>{const _0x5b68be=_0x2d1202;if(!SceneManager[_0x5b68be(0x346)]())return;if(!Imported[_0x5b68be(0x980)])return;VisuMZ[_0x5b68be(0x433)](_0x5932f8,_0x5932f8);const _0x204038=VisuMZ['CreateActionSequenceTargets'](_0x5932f8['Targets']),_0x3b5ae7=_0x5932f8['Reveal']||0x1;for(const _0x10d8d9 of _0x204038){if(_0x5b68be(0x3f6)!==_0x5b68be(0x3f6))this['addSkillTypeCommand'](_0x356050);else{if(!_0x10d8d9)continue;if(!_0x10d8d9[_0x5b68be(0xad8)]())continue;_0x10d8d9[_0x5b68be(0x6ca)](_0x3b5ae7);}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Mechanics_AtbGauge',_0xf54614=>{const _0x4edc8d=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4edc8d(0x29c)])return;if(!BattleManager[_0x4edc8d(0x838)]())return;VisuMZ['ConvertParams'](_0xf54614,_0xf54614);const _0x4fd485=VisuMZ[_0x4edc8d(0xb4c)](_0xf54614[_0x4edc8d(0x22f)]),_0x314f54=_0xf54614[_0x4edc8d(0x360)],_0x26a019=_0xf54614['ChargeRate'],_0x4ab3ef=_0xf54614[_0x4edc8d(0x99d)];for(const _0x3a2e39 of _0x4fd485){if(_0x4edc8d(0x5ff)==='VRPaW')_0x5a49ff+=_0x232471;else{if(!_0x3a2e39)continue;if(_0x3a2e39['isAtbChargingState']())_0x3a2e39[_0x4edc8d(0x1d0)](_0x314f54);else{if(_0x3a2e39[_0x4edc8d(0x8d6)]()){if(_0x4edc8d(0xa68)===_0x4edc8d(0xa68)){_0x3a2e39[_0x4edc8d(0x361)](_0x26a019);if(_0x4ab3ef)_0x3a2e39[_0x4edc8d(0xbbf)]();}else return _0x5a46a2['BattleCore'][_0x4edc8d(0x6a1)][_0x4edc8d(0x97d)][_0x4edc8d(0x33c)]||![];}}}}}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x862),_0x1d68ec=>{const _0x29ef1d=_0x2d1202;if(!SceneManager[_0x29ef1d(0x346)]())return;if(!Imported[_0x29ef1d(0x7d7)])return;VisuMZ[_0x29ef1d(0x433)](_0x1d68ec,_0x1d68ec);const _0x282b62=VisuMZ[_0x29ef1d(0xb4c)](_0x1d68ec[_0x29ef1d(0x22f)]),_0x2d6407=_0x1d68ec[_0x29ef1d(0xa33)];for(const _0x166d46 of _0x282b62){if(_0x29ef1d(0x795)!==_0x29ef1d(0x795)){const _0x29c69a=this[_0x29ef1d(0xbdc)]();if(_0x5d0a8c&&['xp',_0x29ef1d(0x682)][_0x29ef1d(0x7c6)](_0x29c69a))this[_0x29ef1d(0xab1)](_0x56a4d6);else _0x665b76&&[_0x29ef1d(0xb81)][_0x29ef1d(0x7c6)](_0x29c69a)&&(this['resizeWindowBorderStyle'](_0x3fed55),this[_0x29ef1d(0x96a)]());_0x59fb13[_0x29ef1d(0xa3c)]['Window_ActorCommand_setup'][_0x29ef1d(0x86c)](this,_0x51c2b2),_0x2af051&&_0x76af4f[_0x29ef1d(0x973)]()['length']>0x0&&_0xcf9a4b[_0x29ef1d(0x22c)]()&&_0x6fad71[_0x29ef1d(0x22c)]()[_0x29ef1d(0x271)]();}else{if(!_0x166d46)continue;_0x166d46['gainStoredBoostPoints'](_0x2d6407);}}}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x3a7),_0x2d911c=>{const _0x1eb1e2=_0x2d1202;if(!SceneManager[_0x1eb1e2(0x346)]())return;if(!Imported[_0x1eb1e2(0x7d7)])return;if(!BattleManager[_0x1eb1e2(0x403)])return;VisuMZ['ConvertParams'](_0x2d911c,_0x2d911c);const _0x2bb3ac=_0x2d911c[_0x1eb1e2(0x543)];$gameVariables[_0x1eb1e2(0x4d7)](_0x2bb3ac,BattleManager['_subject'][_0x1eb1e2(0x3ae)]());}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x8ce),_0x43bd3b=>{const _0x475064=_0x2d1202;if(!SceneManager[_0x475064(0x346)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ['ConvertParams'](_0x43bd3b,_0x43bd3b);const _0x562c4d=VisuMZ[_0x475064(0xb4c)](_0x43bd3b[_0x475064(0x22f)]),_0xa2415f=_0x43bd3b['BreakShields'];for(const _0x2cb7ed of _0x562c4d){if(!_0x2cb7ed)continue;if(_0x2cb7ed[_0x475064(0x2f2)]())continue;if(!_0x2cb7ed['isAffectedByBreakShield']())continue;_0x2cb7ed[_0x475064(0x6eb)](_0xa2415f);}}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],'ActSeq_Mechanics_BreakShieldReset',_0x1a1824=>{const _0x2f8978=_0x2d1202;if(!SceneManager[_0x2f8978(0x346)]())return;if(!Imported[_0x2f8978(0xb04)])return;VisuMZ[_0x2f8978(0x433)](_0x1a1824,_0x1a1824);const _0x2c43b3=VisuMZ[_0x2f8978(0xb4c)](_0x1a1824['Targets']);for(const _0x5def2c of _0x2c43b3){if(_0x2f8978(0xbd8)===_0x2f8978(0xa27))_0x5ef12b['push'](new _0x3d31ab(_0x5df21d));else{if(!_0x5def2c)continue;if(_0x5def2c[_0x2f8978(0x2f2)]())continue;if(!_0x5def2c[_0x2f8978(0xa29)]())continue;_0x5def2c[_0x2f8978(0x854)]();}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xb99),_0x138c59=>{const _0x32ecb3=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x32ecb3(0xa9e)])return;if(!BattleManager[_0x32ecb3(0x468)]())return;VisuMZ[_0x32ecb3(0x433)](_0x138c59,_0x138c59);const _0x57edca=VisuMZ['CreateActionSequenceTargets'](_0x138c59['Targets']),_0x4f2174=_0x138c59[_0x32ecb3(0xa7e)];for(const _0x299759 of _0x57edca){if(!_0x299759)continue;_0x299759['gainBravePoints'](_0x4f2174);}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x57b),_0x54fffd=>{const _0x7907ee=_0x2d1202;if(!SceneManager[_0x7907ee(0x346)]())return;VisuMZ['ConvertParams'](_0x54fffd,_0x54fffd);const _0x2da47a=$gameTemp[_0x7907ee(0xa20)](),_0x14acfd=BattleManager[_0x7907ee(0xa74)],_0x35e6b3=BattleManager[_0x7907ee(0x403)];if(!_0x2da47a||!_0x14acfd||!_0x35e6b3)return;if(!_0x14acfd['item']())return;const _0x26d6f3=VisuMZ[_0x7907ee(0xb4c)](_0x54fffd[_0x7907ee(0x22f)]);for(const _0x574787 of _0x26d6f3){if(!_0x574787)continue;_0x54fffd[_0x7907ee(0x6e1)]&&(_0x574787[_0x7907ee(0xa53)](),_0x574787[_0x7907ee(0xaf7)](_0x574787[_0x7907ee(0x803)]())),_0x574787[_0x7907ee(0x267)]()&&(_0x7907ee(0x976)!==_0x7907ee(0x52c)?_0x574787[_0x7907ee(0xb8c)]():(this['updateStateSprite'](),this['updateStyleOpacity']()));}_0x2da47a[_0x7907ee(0x76a)](_0x7907ee(0x7c1));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xab0),_0x238d09=>{const _0x1dffa9=_0x2d1202;if(!SceneManager[_0x1dffa9(0x346)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x1dffa9(0xba7)]())return;VisuMZ[_0x1dffa9(0x433)](_0x238d09,_0x238d09);const _0xeef0f=VisuMZ[_0x1dffa9(0xb4c)](_0x238d09[_0x1dffa9(0x22f)]),_0x1a7668=_0x238d09[_0x1dffa9(0x23d)];for(const _0x1b6a93 of _0xeef0f){if(_0x1dffa9(0x563)==='nUMqT'){const _0x4bbd16=_0x51e9cd(_0x5364ad['$1']),_0x345c17=_0x4230ae['BattleCore'][_0x1dffa9(0x268)](_0x11ce2b,_0x1dffa9(0x22f));_0x2f2f65[_0x1dffa9(0xa3c)][_0x1dffa9(0xa9d)](_0x4bbd16,_0x345c17);}else{if(!_0x1b6a93)continue;_0x1b6a93[_0x1dffa9(0x3db)](_0x1a7668);}}}),PluginManager['registerCommand'](pluginData['name'],_0x2d1202(0xb35),_0x415b44=>{const _0x5c705f=_0x2d1202;if(!SceneManager[_0x5c705f(0x346)]())return;if(!Imported[_0x5c705f(0x2b7)])return;if(!BattleManager[_0x5c705f(0xba7)]())return;VisuMZ[_0x5c705f(0x433)](_0x415b44,_0x415b44);const _0x1a1dfb=VisuMZ[_0x5c705f(0xb4c)](_0x415b44['Targets']),_0x58b429=_0x415b44['ChargeRate'],_0x54c9ef=_0x415b44['ChargeRate'];for(const _0x496945 of _0x1a1dfb){if(_0x5c705f(0x7e2)===_0x5c705f(0x8c6))this[_0x5c705f(0x2a1)][_0x5c705f(0x392)]();else{if(!_0x496945)continue;if(_0x496945[_0x5c705f(0x4eb)]===_0x5c705f(0x601))_0x496945[_0x5c705f(0xb5e)](_0x58b429);else _0x496945[_0x5c705f(0x4eb)]===_0x5c705f(0x6d4)&&(_0x5c705f(0x772)===_0x5c705f(0x604)?(this[_0x5c705f(0xb60)]=this['_targetGrowX'],this[_0x5c705f(0x956)]=this[_0x5c705f(0xb94)]):_0x496945['changeCtbCastTime'](_0x54c9ef));}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x73e),_0x1cd571=>{const _0xe0acea=_0x2d1202;if(!SceneManager[_0xe0acea(0x346)]())return;VisuMZ[_0xe0acea(0x433)](_0x1cd571,_0x1cd571);const _0x3c6328=BattleManager[_0xe0acea(0xa74)];if(!_0x3c6328)return;let _0x187e80=_0x1cd571[_0xe0acea(0x2c1)];_0x3c6328[_0xe0acea(0x9b2)](_0x187e80);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Mechanics_DamagePopup',_0xd78d94=>{const _0x1dd718=_0x2d1202;if(!SceneManager[_0x1dd718(0x346)]())return;VisuMZ[_0x1dd718(0x433)](_0xd78d94,_0xd78d94);const _0x2cabe8=VisuMZ['CreateActionSequenceTargets'](_0xd78d94[_0x1dd718(0x22f)]);for(const _0x130c02 of _0x2cabe8){if(!_0x130c02)continue;if(_0x130c02['shouldPopupDamage']())_0x130c02[_0x1dd718(0xa94)]();}}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],'ActSeq_Mechanics_DeathBreak',_0x3d19bf=>{const _0x3a944b=_0x2d1202;if(!SceneManager[_0x3a944b(0x346)]())return;VisuMZ['ConvertParams'](_0x3d19bf,_0x3d19bf);const _0x4539a8=$gameTemp['getLastPluginCommandInterpreter'](),_0x269b16=BattleManager['_subject'],_0x462040=_0x3d19bf['JumpToLabel'];if(!_0x4539a8)return;if(!_0x269b16)return;_0x269b16&&_0x269b16[_0x3a944b(0x7a6)]()&&_0x462040[_0x3a944b(0x248)]()['trim']()!==_0x3a944b(0x715)&&_0x4539a8[_0x3a944b(0x4d2)]([_0x462040]);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x3bc),_0x5a48ad=>{const _0x3dcffa=_0x2d1202;if(!SceneManager[_0x3dcffa(0x346)]())return;VisuMZ[_0x3dcffa(0x433)](_0x5a48ad,_0x5a48ad);const _0x41b990=VisuMZ['CreateActionSequenceTargets'](_0x5a48ad[_0x3dcffa(0x22f)]);for(const _0x29fa9d of _0x41b990){if(!_0x29fa9d)continue;if(!_0x29fa9d[_0x3dcffa(0xad8)]())continue;_0x29fa9d['escape']();}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x35b),_0x9f141c=>{const _0x560025=_0x2d1202;if(!SceneManager[_0x560025(0x346)]())return;if(!Imported[_0x560025(0x4ee)])return;if(!BattleManager[_0x560025(0x547)]())return;VisuMZ['ConvertParams'](_0x9f141c,_0x9f141c);const _0x11d439=_0x9f141c[_0x560025(0x2bc)];if(BattleManager[_0x560025(0x403)]){if(_0x560025(0x37b)===_0x560025(0x6f1)){_0x437c6e[_0x560025(0xa3c)][_0x560025(0x1ec)][_0x560025(0x86c)](this,_0x378e38,_0x54c6d6);if(!_0x5dbbab['isImmortal']())return;if(_0x901ddb['dataId']!==_0x4e84b1[_0x560025(0x803)]())return;let _0x419b4a=_0x58d625[_0x560025(0x926)];!this[_0x560025(0x292)]()&&(_0x419b4a*=_0x4effab[_0x560025(0x83c)](_0x5ccb25['dataId']),_0x419b4a*=this[_0x560025(0x3bf)](_0x384fc8)),_0x4da28a[_0x560025(0x5dd)]()<_0x419b4a&&(_0x3e005a['_deathStateApplied']=!![],this[_0x560025(0x391)](_0x57ccd6));}else BattleManager[_0x560025(0x403)][_0x560025(0x30d)]()[_0x560025(0xa54)](_0x11d439);}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x9d3),_0x2e4590=>{const _0xc6086=_0x2d1202;if(!SceneManager[_0xc6086(0x346)]())return;if(!Imported[_0xc6086(0x212)])return;if(!BattleManager[_0xc6086(0xa9f)]())return;VisuMZ['ConvertParams'](_0x2e4590,_0x2e4590);const _0x5f2607=_0x2e4590['ActionCount'];BattleManager[_0xc6086(0x403)]&&BattleManager['_subject'][_0xc6086(0x30d)]()['gainCurrentActionsFTB'](_0x5f2607);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x5bb),_0x8960d2=>{const _0x471e6d=_0x2d1202;if(!SceneManager[_0x471e6d(0x346)]())return;VisuMZ[_0x471e6d(0x433)](_0x8960d2,_0x8960d2);const _0x50bac7=VisuMZ[_0x471e6d(0xb4c)](_0x8960d2[_0x471e6d(0x22f)]),_0x4fdf6d=_0x8960d2['HP_Rate'],_0x16e883=_0x8960d2[_0x471e6d(0x505)],_0x5eeac1=_0x8960d2[_0x471e6d(0x308)],_0x42805e=_0x8960d2['MP_Flat'],_0x2c77c1=_0x8960d2['TP_Rate'],_0x26a859=_0x8960d2[_0x471e6d(0x866)],_0x465392=_0x8960d2[_0x471e6d(0x5ce)];for(const _0x441ad4 of _0x50bac7){if(!_0x441ad4)continue;const _0x3fe330=_0x441ad4[_0x471e6d(0xb23)](),_0x35c102=Math[_0x471e6d(0x4b4)](_0x4fdf6d*_0x441ad4[_0x471e6d(0x450)]+_0x16e883),_0x5697ff=Math[_0x471e6d(0x4b4)](_0x5eeac1*_0x441ad4[_0x471e6d(0xa85)]+_0x42805e),_0x123369=Math[_0x471e6d(0x4b4)](_0x2c77c1*_0x441ad4['maxTp']()+_0x26a859);if(_0x35c102!==0x0)_0x441ad4['gainHp'](_0x35c102);if(_0x5697ff!==0x0)_0x441ad4[_0x471e6d(0xa56)](_0x5697ff);if(_0x123369!==0x0)_0x441ad4['gainTp'](_0x123369);if(_0x465392)_0x441ad4['startDamagePopup']();_0x3fe330&&_0x441ad4['isDead']()&&_0x441ad4[_0x471e6d(0xb8c)]();}}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x84f),_0xe59545=>{const _0x77be4e=_0x2d1202;if(!SceneManager[_0x77be4e(0x346)]())return;VisuMZ['ConvertParams'](_0xe59545,_0xe59545);const _0x1993b8=VisuMZ[_0x77be4e(0xb4c)](_0xe59545['Targets']);for(const _0x5d4e93 of _0x1993b8){if(!_0x5d4e93)continue;_0x5d4e93[_0x77be4e(0xb63)](_0xe59545['Immortal']);}}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x7df),_0x729cb3=>{const _0x3e9a9a=_0x2d1202;if(!SceneManager[_0x3e9a9a(0x346)]())return;VisuMZ[_0x3e9a9a(0x433)](_0x729cb3,_0x729cb3);const _0x13f026=BattleManager[_0x3e9a9a(0xa74)],_0x3bfb2b={'criticalHitRate':_0x729cb3[_0x3e9a9a(0x344)],'criticalHitFlat':_0x729cb3[_0x3e9a9a(0x39b)],'criticalDmgRate':_0x729cb3[_0x3e9a9a(0x33b)],'criticalDmgFlat':_0x729cb3[_0x3e9a9a(0x82c)],'damageRate':_0x729cb3['DamageRate'],'damageFlat':_0x729cb3[_0x3e9a9a(0x1c9)],'hitRate':_0x729cb3[_0x3e9a9a(0x410)],'hitFlat':_0x729cb3[_0x3e9a9a(0x449)]};_0x13f026[_0x3e9a9a(0x817)]=_0x3bfb2b;}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x4a7),_0x385cb5=>{const _0x3ac853=_0x2d1202;if(!SceneManager[_0x3ac853(0x346)]())return;if(!Imported[_0x3ac853(0x7a8)])return;if(!BattleManager[_0x3ac853(0xae1)]())return;VisuMZ[_0x3ac853(0x433)](_0x385cb5,_0x385cb5);const _0x1aba8b=VisuMZ[_0x3ac853(0xb4c)](_0x385cb5[_0x3ac853(0x22f)]);for(const _0x140de3 of _0x1aba8b){if(!_0x140de3)continue;let _0x520e47=_0x385cb5[_0x3ac853(0x2bb)],_0x2ec15f=_0x385cb5[_0x3ac853(0x787)],_0xcb6b8b=_0x385cb5[_0x3ac853(0x719)];BattleManager[_0x3ac853(0xaaf)][_0x3ac853(0x7c6)](_0x140de3)?'CsijX'!=='CsijX'?(_0x35b150[_0x3ac853(0x834)]=_0x42648a,_0x3a839f[_0x3ac853(0x834)]=_0x329710,_0x1f6c5a['adjustPosition'](),_0x5d7c4b[_0x3ac853(0x2ae)]()):_0x520e47+=_0xcb6b8b:_0x2ec15f+=_0xcb6b8b,BattleManager[_0x3ac853(0x890)](_0x140de3,-_0x520e47,![]),BattleManager['turnOrderChangeOTB'](_0x140de3,-_0x2ec15f,!![]);}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x99b),_0x266be1=>{const _0x2eeee2=_0x2d1202;if(!SceneManager[_0x2eeee2(0x346)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x2eeee2(0x4a4)]())return;VisuMZ['ConvertParams'](_0x266be1,_0x266be1);const _0xd136d7=BattleManager['_subject'][_0x2eeee2(0x30d)](),_0x297cf7=_0x266be1[_0x2eeee2(0x502)],_0x493da3=_0x266be1[_0x2eeee2(0x258)]||_0x2eeee2(0x598),_0x52118d=_0x266be1['alterType']||'unchanged',_0x55422f=_0x266be1[_0x2eeee2(0x7e7)]||0x0,_0x299fca=_0x266be1[_0x2eeee2(0x4b6)]||0x0;(_0xd136d7[_0x2eeee2(0x892)]()||_0x297cf7)&&('lxeWN'===_0x2eeee2(0x800)?(_0x441bab-=this['_floatHeight'],_0x37a0aa-=this[_0x2eeee2(0x6e5)]):(_0x297cf7&&(_0xd136d7[_0x2eeee2(0x33f)]=_0xd136d7[_0x2eeee2(0x33f)]||{},_0xd136d7[_0x2eeee2(0x33f)][_0x2eeee2(0xb6b)]=0x0),_0xd136d7[_0x2eeee2(0x7da)](_0x493da3,_0x52118d,_0x55422f,_0x299fca)));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xa43),_0x24133f=>{const _0xb49b99=_0x2d1202;if(!SceneManager[_0xb49b99(0x346)]())return;if(!Imported[_0xb49b99(0x297)])return;if(!BattleManager[_0xb49b99(0x4a4)]())return;VisuMZ[_0xb49b99(0x433)](_0x24133f,_0x24133f);const _0x45e3de=BattleManager[_0xb49b99(0x403)][_0xb49b99(0x30d)]();let _0x549f5e=Math[_0xb49b99(0x717)](_0x24133f[_0xb49b99(0xa3a)],0x0),_0x2996f5=_0x45e3de['getFullActionsPTB'](),_0x798e67=_0x45e3de[_0xb49b99(0x1ef)]();while(_0x549f5e--){if(_0x2996f5<=0x0&&_0x798e67<=0x0){if('UBxaV'===_0xb49b99(0xb93))break;else this['requestMotion'](_0xb49b99(0x261));}else _0x2996f5>0x0?(_0x2996f5--,_0x798e67++):_0x798e67--;}_0x45e3de[_0xb49b99(0x32b)](_0x2996f5),_0x45e3de[_0xb49b99(0x790)](_0x798e67);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xbde),_0x15f548=>{const _0x3fa8f6=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3fa8f6(0x297)])return;if(!BattleManager[_0x3fa8f6(0x4a4)]())return;VisuMZ[_0x3fa8f6(0x433)](_0x15f548,_0x15f548);const _0x11593b=BattleManager['_subject'][_0x3fa8f6(0x30d)]();let _0x535107=_0x15f548[_0x3fa8f6(0xbca)],_0x328a7d=_0x15f548[_0x3fa8f6(0x9f8)];_0x11593b['gainFullActionsPTB'](_0x535107),_0x11593b['gainHalfActionsPTB'](_0x328a7d);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x483),_0x4625fa=>{const _0x141709=_0x2d1202;if(!SceneManager[_0x141709(0x346)]())return;VisuMZ[_0x141709(0x433)](_0x4625fa,_0x4625fa);const _0x3a44d7=[_0x141709(0xac4),_0x141709(0xb42),_0x141709(0x2a5),_0x141709(0xb64),_0x141709(0x700),_0x141709(0x457),'AGI','LUK'],_0xfff7b4=_0x4625fa[_0x141709(0x40e)],_0x160959=_0x4625fa['Debuffs'],_0x2754c5=VisuMZ['CreateActionSequenceTargets'](_0x4625fa[_0x141709(0x22f)]);for(const _0x164fea of _0x2754c5){if(!_0x164fea)continue;for(const _0x798700 of _0xfff7b4){const _0xfc89eb=_0x3a44d7['indexOf'](_0x798700[_0x141709(0x248)]()[_0x141709(0x43b)]());_0xfc89eb>=0x0&&_0xfc89eb<=0x7&&_0x164fea[_0x141709(0x884)](_0xfc89eb)&&_0x164fea['removeBuff'](_0xfc89eb);}for(const _0x400968 of _0x160959){const _0x3dfbbb=_0x3a44d7['indexOf'](_0x400968[_0x141709(0x248)]()[_0x141709(0x43b)]());_0x3dfbbb>=0x0&&_0x3dfbbb<=0x7&&_0x164fea['isDebuffAffected'](_0x3dfbbb)&&_0x164fea['removeBuff'](_0x3dfbbb);}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x83d),_0x9c2119=>{const _0x1ec482=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1ec482(0x433)](_0x9c2119,_0x9c2119);const _0x16faa0=_0x9c2119['States'],_0x5132ad=VisuMZ[_0x1ec482(0xb4c)](_0x9c2119['Targets']);for(const _0x5f47b9 of _0x5132ad){if(_0x1ec482(0x2f4)==='MnefS'){if(!_0x5f47b9)continue;for(const _0x4dc368 of _0x16faa0){_0x5f47b9['removeState'](_0x4dc368);}}else{const _0xddd0a5=this[_0x1ec482(0x615)](_0x4eb5e9);return _0xddd0a5===_0x1ec482(0x75b)?this[_0x1ec482(0x62c)]():_0x367ef9[_0x1ec482(0xa3c)][_0x1ec482(0xb59)][_0x1ec482(0x86c)](this,_0x4dc047);}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x6fe),_0x292166=>{const _0x57e7a8=_0x2d1202;if(!SceneManager[_0x57e7a8(0x346)]())return;if(!Imported[_0x57e7a8(0x6ff)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x57e7a8(0x433)](_0x292166,_0x292166);const _0xc8a5e9=_0x292166[_0x57e7a8(0xae3)],_0x4beca0=VisuMZ[_0x57e7a8(0xb4c)](_0x292166[_0x57e7a8(0x22f)]),_0x1695cc=_0x292166[_0x57e7a8(0x440)],_0x6a28c9=_0x292166[_0x57e7a8(0x955)],_0x506c55=_0x292166[_0x57e7a8(0x8b4)],_0x3bcbc0=BattleManager[_0x57e7a8(0xa74)];if(_0xc8a5e9){if(_0x57e7a8(0x5a5)==='roMNJ')for(const _0x2342c3 of _0x4beca0){if('ewaXO'!==_0x57e7a8(0x8d1)){if(!_0x2342c3)continue;if(_0x2342c3===user)continue;if(_0x1695cc)_0x2342c3['setSTBExploited'](![]);_0x2342c3[_0x57e7a8(0xb73)](BattleManager[_0x57e7a8(0x403)],_0x3bcbc0);}else this['_forcedBattleLayout']=_0x57e7a8(0xb81);}else _0x40e258[_0x57e7a8(0x834)]=new _0x3c7274(this[_0x57e7a8(0x72b)],this[_0x57e7a8(0x940)]);}if(_0x6a28c9&&BattleManager['_subject']){if(_0x506c55)BattleManager[_0x57e7a8(0x403)][_0x57e7a8(0x6ec)](![]);const _0x20afaf=_0x4beca0[0x0];BattleManager[_0x57e7a8(0x567)](_0x20afaf,_0x3bcbc0);}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x46f),_0x3049eb=>{const _0x320f04=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x320f04(0x6ff)])return;if(!BattleManager[_0x320f04(0x713)]())return;VisuMZ[_0x320f04(0x433)](_0x3049eb,_0x3049eb);const _0x5ccba2=_0x3049eb[_0x320f04(0xabc)];BattleManager[_0x320f04(0x403)]&&BattleManager['_subject'][_0x320f04(0x48f)](_0x5ccba2);}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x65f),_0x12906b=>{const _0x43cd60=_0x2d1202;if(!SceneManager[_0x43cd60(0x346)]())return;if(!Imported[_0x43cd60(0x6ff)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x43cd60(0x433)](_0x12906b,_0x12906b);let _0x44fab1=_0x12906b['Actions'];if(BattleManager['_subject']){BattleManager[_0x43cd60(0x403)]['_actions']=BattleManager[_0x43cd60(0x403)]['_actions']||[];while(_0x44fab1--){if(BattleManager['_subject'][_0x43cd60(0x1c6)][_0x43cd60(0x1d7)]<=0x0)break;BattleManager[_0x43cd60(0x403)][_0x43cd60(0x1c6)][_0x43cd60(0x9c8)]();}}}),PluginManager[_0x2d1202(0x520)](pluginData['name'],'ActSeq_Mechanics_SwapWeapon',_0xe356e8=>{const _0x532108=_0x2d1202;if(!SceneManager[_0x532108(0x346)]())return;if(!Imported[_0x532108(0xa04)])return;VisuMZ[_0x532108(0x433)](_0xe356e8,_0xe356e8);const _0x2a19b3=VisuMZ['CreateActionSequenceTargets'](_0xe356e8[_0x532108(0x22f)]),_0x1a49c8=_0xe356e8[_0x532108(0x28c)];for(const _0x408d37 of _0x2a19b3){if(!_0x408d37)continue;if(!_0x408d37[_0x532108(0xb90)]())continue;_0x408d37[_0x532108(0x743)](_0x1a49c8);}}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],'ActSeq_Mechanics_TextPopup',_0x28bf62=>{const _0x593235=_0x2d1202;if(!SceneManager[_0x593235(0x346)]())return;VisuMZ[_0x593235(0x433)](_0x28bf62,_0x28bf62);const _0x4c24a7=VisuMZ[_0x593235(0xb4c)](_0x28bf62[_0x593235(0x22f)]),_0x54220b=_0x28bf62[_0x593235(0x9ce)],_0x456dcb={'textColor':ColorManager[_0x593235(0x23b)](_0x28bf62['TextColor']),'flashColor':_0x28bf62[_0x593235(0xa52)],'flashDuration':_0x28bf62['FlashDuration']};for(const _0x416696 of _0x4c24a7){if('NMgxm'===_0x593235(0x669)){if(!_0x416696)continue;_0x416696[_0x593235(0x86f)](_0x54220b,_0x456dcb);}else{if(_0x521493[_0x593235(0x346)]()){const _0x2447da=this[_0x593235(0x22c)]();if(_0x2447da)_0x2447da['forceWeaponAnimation'](_0x4b937d);}}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x6e0),_0x432bf9=>{const _0x87e2c5=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x87e2c5(0x433)](_0x432bf9,_0x432bf9);const _0x49cc4b=VisuMZ['CreateActionSequenceTargets'](_0x432bf9[_0x87e2c5(0x22f)]);let _0x2a21e1=$gameVariables[_0x87e2c5(0x57c)](_0x432bf9['Variable']);Imported['VisuMZ_0_CoreEngine']&&_0x432bf9[_0x87e2c5(0x455)]&&(_0x87e2c5(0x238)!=='fzvMk'?(this[_0x87e2c5(0x39d)]()[_0x87e2c5(0x426)](_0x3b33b5),this['_damages'][_0x87e2c5(0x9b6)](_0x450add),_0x1e5e9b[_0x87e2c5(0xaea)]()):_0x2a21e1=VisuMZ[_0x87e2c5(0x341)](_0x2a21e1));const _0xed691c=String(_0x2a21e1),_0xf81347={'textColor':ColorManager[_0x87e2c5(0x23b)](_0x432bf9[_0x87e2c5(0x970)]),'flashColor':_0x432bf9[_0x87e2c5(0xa52)],'flashDuration':_0x432bf9['FlashDuration']};for(const _0x3357ed of _0x49cc4b){if(!_0x3357ed)continue;_0x3357ed[_0x87e2c5(0x86f)](_0xed691c,_0xf81347);}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Mechanics_WaitForEffect',_0x5bbefe=>{const _0x408281=_0x2d1202;if(!SceneManager[_0x408281(0x346)]())return;const _0x56f3b6=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x56f3b6)return;_0x56f3b6[_0x408281(0x76a)]('battleEffect');}),PluginManager['registerCommand'](pluginData['name'],_0x2d1202(0x333),_0xe56c22=>{const _0x43f9a6=_0x2d1202;if(!SceneManager[_0x43f9a6(0x346)]())return;VisuMZ[_0x43f9a6(0x433)](_0xe56c22,_0xe56c22);const _0x4611a8=VisuMZ[_0x43f9a6(0xb4c)](_0xe56c22[_0x43f9a6(0x22f)]);for(const _0x42c9df of _0x4611a8){if(!_0x42c9df)continue;_0x42c9df['clearFreezeMotion']();}}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0xaad),_0x593875=>{const _0x17a251=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x17a251(0x433)](_0x593875,_0x593875);const _0x3573a3=VisuMZ[_0x17a251(0xb4c)](_0x593875['Targets']),_0x389324=_0x593875['MotionType'][_0x17a251(0x8e4)]()['trim'](),_0x1096bb=_0x593875[_0x17a251(0x8e7)],_0xa32496=_0x593875[_0x17a251(0xac9)];for(const _0x27b84c of _0x3573a3){if(_0x17a251(0x8a9)==='IpnJE'){const _0x3c978e=_0x17a251(0xa0a)[_0x17a251(0x995)](_0x3110d8);_0x3a561e['BattleCore']['JS'][_0x3d231c]=new _0x5086f8(_0x3c978e);}else{if(!_0x27b84c)continue;_0x27b84c[_0x17a251(0x918)](_0x389324,_0x1096bb,_0xa32496);}}}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x600),_0xd730a7=>{const _0xd8b533=_0x2d1202;if(!SceneManager[_0xd8b533(0x346)]())return;VisuMZ['ConvertParams'](_0xd730a7,_0xd730a7);const _0x3b109b=VisuMZ[_0xd8b533(0xb4c)](_0xd730a7['Targets']),_0x3ac180=_0xd730a7[_0xd8b533(0xaeb)]['toLowerCase']()[_0xd8b533(0x43b)](),_0x2c6c7a=_0xd730a7['ShowWeapon'];for(const _0x4b3fd3 of _0x3b109b){if(!_0x4b3fd3)continue;if(_0x3ac180[_0xd8b533(0xaa0)](/ATTACK[ ](\d+)/i))_0xd8b533(0x693)!==_0xd8b533(0x693)?this[_0xd8b533(0x5c8)]('performEvasion',_0x1f8bea):_0x4b3fd3[_0xd8b533(0x494)](Number(RegExp['$1']));else{if(_0x3ac180===_0xd8b533(0x8a0)){if('ncyCo'===_0xd8b533(0x625))_0x4b3fd3['performAttack']();else return _0x11a710[_0xd8b533(0x2ba)]();}else _0xd8b533(0x535)==='kKvYF'?_0x4b3fd3[_0xd8b533(0xa73)](_0x3ac180):this[_0xd8b533(0xade)]();}if(!_0x2c6c7a)_0xd8b533(0x7de)!=='YixEb'?_0x4316bb[_0xd8b533(0x2a2)]=[]:_0x4b3fd3[_0xd8b533(0xb03)](0x0);else{if(_0x2c6c7a&&[_0xd8b533(0x261),_0xd8b533(0x74e),_0xd8b533(0x1c1)][_0xd8b533(0x7c6)](_0x3ac180)){}}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xb1e),_0x144581=>{const _0x4b609a=_0x2d1202;if(!SceneManager[_0x4b609a(0x346)]())return;VisuMZ[_0x4b609a(0x433)](_0x144581,_0x144581);const _0x2ff9e0=BattleManager[_0x4b609a(0xa74)];if(!_0x2ff9e0)return;if(!_0x2ff9e0[_0x4b609a(0x36f)]())return;const _0x42b3d6=VisuMZ[_0x4b609a(0xb4c)](_0x144581['Targets']);for(const _0xe1c220 of _0x42b3d6){if(_0x4b609a(0x80a)!=='vfXTL'){if(!_0xe1c220)continue;_0xe1c220[_0x4b609a(0x2b3)](_0x2ff9e0);}else{if(!_0x597d86[_0x4b609a(0x1fd)]())return;const _0x57ae41=this[_0x4b609a(0x22c)]();if(!_0x57ae41)return;_0x57ae41[_0x4b609a(0x89f)](_0x4b974c,_0x308657,_0xa66be2);}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x4f9),_0x5c2cf3=>{const _0x234811=_0x2d1202;if(!SceneManager[_0x234811(0x346)]())return;VisuMZ[_0x234811(0x433)](_0x5c2cf3,_0x5c2cf3);const _0x439c8e=VisuMZ[_0x234811(0xb4c)](_0x5c2cf3['Targets']);for(const _0x19e850 of _0x439c8e){if(!_0x19e850)continue;if(!_0x19e850[_0x234811(0x22c)]())continue;_0x19e850['battler']()[_0x234811(0x589)]();}}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0xb85),_0x38ad83=>{const _0x3d7303=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3d7303(0x433)](_0x38ad83,_0x38ad83);const _0x5bdc7b=$gameTemp[_0x3d7303(0xa20)](),_0x24c940=_0x38ad83[_0x3d7303(0x4db)]*Sprite_Battler[_0x3d7303(0xb0a)];_0x5bdc7b[_0x3d7303(0x251)](_0x24c940);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Movement_BattleStep',_0x220b06=>{const _0x3f8cd6=_0x2d1202;if(!SceneManager[_0x3f8cd6(0x346)]())return;VisuMZ[_0x3f8cd6(0x433)](_0x220b06,_0x220b06);const _0x1e732a=$gameTemp['getLastPluginCommandInterpreter'](),_0x578690=BattleManager[_0x3f8cd6(0xa74)];if(!_0x1e732a||!_0x578690)return;if(!_0x578690[_0x3f8cd6(0x36f)]())return;const _0x11f033=VisuMZ['CreateActionSequenceTargets'](_0x220b06[_0x3f8cd6(0x22f)]);for(const _0x2b2d46 of _0x11f033){if(!_0x2b2d46)continue;_0x2b2d46[_0x3f8cd6(0xa42)](_0x578690);}if(_0x220b06['WaitForMovement'])_0x1e732a['setWaitMode'](_0x3f8cd6(0x388));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x78b),_0x2fa4e8=>{const _0x523363=_0x2d1202;if(!SceneManager[_0x523363(0x346)]())return;if(!$gameSystem[_0x523363(0x1fd)]())return;VisuMZ[_0x523363(0x433)](_0x2fa4e8,_0x2fa4e8);const _0x4a7dc1=VisuMZ[_0x523363(0xb4c)](_0x2fa4e8['Targets']);let _0x308291=_0x2fa4e8[_0x523363(0x67d)][_0x523363(0xaa0)](/back/i);for(const _0x43df3a of _0x4a7dc1){if(!_0x43df3a)continue;if(_0x2fa4e8[_0x523363(0x67d)][_0x523363(0xaa0)](/rand/i))_0x308291=Math[_0x523363(0x847)](0x2);_0x43df3a[_0x523363(0x350)](!!_0x308291);}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Movement_FacePoint',_0x2d8c88=>{const _0x1f1775=_0x2d1202;if(!SceneManager[_0x1f1775(0x346)]())return;if(!$gameSystem[_0x1f1775(0x1fd)]())return;VisuMZ[_0x1f1775(0x433)](_0x2d8c88,_0x2d8c88);const _0x17e72a=VisuMZ[_0x1f1775(0xb4c)](_0x2d8c88['Targets']);let _0x5c683a=_0x2d8c88['Point'];const _0x58acee=_0x2d8c88[_0x1f1775(0x9a0)];for(const _0x516479 of _0x17e72a){if(_0x1f1775(0xa8c)==='SEgOB')this[_0x1f1775(0x2df)](_0x1f1775(0x330));else{if(!_0x516479)continue;let _0x2dd997=_0x516479['battler']()['_baseX'],_0x568a32=_0x516479[_0x1f1775(0x22c)]()[_0x1f1775(0x75a)];if(_0x5c683a[_0x1f1775(0xaa0)](/home/i))_0x2dd997=_0x516479[_0x1f1775(0x22c)]()[_0x1f1775(0xb08)],_0x568a32=_0x516479['battler']()[_0x1f1775(0x8a6)];else{if(_0x5c683a[_0x1f1775(0xaa0)](/center/i))_0x2dd997=Graphics[_0x1f1775(0x203)]/0x2,_0x568a32=Graphics[_0x1f1775(0x9ec)]/0x2;else _0x5c683a['match'](/point (\d+), (\d+)/i)&&(_0x2dd997=Number(RegExp['$1']),_0x568a32=Number(RegExp['$2']));}_0x516479['setBattlerFacePoint'](Math[_0x1f1775(0x4b4)](_0x2dd997),Math[_0x1f1775(0x4b4)](_0x568a32),!!_0x58acee);}}}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0xa25),_0x290d22=>{const _0x490344=_0x2d1202;if(!SceneManager[_0x490344(0x346)]())return;if(!$gameSystem[_0x490344(0x1fd)]())return;VisuMZ[_0x490344(0x433)](_0x290d22,_0x290d22);const _0x172eed=VisuMZ[_0x490344(0xb4c)](_0x290d22[_0x490344(0x6ae)]),_0x493122=VisuMZ[_0x490344(0xb4c)](_0x290d22[_0x490344(0xb25)]),_0x3faea4=_0x493122[_0x490344(0x64c)](_0x409930=>_0x409930&&_0x409930[_0x490344(0x22c)]()?_0x409930[_0x490344(0x22c)]()['_baseX']:0x0)/(_0x493122[_0x490344(0x1d7)]||0x1),_0x4fd4d7=_0x493122[_0x490344(0x64c)](_0x4d9310=>_0x4d9310&&_0x4d9310[_0x490344(0x22c)]()?_0x4d9310['battler']()[_0x490344(0x75a)]:0x0)/(_0x493122['length']||0x1),_0x258253=_0x290d22[_0x490344(0x9a0)];for(const _0xe2cadd of _0x172eed){if(!_0xe2cadd)continue;_0xe2cadd['setBattlerFacePoint'](Math[_0x490344(0x4b4)](_0x3faea4),Math['round'](_0x4fd4d7),!!_0x258253);}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x738),_0x19cdbb=>{const _0xcdaa02=_0x2d1202;if(!SceneManager[_0xcdaa02(0x346)]())return;VisuMZ[_0xcdaa02(0x433)](_0x19cdbb,_0x19cdbb);const _0x5330d2=$gameTemp[_0xcdaa02(0xa20)](),_0x17cd83=VisuMZ[_0xcdaa02(0xb4c)](_0x19cdbb[_0xcdaa02(0x22f)]),_0x330094=_0x19cdbb[_0xcdaa02(0x8e0)],_0x1431ba=_0x19cdbb[_0xcdaa02(0x86e)],_0x3c43f5=_0x19cdbb[_0xcdaa02(0xb10)],_0x15578a=_0x19cdbb['WaitForFloat'];if(!_0x5330d2)return;for(const _0x202a3f of _0x17cd83){if(!_0x202a3f)continue;_0x202a3f[_0xcdaa02(0x7d1)](_0x330094,_0x1431ba,_0x3c43f5);}if(_0x15578a)_0x5330d2['setWaitMode']('battleFloat');}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x662),_0x1d1d12=>{const _0x5d341f=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5d341f(0x433)](_0x1d1d12,_0x1d1d12);const _0x35bd9b=$gameTemp[_0x5d341f(0xa20)]();if(!_0x35bd9b)return;const _0x3c0235=VisuMZ[_0x5d341f(0xb4c)](_0x1d1d12['Targets']);for(const _0x42693e of _0x3c0235){if(!_0x42693e)continue;_0x42693e[_0x5d341f(0x313)]();}if(BattleManager[_0x5d341f(0x403)]){if(_0x5d341f(0x21d)!==_0x5d341f(0x21d)){if(!_0x5eb3ad['BattleCore'][_0x5d341f(0x6a1)]['Damage'][_0x5d341f(0x9dd)])return _0x4aa170;const _0xe0ee19=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x5d341f(0x36f)]()[_0x5d341f(0x5fe)][_0x5d341f(0xaa0)](_0xe0ee19))return!![];if(this[_0x5d341f(0x229)]()[_0x5d341f(0x311)]()[_0x5d341f(0x3eb)](_0x1fe34c=>_0x1fe34c&&_0x1fe34c[_0x5d341f(0x5fe)][_0x5d341f(0xaa0)](_0xe0ee19)))return!![];const _0x48a6fd=_0x326d6f<0x0?-0x1:0x1;_0x279a0e=_0x23eae0[_0x5d341f(0x4d4)](_0xd1ca98);let _0x25e9f1=this[_0x5d341f(0x229)]()['softDamageCapRate']();this['item']()[_0x5d341f(0x5fe)][_0x5d341f(0xaa0)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x25e9f1+=_0x58d6c4(_0x375274['$1'])/0x64);_0x25e9f1=_0x25e9f1[_0x5d341f(0xb75)](0.01,0x1);const _0x1fc6a4=this[_0x5d341f(0x3b7)](),_0x27ac82=_0x25e9f1*_0x1fc6a4;if(_0x2f00f1>_0x27ac82&&_0x1fc6a4>_0x27ac82){_0x36c4bf-=_0x27ac82;const _0x4ca5ce=_0x373a83[_0x5d341f(0xa3c)][_0x5d341f(0x6a1)][_0x5d341f(0x916)][_0x5d341f(0x62a)],_0x561dba=_0x4bcc20[_0x5d341f(0x717)](0x1-_0x4ca64b/((_0x1fc6a4-_0x27ac82)*_0x4ca5ce+_0x4f6a1a),0.01);_0x88bf95*=_0x561dba,_0x565aa4+=_0x27ac82;}return _0x43f3d5*_0x48a6fd;}else BattleManager[_0x5d341f(0x403)][_0x5d341f(0xac2)]();}if(_0x1d1d12[_0x5d341f(0x564)])_0x35bd9b[_0x5d341f(0x76a)](_0x5d341f(0x388));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xa89),_0x2b0a8c=>{const _0x5c30c6=_0x2d1202;if(!SceneManager[_0x5c30c6(0x346)]())return;VisuMZ[_0x5c30c6(0x433)](_0x2b0a8c,_0x2b0a8c);const _0x52371d=$gameTemp[_0x5c30c6(0xa20)](),_0x5893b5=VisuMZ[_0x5c30c6(0xb4c)](_0x2b0a8c[_0x5c30c6(0x22f)]),_0x224cc3=_0x2b0a8c[_0x5c30c6(0x8e0)],_0xd970b=_0x2b0a8c[_0x5c30c6(0x86e)],_0x1834b8=_0x2b0a8c[_0x5c30c6(0x534)];if(!_0x52371d)return;for(const _0x16c25a of _0x5893b5){if(!_0x16c25a)continue;_0x16c25a['jumpBattler'](_0x224cc3,_0xd970b);}if(_0x1834b8)_0x52371d[_0x5c30c6(0x76a)]('battleJump');}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x741),_0x567394=>{const _0x57b9bf=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x57b9bf(0x1fd)]())return;VisuMZ[_0x57b9bf(0x433)](_0x567394,_0x567394);const _0xf72179=$gameTemp[_0x57b9bf(0xa20)](),_0x5a42fb=VisuMZ[_0x57b9bf(0xb4c)](_0x567394[_0x57b9bf(0x22f)]),_0x568a34=_0x567394[_0x57b9bf(0x5ec)],_0x3482d9=_0x567394['DistanceX'],_0x27a010=_0x567394[_0x57b9bf(0xae5)],_0x2691f1=_0x567394[_0x57b9bf(0x86e)],_0x2a25bc=_0x567394[_0x57b9bf(0x77b)],_0x37ea10=_0x567394[_0x57b9bf(0xb10)],_0x4a7a79=_0x567394['MotionType'],_0x1319a6=_0x567394[_0x57b9bf(0x564)];if(!_0xf72179)return;for(const _0x1cc88b of _0x5a42fb){if(!_0x1cc88b)continue;let _0x35308c=_0x3482d9,_0x33338c=_0x27a010;if(_0x568a34[_0x57b9bf(0xaa0)](/horz/i))_0x35308c*=_0x1cc88b['isActor']()?-0x1:0x1;if(_0x568a34[_0x57b9bf(0xaa0)](/vert/i))_0x33338c*=_0x1cc88b['isActor']()?-0x1:0x1;_0x1cc88b[_0x57b9bf(0x461)](_0x35308c,_0x33338c,_0x2691f1,_0x2a25bc,_0x37ea10),_0x1cc88b[_0x57b9bf(0xa73)](_0x4a7a79);}if(_0x1319a6)_0xf72179[_0x57b9bf(0x76a)](_0x57b9bf(0x388));}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x2ec),_0xc22cf8=>{const _0x4b07c0=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4b07c0(0x1fd)]())return;VisuMZ[_0x4b07c0(0x433)](_0xc22cf8,_0xc22cf8);const _0x3bd778=$gameTemp['getLastPluginCommandInterpreter'](),_0xb48393=VisuMZ[_0x4b07c0(0xb4c)](_0xc22cf8[_0x4b07c0(0x22f)]),_0x3e08e8=_0xc22cf8[_0x4b07c0(0xb13)],_0xd02667=_0xc22cf8[_0x4b07c0(0x4fb)],_0x5cc0cf=_0xc22cf8['OffsetX'],_0x28f377=_0xc22cf8[_0x4b07c0(0xa1d)],_0x51ddd8=_0xc22cf8[_0x4b07c0(0x86e)],_0x5107d8=_0xc22cf8[_0x4b07c0(0x77b)],_0x23fd9a=_0xc22cf8['EasingType'],_0x27b47f=_0xc22cf8[_0x4b07c0(0xaeb)],_0x248580=_0xc22cf8[_0x4b07c0(0x564)];if(!_0x3bd778)return;for(const _0x21bb89 of _0xb48393){if(!_0x21bb89)continue;let _0x4650b6=_0x21bb89[_0x4b07c0(0x22c)]()[_0x4b07c0(0x99a)],_0x5da92e=_0x21bb89[_0x4b07c0(0x22c)]()[_0x4b07c0(0x75a)];if(_0x3e08e8[_0x4b07c0(0xaa0)](/home/i))_0x4650b6=_0x21bb89[_0x4b07c0(0x22c)]()[_0x4b07c0(0xb08)],_0x5da92e=_0x21bb89[_0x4b07c0(0x22c)]()[_0x4b07c0(0x8a6)];else{if(_0x3e08e8[_0x4b07c0(0xaa0)](/center/i)){if('JFwoF'!==_0x4b07c0(0xb36))_0x4650b6=Graphics[_0x4b07c0(0x203)]/0x2,_0x5da92e=Graphics[_0x4b07c0(0x9ec)]/0x2;else{_0x5caee5[_0x4b07c0(0xaa0)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x2fc143=_0x4c76be(_0x1ca838['$1']),_0x3d1ef6=_0x31a5e8(_0x5ddb12['$2']),_0x3c65a0=_0x3d1ef6===0x1?this[_0x4b07c0(0x2e2)]:this[_0x4b07c0(0x839)],_0x308408=_0x564e5d(_0x47388f['$3']);_0x3c65a0[_0x2fc143]=_0x308408;}}else _0x3e08e8[_0x4b07c0(0xaa0)](/point (\d+), (\d+)/i)&&(_0x4650b6=Number(RegExp['$1']),_0x5da92e=Number(RegExp['$2']));}if(_0xd02667[_0x4b07c0(0xaa0)](/none/i))_0x4650b6+=_0x5cc0cf,_0x5da92e+=_0x28f377;else{if(_0xd02667[_0x4b07c0(0xaa0)](/horz/i)&&_0xd02667['match'](/vert/i))_0x4650b6+=_0x21bb89['isActor']()?-_0x5cc0cf:_0x5cc0cf,_0x5da92e+=_0x21bb89[_0x4b07c0(0xb90)]()?-_0x28f377:_0x28f377;else{if(_0xd02667[_0x4b07c0(0xaa0)](/horz/i))_0x4650b6+=_0x21bb89[_0x4b07c0(0xb90)]()?-_0x5cc0cf:_0x5cc0cf,_0x5da92e+=_0x28f377;else _0xd02667[_0x4b07c0(0xaa0)](/vert/i)&&(_0x4650b6+=_0x5cc0cf,_0x5da92e+=_0x21bb89[_0x4b07c0(0xb90)]()?-_0x28f377:_0x28f377);}}_0x21bb89[_0x4b07c0(0x9be)](_0x4650b6,_0x5da92e,_0x51ddd8,_0x5107d8,_0x23fd9a,-0x1),_0x21bb89['requestMotion'](_0x27b47f);}if(_0x248580)_0x3bd778[_0x4b07c0(0x76a)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],'ActSeq_Movement_MoveToTarget',_0x298015=>{const _0x5d72b9=_0x2d1202;if(!SceneManager[_0x5d72b9(0x346)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x5d72b9(0x433)](_0x298015,_0x298015);const _0x4184ec=$gameTemp[_0x5d72b9(0xa20)](),_0x514f74=VisuMZ[_0x5d72b9(0xb4c)](_0x298015[_0x5d72b9(0x6ae)]),_0x219417=VisuMZ['CreateActionSequenceTargets'](_0x298015['Targets2']),_0x1f2382=_0x298015[_0x5d72b9(0x8b9)];let _0x287042=_0x298015[_0x5d72b9(0x442)];const _0x2c770b=_0x298015[_0x5d72b9(0x4fb)],_0x5a03fc=_0x298015[_0x5d72b9(0x9cc)],_0x4daa30=_0x298015['OffsetY'],_0x1b1009=_0x298015[_0x5d72b9(0x86e)],_0x38ad49=_0x298015[_0x5d72b9(0x77b)],_0x594fbf=_0x298015[_0x5d72b9(0xb10)],_0x5c8071=_0x298015[_0x5d72b9(0xaeb)],_0x110c10=_0x298015[_0x5d72b9(0x564)],_0x40e04c=Math[_0x5d72b9(0x52e)](..._0x219417[_0x5d72b9(0x64c)](_0x134788=>_0x134788[_0x5d72b9(0x22c)]()['_baseX']-_0x134788[_0x5d72b9(0x22c)]()[_0x5d72b9(0x81d)]()/0x2)),_0x2aa464=Math[_0x5d72b9(0x717)](..._0x219417['map'](_0x49548c=>_0x49548c[_0x5d72b9(0x22c)]()[_0x5d72b9(0x99a)]+_0x49548c[_0x5d72b9(0x22c)]()[_0x5d72b9(0x81d)]()/0x2)),_0x137e64=Math[_0x5d72b9(0x52e)](..._0x219417[_0x5d72b9(0x64c)](_0x48eca6=>_0x48eca6['battler']()[_0x5d72b9(0x75a)]-_0x48eca6[_0x5d72b9(0x22c)]()['mainSpriteHeight']())),_0x2ce691=Math[_0x5d72b9(0x717)](..._0x219417[_0x5d72b9(0x64c)](_0x256c36=>_0x256c36[_0x5d72b9(0x22c)]()[_0x5d72b9(0x75a)])),_0x1fc0d3=_0x219417[_0x5d72b9(0xb5f)](_0x3355d7=>_0x3355d7[_0x5d72b9(0xb90)]())[_0x5d72b9(0x1d7)],_0x507c53=_0x219417[_0x5d72b9(0xb5f)](_0x12dfad=>_0x12dfad[_0x5d72b9(0xad8)]())[_0x5d72b9(0x1d7)];let _0x299289=0x0,_0x1728f4=0x0;if(_0x1f2382[_0x5d72b9(0xaa0)](/front/i)){if(_0x5d72b9(0x96b)===_0x5d72b9(0x96b))_0x299289=_0x1fc0d3>=_0x507c53?_0x40e04c:_0x2aa464;else{if(_0x309c9b[_0x5d72b9(0x470)])return;_0x41267c['BattleCore']['Scene_Map_updateCallMenu']['call'](this);}}else{if(_0x1f2382[_0x5d72b9(0xaa0)](/middle/i))_0x299289=(_0x40e04c+_0x2aa464)/0x2,_0x287042=-0x1;else _0x1f2382[_0x5d72b9(0xaa0)](/back/i)&&(_0x299289=_0x1fc0d3>=_0x507c53?_0x2aa464:_0x40e04c);}if(_0x1f2382[_0x5d72b9(0xaa0)](/head/i))_0x5d72b9(0x9de)!==_0x5d72b9(0x9de)?(this[_0x5d72b9(0x7d0)](),this['addAutoBattleCommand'](),this[_0x5d72b9(0x857)](),this[_0x5d72b9(0x758)](),this[_0x5d72b9(0x322)]()):_0x1728f4=_0x137e64;else{if(_0x1f2382[_0x5d72b9(0xaa0)](/center/i)){if('cTKVe'===_0x5d72b9(0xbba))_0x1728f4=(_0x137e64+_0x2ce691)/0x2;else{const _0x1d402f=this[_0x5d72b9(0x98f)]['skillTypes']();for(const _0x4aec11 of _0x1d402f){this[_0x5d72b9(0x557)](_0x4aec11);}}}else _0x1f2382[_0x5d72b9(0xaa0)](/base/i)&&(_0x5d72b9(0x77d)!==_0x5d72b9(0x77d)?(_0x311741=(_0x5b9111+_0x500d88)/0x2,_0x308e33=-0x1):_0x1728f4=_0x2ce691);}if(!_0x4184ec)return;for(const _0x991127 of _0x514f74){if(_0x5d72b9(0x841)!==_0x5d72b9(0x841))return!![];else{if(!_0x991127)continue;let _0x52221e=_0x299289,_0x488d15=_0x1728f4;if(_0x2c770b['match'](/none/i))_0x52221e+=_0x5a03fc,_0x488d15+=_0x4daa30;else{if(_0x2c770b['match'](/horz/i)&&_0x2c770b['match'](/vert/i))_0x52221e+=_0x991127[_0x5d72b9(0xb90)]()?-_0x5a03fc:_0x5a03fc,_0x488d15+=_0x991127[_0x5d72b9(0xb90)]()?-_0x4daa30:_0x4daa30;else{if(_0x2c770b[_0x5d72b9(0xaa0)](/horz/i))_0x52221e+=_0x991127[_0x5d72b9(0xb90)]()?-_0x5a03fc:_0x5a03fc,_0x488d15+=_0x4daa30;else _0x2c770b['match'](/vert/i)&&(_0x52221e+=_0x5a03fc,_0x488d15+=_0x991127[_0x5d72b9(0xb90)]()?-_0x4daa30:_0x4daa30);}}_0x991127[_0x5d72b9(0x9be)](_0x52221e,_0x488d15,_0x1b1009,_0x38ad49,_0x594fbf,_0x287042),_0x991127['requestMotion'](_0x5c8071);}}if(_0x110c10)_0x4184ec[_0x5d72b9(0x76a)](_0x5d72b9(0x388));}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x2c4),_0x455b22=>{const _0x3be24e=_0x2d1202;if(!SceneManager[_0x3be24e(0x346)]())return;VisuMZ[_0x3be24e(0x433)](_0x455b22,_0x455b22);const _0x3f8722=$gameTemp[_0x3be24e(0xa20)](),_0x1261ac=VisuMZ[_0x3be24e(0xb4c)](_0x455b22[_0x3be24e(0x22f)]),_0x1b286c=_0x455b22[_0x3be24e(0x5d8)],_0x1190e8=_0x455b22[_0x3be24e(0x86e)],_0x3783f6=_0x455b22['EasingType'],_0xe08814=_0x455b22[_0x3be24e(0x57d)];if(!_0x3f8722)return;for(const _0x2b6c7a of _0x1261ac){if(_0x3be24e(0x22a)!==_0x3be24e(0x22a))this[_0x3be24e(0x5c8)]('setActiveWeaponSet',_0x26639f,_0x5e1f1a);else{if(!_0x2b6c7a)continue;_0x2b6c7a[_0x3be24e(0x569)](_0x1b286c,_0x1190e8,_0x3783f6);}}if(_0xe08814)_0x3f8722[_0x3be24e(0x76a)](_0x3be24e(0xb2b));}),PluginManager[_0x2d1202(0x520)](pluginData['name'],'ActSeq_Movement_Scale',_0x1f4fae=>{const _0x3ac95e=_0x2d1202;if(!SceneManager[_0x3ac95e(0x346)]())return;VisuMZ[_0x3ac95e(0x433)](_0x1f4fae,_0x1f4fae);const _0xe505ba=$gameTemp[_0x3ac95e(0xa20)](),_0x9ccd5f=VisuMZ['CreateActionSequenceTargets'](_0x1f4fae['Targets']),_0x16e4be=_0x1f4fae[_0x3ac95e(0x4e8)],_0x4b8843=_0x1f4fae[_0x3ac95e(0x315)],_0x28530b=_0x1f4fae['Duration'],_0x187b46=_0x1f4fae[_0x3ac95e(0xb10)],_0x10956b=_0x1f4fae[_0x3ac95e(0x4f0)];if(!_0xe505ba)return;for(const _0x3f53c9 of _0x9ccd5f){if(_0x3ac95e(0x411)===_0x3ac95e(0x411)){if(!_0x3f53c9)continue;_0x3f53c9[_0x3ac95e(0x6a8)](_0x16e4be,_0x4b8843,_0x28530b,_0x187b46);}else{if(this[_0x3ac95e(0xa4b)]&&this['_enemies'][_0x3ac95e(0x7c6)](this[_0x3ac95e(0xa4b)])){const _0x3829fa=this[_0x3ac95e(0x2a1)][_0x3ac95e(0x783)](this['_lastEnemy']);this['forceSelect'](_0x3829fa);}else this[_0x3ac95e(0x79c)]();}}if(_0x10956b)_0xe505ba[_0x3ac95e(0x76a)]('battleGrow');}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x781),_0x38842d=>{const _0x2e819c=_0x2d1202;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x38842d,_0x38842d);const _0x126287=$gameTemp['getLastPluginCommandInterpreter'](),_0x28dda0=VisuMZ[_0x2e819c(0xb4c)](_0x38842d[_0x2e819c(0x22f)]),_0x4c07ec=_0x38842d[_0x2e819c(0x8a8)],_0x2d0700=_0x38842d['SkewY'],_0x5d1fa5=_0x38842d['Duration'],_0x350605=_0x38842d['EasingType'],_0x4b0160=_0x38842d[_0x2e819c(0x513)];if(!_0x126287)return;for(const _0x5de61c of _0x28dda0){if(!_0x5de61c)continue;_0x5de61c[_0x2e819c(0x3a3)](_0x4c07ec,_0x2d0700,_0x5d1fa5,_0x350605);}if(_0x4b0160)_0x126287[_0x2e819c(0x76a)](_0x2e819c(0x91c));}),PluginManager['registerCommand'](pluginData['name'],_0x2d1202(0x1b6),_0xe0ce50=>{const _0x753d7b=_0x2d1202;if(!SceneManager[_0x753d7b(0x346)]())return;VisuMZ[_0x753d7b(0x433)](_0xe0ce50,_0xe0ce50);const _0x444a1d=$gameTemp['getLastPluginCommandInterpreter'](),_0x1cef2b=VisuMZ[_0x753d7b(0xb4c)](_0xe0ce50[_0x753d7b(0x22f)]),_0x4b0973=_0xe0ce50['Angle'],_0x54c6a7=_0xe0ce50[_0x753d7b(0x86e)],_0x551807=_0xe0ce50[_0x753d7b(0xb10)],_0x54c93b=_0xe0ce50['RevertAngle'],_0x3b8d82=_0xe0ce50[_0x753d7b(0x2ea)];if(!_0x444a1d)return;for(const _0x399a1f of _0x1cef2b){if(!_0x399a1f)continue;_0x399a1f[_0x753d7b(0x489)](_0x4b0973,_0x54c6a7,_0x551807,_0x54c93b);}if(_0x3b8d82)_0x444a1d[_0x753d7b(0x76a)](_0x753d7b(0x64f));}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x588),_0x4b375c=>{const _0x2f27ae=_0x2d1202;if(!SceneManager[_0x2f27ae(0x346)]())return;const _0x25ea9f=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x25ea9f)return;_0x25ea9f['setWaitMode']('battleFloat');}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x53d),_0x4edcc9=>{const _0x353865=_0x2d1202;if(!SceneManager['isSceneBattle']())return;const _0x1a8a2f=$gameTemp[_0x353865(0xa20)]();if(!_0x1a8a2f)return;_0x1a8a2f[_0x353865(0x76a)](_0x353865(0x6c5));}),PluginManager['registerCommand'](pluginData['name'],_0x2d1202(0x4e9),_0x4cd5c1=>{const _0x22c192=_0x2d1202;if(!SceneManager['isSceneBattle']())return;const _0xab10e7=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xab10e7)return;_0xab10e7[_0x22c192(0x76a)](_0x22c192(0x388));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xa3f),_0x21d9b0=>{const _0x4e9294=_0x2d1202;if(!SceneManager[_0x4e9294(0x346)]())return;const _0x58a951=$gameTemp[_0x4e9294(0xa20)]();if(!_0x58a951)return;_0x58a951[_0x4e9294(0x76a)]('battleOpacity');}),PluginManager[_0x2d1202(0x520)](pluginData['name'],_0x2d1202(0x4fe),_0x70cbd6=>{const _0x512b59=_0x2d1202;if(!SceneManager['isSceneBattle']())return;const _0x6d9e3=$gameTemp[_0x512b59(0xa20)]();if(!_0x6d9e3)return;_0x6d9e3[_0x512b59(0x76a)](_0x512b59(0xa3d));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x70b),_0x48e9b6=>{const _0x1ff0d1=_0x2d1202;if(!SceneManager[_0x1ff0d1(0x346)]())return;const _0xe70ac4=$gameTemp[_0x1ff0d1(0xa20)]();if(!_0xe70ac4)return;_0xe70ac4['setWaitMode'](_0x1ff0d1(0x91c));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Movement_WaitForSpin',_0x4124c3=>{const _0x5c94b9=_0x2d1202;if(!SceneManager[_0x5c94b9(0x346)]())return;const _0x9fcdf6=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x9fcdf6)return;_0x9fcdf6[_0x5c94b9(0x76a)](_0x5c94b9(0x64f));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x68a),_0x450b57=>{const _0x4e7c09=_0x2d1202;if(!SceneManager[_0x4e7c09(0x346)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x4e7c09(0x433)](_0x450b57,_0x450b57);const _0x5ccd12=$gameTemp[_0x4e7c09(0xa20)](),_0x2dcd8a=_0x450b57['WaitForProjectile'];if(!_0x5ccd12)return;const _0x482c24=BattleManager[_0x4e7c09(0x3d2)];if(!_0x482c24)return;_0x482c24[_0x4e7c09(0x209)](_0x450b57);if(_0x2dcd8a)_0x5ccd12[_0x4e7c09(0x76a)]('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],_0x2d1202(0x2cb),_0x198018=>{const _0x1784c7=_0x2d1202;if(!SceneManager[_0x1784c7(0x346)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x1784c7(0x433)](_0x198018,_0x198018);const _0x536873=$gameTemp[_0x1784c7(0xa20)](),_0x351393=_0x198018['WaitForProjectile'];if(!_0x536873)return;const _0x5bbb54=BattleManager[_0x1784c7(0x3d2)];if(!_0x5bbb54)return;_0x5bbb54['createActionSequenceProjectile'](_0x198018);if(_0x351393)_0x536873[_0x1784c7(0x76a)](_0x1784c7(0x464));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x26b),_0x21a089=>{const _0x48098d=_0x2d1202;if(!SceneManager[_0x48098d(0x346)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x48098d(0x433)](_0x21a089,_0x21a089);const _0xaa8710=$gameTemp[_0x48098d(0xa20)](),_0x1b2efc=_0x21a089[_0x48098d(0xa2a)];if(!_0xaa8710)return;const _0xf9a0e1=BattleManager[_0x48098d(0x3d2)];if(!_0xf9a0e1)return;_0xf9a0e1[_0x48098d(0x209)](_0x21a089);if(_0x1b2efc)_0xaa8710['setWaitMode']('battleProjectiles');}),PluginManager[_0x2d1202(0x520)](pluginData['name'],'ActSeq_ChangeSkew',_0x26c5a1=>{const _0x5d115b=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x5d115b(0x433)](_0x26c5a1,_0x26c5a1);const _0x2bd463=$gameTemp[_0x5d115b(0xa20)](),_0x4b6e8c=_0x26c5a1[_0x5d115b(0x513)];if(!_0x2bd463)return;$gameScreen[_0x5d115b(0x648)](_0x26c5a1['SkewX'],_0x26c5a1[_0x5d115b(0x9e5)],_0x26c5a1[_0x5d115b(0x86e)],_0x26c5a1[_0x5d115b(0xb10)]);if(_0x4b6e8c)_0x2bd463[_0x5d115b(0x76a)]('battleSkew');}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x7a9),_0x57abb1=>{const _0x1d7ade=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1d7ade(0x893)])return;VisuMZ[_0x1d7ade(0x433)](_0x57abb1,_0x57abb1);const _0x2ba790=$gameTemp[_0x1d7ade(0xa20)](),_0x220663=_0x57abb1[_0x1d7ade(0x513)];if(!_0x2ba790)return;$gameScreen[_0x1d7ade(0x648)](0x0,0x0,_0x57abb1[_0x1d7ade(0x86e)],_0x57abb1[_0x1d7ade(0xb10)]);if(_0x220663)_0x2ba790['setWaitMode'](_0x1d7ade(0x375));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x8c0),_0x531dfd=>{const _0x30575c=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x30575c(0x893)])return;const _0x36ba16=$gameTemp[_0x30575c(0xa20)]();if(!_0x36ba16)return;_0x36ba16[_0x30575c(0x76a)](_0x30575c(0x375));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x291),_0x36dcf7=>{const _0x3dee9a=_0x2d1202;if(!SceneManager[_0x3dee9a(0x346)]())return;VisuMZ[_0x3dee9a(0x433)](_0x36dcf7,_0x36dcf7);const _0x3366ef=$gameTemp[_0x3dee9a(0xa20)](),_0x4840ba=_0x36dcf7[_0x3dee9a(0x71b)],_0x17c85e=_0x36dcf7[_0x3dee9a(0x3c6)];if(!_0x3366ef)return;BattleManager[_0x3dee9a(0x43a)]=_0x4840ba,BattleManager[_0x3dee9a(0x823)]=BattleManager['_allTargets']?BattleManager[_0x3dee9a(0x934)][BattleManager['_targetIndex']]||null:null;if(BattleManager[_0x3dee9a(0x823)]&&_0x17c85e['toUpperCase']()['trim']()!==_0x3dee9a(0x715)){if(_0x3dee9a(0x985)!==_0x3dee9a(0x985)){const _0x561817=this[_0x3dee9a(0x868)];this[_0x3dee9a(0x868)]=![];if(_0x5a2447[_0x3dee9a(0x510)]()&&this['isInputting']()){const _0x512efa=this[_0x3dee9a(0x22c)]();if(_0x512efa&&_0x561817)_0x512efa[_0x3dee9a(0x271)]();return;}const _0x44f338=this[_0x3dee9a(0x22c)]();if(_0x44f338)_0x44f338[_0x3dee9a(0x255)]();this[_0x3dee9a(0x350)](![]),this[_0x3dee9a(0xb83)]();}else _0x3366ef[_0x3dee9a(0x4d2)]([_0x17c85e]);}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x479),_0x391d24=>{const _0x4a7568=_0x2d1202;if(!SceneManager[_0x4a7568(0x346)]())return;VisuMZ[_0x4a7568(0x433)](_0x391d24,_0x391d24);const _0x299cdc=$gameTemp['getLastPluginCommandInterpreter'](),_0x343d03=_0x391d24['JumpToLabel'];if(!_0x299cdc)return;BattleManager[_0x4a7568(0x43a)]++,BattleManager['_target']=BattleManager[_0x4a7568(0x934)][BattleManager[_0x4a7568(0x43a)]]||null,BattleManager[_0x4a7568(0x823)]&&_0x343d03[_0x4a7568(0x248)]()['trim']()!=='UNTITLED'&&_0x299cdc[_0x4a7568(0x4d2)]([_0x343d03]);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xa09),_0x59d73e=>{const _0x427d72=_0x2d1202;if(!SceneManager[_0x427d72(0x346)]())return;VisuMZ['ConvertParams'](_0x59d73e,_0x59d73e);const _0x342d56=$gameTemp[_0x427d72(0xa20)](),_0x44875f=_0x59d73e[_0x427d72(0x3c6)];if(!_0x342d56)return;BattleManager['_targetIndex']--,BattleManager[_0x427d72(0x823)]=BattleManager[_0x427d72(0x934)][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x44875f[_0x427d72(0x248)]()[_0x427d72(0x43b)]()!=='UNTITLED'&&_0x342d56[_0x427d72(0x4d2)]([_0x44875f]);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x5de),_0x477e3a=>{const _0x31ea7b=_0x2d1202;if(!SceneManager[_0x31ea7b(0x346)]())return;VisuMZ[_0x31ea7b(0x433)](_0x477e3a,_0x477e3a);const _0x46c8dc=$gameTemp['getLastPluginCommandInterpreter'](),_0x36cdf2=_0x477e3a[_0x31ea7b(0x7f0)],_0xa9270b=_0x477e3a[_0x31ea7b(0x3c6)];if(!_0x46c8dc)return;const _0x39f5d2=BattleManager[_0x31ea7b(0x43a)];for(;;){BattleManager[_0x31ea7b(0x43a)]=Math[_0x31ea7b(0x847)](BattleManager['_allTargets']['length']);if(!_0x36cdf2)break;if(BattleManager[_0x31ea7b(0x43a)]!==_0x39f5d2)break;if(BattleManager[_0x31ea7b(0x934)][_0x31ea7b(0x1d7)]<=0x1){if('cvJqM'!==_0x31ea7b(0x729)){BattleManager[_0x31ea7b(0x43a)]=0x0;break;}else return _0x31bbad[_0x31ea7b(0x973)]()[_0x31ea7b(0xb5f)](_0x10e3c5=>_0x10e3c5!==_0x36002a);}}BattleManager[_0x31ea7b(0x823)]=BattleManager[_0x31ea7b(0x934)][BattleManager[_0x31ea7b(0x43a)]]||null,BattleManager[_0x31ea7b(0x823)]&&_0xa9270b[_0x31ea7b(0x248)]()[_0x31ea7b(0x43b)]()!==_0x31ea7b(0x715)&&(_0x31ea7b(0x51d)==='TLsRE'?(this[_0x31ea7b(0x6a7)]=_0xde0640[_0x31ea7b(0xae9)]>=0x0?0x2:0x3,this['createDigits'](_0x5b2aa3[_0x31ea7b(0xae9)])):_0x46c8dc['command119']([_0xa9270b]));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x6c0),_0x30175e=>{const _0x5341f5=_0x2d1202;if(!SceneManager[_0x5341f5(0x346)]())return;VisuMZ[_0x5341f5(0x433)](_0x30175e,_0x30175e);const _0x1f099f=VisuMZ[_0x5341f5(0xb4c)](_0x30175e[_0x5341f5(0x22f)]);for(const _0x36cc0b of _0x1f099f){if(_0x5341f5(0x613)==='cAXLZ'){if(!_0x36cc0b)continue;if(!_0x36cc0b[_0x5341f5(0xb90)]())continue;_0x36cc0b['clearActiveWeaponSlot']();}else{if(this[_0x5341f5(0x6f4)]<=0x0)return;if(!this[_0x5341f5(0x5a3)])return;const _0x14d595=this[_0x5341f5(0x6f4)],_0x42ad64=this[_0x5341f5(0x649)],_0x23d127=this[_0x5341f5(0x7b2)];_0x2dfb21[_0x5341f5(0x9ef)]?(this['_growX']=this[_0x5341f5(0xa4c)](this[_0x5341f5(0xb60)],this['_targetGrowX'],_0x14d595,_0x42ad64,_0x23d127),this[_0x5341f5(0x956)]=this['applyEasing'](this[_0x5341f5(0x956)],this['_targetGrowY'],_0x14d595,_0x42ad64,_0x23d127)):(this[_0x5341f5(0xb60)]=(this[_0x5341f5(0xb60)]*(_0x14d595-0x1)+this[_0x5341f5(0x205)])/_0x14d595,this[_0x5341f5(0x956)]=(this[_0x5341f5(0x956)]*(_0x14d595-0x1)+this[_0x5341f5(0xb94)])/_0x14d595);this['_growDuration']--;if(this[_0x5341f5(0x6f4)]<=0x0)this['onGrowEnd']();}}}),PluginManager['registerCommand'](pluginData[_0x2d1202(0x476)],'ActSeq_Weapon_NextActiveWeapon',_0x2adfd9=>{const _0xbf312f=_0x2d1202;if(!SceneManager[_0xbf312f(0x346)]())return;VisuMZ[_0xbf312f(0x433)](_0x2adfd9,_0x2adfd9);const _0x18da4b=$gameTemp[_0xbf312f(0xa20)]();let _0x342c6c=![];const _0x42076d=_0x2adfd9[_0xbf312f(0x3c6)],_0x2893a6=VisuMZ['CreateActionSequenceTargets'](_0x2adfd9[_0xbf312f(0x22f)]);for(const _0x56649b of _0x2893a6){if(!_0x56649b)continue;if(!_0x56649b[_0xbf312f(0xb90)]())continue;_0x56649b[_0xbf312f(0x56e)](),_0x56649b[_0xbf312f(0x1ed)]()[_0xbf312f(0x1d7)]>0x0?_0x342c6c=!![]:_0xbf312f(0x77f)===_0xbf312f(0x77f)?_0x56649b['clearActiveWeaponSlot']():(_0x319389['BattleCore'][_0xbf312f(0x851)][_0xbf312f(0x86c)](this),this[_0xbf312f(0xa75)]());}_0x342c6c&&_0x42076d[_0xbf312f(0x248)]()[_0xbf312f(0x43b)]()!==_0xbf312f(0x715)&&_0x18da4b[_0xbf312f(0x4d2)]([_0x42076d]);}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xa45),_0x1d877b=>{const _0x1aec6d=_0x2d1202;if(!SceneManager[_0x1aec6d(0x346)]())return;VisuMZ[_0x1aec6d(0x433)](_0x1d877b,_0x1d877b);let _0x4cbd64=_0x1d877b['SlotID'];_0x4cbd64--,_0x4cbd64=Math[_0x1aec6d(0x717)](_0x4cbd64,0x0);const _0xbbbce0=VisuMZ[_0x1aec6d(0xb4c)](_0x1d877b[_0x1aec6d(0x22f)]);for(const _0x5cd57b of _0xbbbce0){if(_0x1aec6d(0x89c)===_0x1aec6d(0x9f2)){const _0x302c2a=_0x2f4e2a['indexOf'](_0x56f923[_0x1aec6d(0x248)]()[_0x1aec6d(0x43b)]());_0x302c2a>=0x0&&_0x302c2a<=0x7&&_0x5bd09c['isBuffAffected'](_0x302c2a)&&_0x3fc89b['removeBuff'](_0x302c2a);}else{if(!_0x5cd57b)continue;if(!_0x5cd57b[_0x1aec6d(0xb90)]())continue;_0x5cd57b['setActiveWeaponSlot'](_0x4cbd64);}}}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0x77a),_0x3df028=>{const _0xa72955=_0x2d1202;if(!SceneManager[_0xa72955(0x346)]())return;if(!Imported[_0xa72955(0x893)])return;VisuMZ[_0xa72955(0x433)](_0x3df028,_0x3df028);const _0x4243f6=$gameTemp[_0xa72955(0xa20)](),_0x4712a7=_0x3df028[_0xa72955(0x722)];if(!_0x4243f6)return;$gameScreen[_0xa72955(0x87f)](_0x3df028[_0xa72955(0x4da)],_0x3df028[_0xa72955(0x86e)],_0x3df028[_0xa72955(0xb10)]);if(_0x4712a7)_0x4243f6[_0xa72955(0x76a)](_0xa72955(0x5cc));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],'ActSeq_Zoom_Reset',_0xb45219=>{const _0xce6dcb=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xce6dcb(0x893)])return;VisuMZ[_0xce6dcb(0x433)](_0xb45219,_0xb45219);const _0x5c5a63=$gameTemp['getLastPluginCommandInterpreter'](),_0x214383=_0xb45219[_0xce6dcb(0x722)];if(!_0x5c5a63)return;$gameScreen[_0xce6dcb(0x87f)](0x1,_0xb45219[_0xce6dcb(0x86e)],_0xb45219[_0xce6dcb(0xb10)]);if(_0x214383)_0x5c5a63[_0xce6dcb(0x76a)](_0xce6dcb(0x5cc));}),PluginManager[_0x2d1202(0x520)](pluginData[_0x2d1202(0x476)],_0x2d1202(0xb28),_0x1f776d=>{const _0xb7b373=_0x2d1202;if(!SceneManager[_0xb7b373(0x346)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x49b5f0=$gameTemp[_0xb7b373(0xa20)]();if(!_0x49b5f0)return;_0x49b5f0[_0xb7b373(0x76a)](_0xb7b373(0x5cc));}),VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xaec)]=Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0x39e)],Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0x39e)]=function(){const _0x586c15=_0x2d1202;this[_0x586c15(0x6a3)](),this[_0x586c15(0x3f2)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ['BattleCore'][_0x586c15(0xaec)][_0x586c15(0x86c)](this),this[_0x586c15(0x991)](),this[_0x586c15(0x7cb)](),this[_0x586c15(0x561)]();},Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0x991)]=function(){const _0xec1a0b=_0x2d1202;if(VisuMZ[_0xec1a0b(0x9bd)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0xec1a0b(0x4ca)](),this[_0xec1a0b(0x54e)]();},Scene_Boot['prototype'][_0x2d1202(0x6a3)]=function(){const _0x5a03d2=_0x2d1202,_0x32a5c4=$dataSystem['weaponTypes']['length'];for(let _0x37d1d7=0x0;_0x37d1d7<_0x32a5c4;_0x37d1d7++){const _0x4eeea3=$dataSystem['attackMotions'][_0x37d1d7];if(_0x4eeea3)continue;$dataSystem[_0x5a03d2(0xb19)][_0x37d1d7]=JsonEx['makeDeepCopy']($dataSystem['attackMotions'][0x0]);}},Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0x3f2)]=function(){const _0x5cad88=_0x2d1202,_0x378bd2=VisuMZ[_0x5cad88(0xa3c)][_0x5cad88(0x6a1)];_0x378bd2[_0x5cad88(0x916)][_0x5cad88(0x9f3)]===undefined&&(_0x378bd2[_0x5cad88(0x916)][_0x5cad88(0x9f3)]=_0x5cad88(0x9e6));_0x378bd2[_0x5cad88(0x97d)][_0x5cad88(0x474)]===undefined&&(_0x378bd2['Actor']['SmoothImage']=![]);_0x378bd2[_0x5cad88(0x540)]['SmoothImage']===undefined&&(_0x378bd2[_0x5cad88(0x540)]['SmoothImage']=!![]);if(_0x378bd2[_0x5cad88(0x97d)]['PrioritySortActive']===undefined){if(_0x5cad88(0xa5b)===_0x5cad88(0x917))return this['battlerSprites']()[_0x5cad88(0x3eb)](_0x4569c9=>_0x4569c9[_0x5cad88(0x8dc)]());else _0x378bd2[_0x5cad88(0x97d)]['PrioritySortActive']=![];}_0x378bd2[_0x5cad88(0x97d)][_0x5cad88(0x5f5)]===undefined&&('XNRIm'===_0x5cad88(0x3cc)?(_0x5c966a[_0x5cad88(0xa3c)][_0x5cad88(0x1da)]['call'](this,_0x5ac57c),this[_0x5cad88(0xac7)]()):_0x378bd2['Actor'][_0x5cad88(0x5f5)]=!![]);},VisuMZ[_0x2d1202(0x54d)]={},Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0x402)]=function(){const _0x2c0cd5=_0x2d1202;for(const _0x7a9a77 of VisuMZ[_0x2c0cd5(0xa3c)][_0x2c0cd5(0x6a1)][_0x2c0cd5(0x916)]['DamageStyleList']){if(!_0x7a9a77)continue;const _0x19e39e=_0x7a9a77['Name'][_0x2c0cd5(0x248)]()[_0x2c0cd5(0x43b)]();VisuMZ[_0x2c0cd5(0x54d)][_0x19e39e]=_0x7a9a77;}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x480)]={},Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0xbcc)]=function(){const _0x56d81e=_0x2d1202,_0x36a095=VisuMZ[_0x56d81e(0xa3c)]['RegExp'],_0x23af72='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x4f3f26=[[_0x56d81e(0x8c3),_0x56d81e(0x5b2)],[_0x56d81e(0x902),_0x56d81e(0x621)]],_0x37513b=[[_0x56d81e(0xb49),_0x56d81e(0x35a)],[_0x56d81e(0x2e4),_0x56d81e(0x92b)]],_0x5d878e=[['',''],['AsUser',_0x56d81e(0x24a)],[_0x56d81e(0x482),_0x56d81e(0x1c3)]];for(const _0x5584c2 of _0x37513b){if(_0x56d81e(0x910)===_0x56d81e(0x910))for(const _0x3765b4 of _0x5d878e){for(const _0x1b8bab of _0x4f3f26){const _0x35ac63=_0x5584c2[0x0][_0x56d81e(0x995)](_0x1b8bab[0x0],_0x3765b4[0x0]),_0x378b8f=_0x5584c2[0x1][_0x56d81e(0x995)](_0x1b8bab[0x1],_0x3765b4[0x1])[_0x56d81e(0x43b)](),_0x3af447=new RegExp(_0x23af72[_0x56d81e(0x995)](_0x378b8f),'i');_0x36a095[_0x35ac63]=_0x3af447;}}else{_0x279d67-=_0x4cb609[_0x455b54];if(_0x88904<=0x0)return _0x1054b3;}}const _0xf1f0b5=[['%1StartActionJS',_0x56d81e(0x5c5)],[_0x56d81e(0x1ee),'JS\x20%1END\x20ACTION']];for(const _0x475e3d of _0xf1f0b5){for(const _0x4a17c8 of _0x4f3f26){const _0x36e1de=_0x475e3d[0x0][_0x56d81e(0x995)](_0x4a17c8[0x0]),_0x365679=_0x475e3d[0x1][_0x56d81e(0x995)](_0x4a17c8[0x1]),_0x5f4ad0=new RegExp(_0x23af72[_0x56d81e(0x995)](_0x365679),'i');_0x36a095[_0x36e1de]=_0x5f4ad0;}}const _0x5b075d=[['%1StartBattleJS',_0x56d81e(0x74c)],['%1EndBattleJS',_0x56d81e(0x641)],[_0x56d81e(0x8cc),_0x56d81e(0x97f)],[_0x56d81e(0x6f3),_0x56d81e(0x528)],[_0x56d81e(0x6c6),_0x56d81e(0x7fd)],['EscapeFailureJS',_0x56d81e(0x8d3)],['%1StartTurnJS',_0x56d81e(0x6ab)],[_0x56d81e(0x200),_0x56d81e(0x691)],['%1RegenerateJS',_0x56d81e(0x8f6)]];for(const _0x125691 of _0x5b075d){if(_0x56d81e(0x342)!=='XXmGQ')for(const _0x299301 of _0x4f3f26){if('XXnAw'!=='XXnAw')return!![];else{const _0x3fe5f5=_0x125691[0x0]['format'](_0x299301[0x0]),_0x59a537=_0x125691[0x1][_0x56d81e(0x995)](_0x299301[0x1]),_0x494bc9=new RegExp(_0x23af72[_0x56d81e(0x995)](_0x59a537),'i');_0x36a095[_0x3fe5f5]=_0x494bc9;}}else return _0x2c663f['opponentsUnit']()[_0x56d81e(0x973)]();}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x331cc9=_0x2d1202,_0x47dd8d=$dataSkills['concat']($dataItems);for(const _0x3495a9 of _0x47dd8d){if('BRIpX'!==_0x331cc9(0x5ba)){if(!_0x3495a9)continue;VisuMZ['BattleCore'][_0x331cc9(0x413)](_0x3495a9);}else{const _0x24fd1f=_0x1d9c59(_0x48ab61['$1'])[_0x331cc9(0x2fd)](/[\r\n]+/)[_0x331cc9(0x9b6)](''),_0x453e4e=this[_0x331cc9(0x6d1)](_0x24fd1f);_0x5e5c0e=this[_0x331cc9(0x880)](_0x453e4e)||_0x474d9e,_0xa18083=_0x2632e8[_0x331cc9(0xa28)](_0x10e41c);}}},Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0x4ca)]=function(){const _0x5e2a2d=_0x2d1202,_0x2dfe9c=$dataActors[_0x5e2a2d(0x8d2)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x420ee7 of _0x2dfe9c){if(_0x5e2a2d(0x761)!==_0x5e2a2d(0x6c3)){if(!_0x420ee7)continue;VisuMZ[_0x5e2a2d(0xa3c)]['Parse_Notetags_TraitObjects'](_0x420ee7);}else this[_0x5e2a2d(0x3b6)]++;}},Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0x7cb)]=function(){const _0xd693e9=_0x2d1202,_0x52638a=VisuMZ[_0xd693e9(0xa3c)][_0xd693e9(0x6a1)][_0xd693e9(0x51c)][_0xd693e9(0xbc6)],_0x2538c7=[];for(const _0x30da9c of _0x52638a){const _0x4c8e32=$dataTroops[_0x30da9c];if(_0x4c8e32)_0x2538c7['push'](JsonEx[_0xd693e9(0x1c7)](_0x4c8e32));}for(const _0x9a859a of $dataTroops){if(!_0x9a859a)continue;for(const _0x41fa4a of _0x2538c7){if(_0xd693e9(0x8b1)!==_0xd693e9(0x9ac)){if(_0x41fa4a['id']===_0x9a859a['id'])continue;_0x9a859a[_0xd693e9(0x325)]=_0x9a859a['pages'][_0xd693e9(0x8d2)](_0x41fa4a[_0xd693e9(0x325)]);}else{const _0x24e275=_0x560f77[_0x504c7b];_0x24e275&&_0x4e988c['reserveCommonEvent'](_0x48f3c7);}}}},Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0x561)]=function(){const _0x44ea89=_0x2d1202,_0x24e93a=VisuMZ[_0x44ea89(0xa3c)][_0x44ea89(0x6a1)][_0x44ea89(0x51c)];if(_0x24e93a[_0x44ea89(0x285)]>0x0&&$dataCommonEvents[_0x24e93a[_0x44ea89(0x285)]]){const _0x49a262=$dataCommonEvents[_0x24e93a[_0x44ea89(0x285)]],_0x3426d2=_0x49a262[_0x44ea89(0x7e9)]['length']-0x2,_0x115e26=_0x49a262[_0x44ea89(0x7e9)][_0x3426d2];if(_0x115e26&&_0x115e26[_0x44ea89(0x34e)]!==0xe6){if(_0x44ea89(0x802)!=='elDNw'){const _0x4011e5={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x1a2995=_0x49a262[_0x44ea89(0x7e9)][_0x44ea89(0x300)]();_0x49a262[_0x44ea89(0x7e9)]['unshift'](_0x4011e5),_0x49a262[_0x44ea89(0x7e9)][_0x44ea89(0x95c)](_0x1a2995);}else{const _0x5ec44f=_0x1bc0a0[_0x44ea89(0x647)]('['+_0x112c15['$1']['match'](/\d+/g)+']');for(const _0x556e6f of _0x5ec44f){if(_0x21cba1[_0x44ea89(0x57c)](_0x556e6f))return![];}return!![];}}}},Scene_Boot[_0x2d1202(0x8ec)][_0x2d1202(0x54e)]=function(){const _0x22d720=_0x2d1202,_0x163fa6=$dataSkills[_0x22d720(0x8d2)]($dataItems);for(const _0x2df429 of _0x163fa6){if(!_0x2df429)continue;VisuMZ[_0x22d720(0xa3c)]['Parse_Notetags_Targets'](_0x2df429);}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x47b)]=VisuMZ[_0x2d1202(0x47b)],VisuMZ[_0x2d1202(0x47b)]=function(_0x2f58cc){const _0x4c5a54=_0x2d1202;VisuMZ[_0x4c5a54(0xa3c)][_0x4c5a54(0x47b)]&&VisuMZ['BattleCore'][_0x4c5a54(0x47b)]['call'](this,_0x2f58cc),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x2f58cc);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xb7a)]=VisuMZ[_0x2d1202(0xb7a)],VisuMZ['ParseClassNotetags']=function(_0xacb612){const _0x2b8628=_0x2d1202;VisuMZ['BattleCore'][_0x2b8628(0xb7a)]&&VisuMZ[_0x2b8628(0xa3c)]['ParseClassNotetags'][_0x2b8628(0x86c)](this,_0xacb612),VisuMZ[_0x2b8628(0xa3c)][_0x2b8628(0x512)](_0xacb612);},VisuMZ['BattleCore'][_0x2d1202(0x427)]=VisuMZ[_0x2d1202(0x427)],VisuMZ[_0x2d1202(0x427)]=function(_0x4e34b4){const _0x1d47c0=_0x2d1202;if(VisuMZ['BattleCore'][_0x1d47c0(0x427)]){if(_0x1d47c0(0x860)!==_0x1d47c0(0x860))return _0x37f798[_0x1d47c0(0xa3c)][_0x1d47c0(0x6a1)][_0x1d47c0(0xbd5)][_0x1d47c0(0x826)];else VisuMZ[_0x1d47c0(0xa3c)][_0x1d47c0(0x427)][_0x1d47c0(0x86c)](this,_0x4e34b4);}VisuMZ[_0x1d47c0(0xa3c)][_0x1d47c0(0x413)](_0x4e34b4),VisuMZ[_0x1d47c0(0xa3c)]['Parse_Notetags_Targets'](_0x4e34b4);},VisuMZ['BattleCore'][_0x2d1202(0x542)]=VisuMZ[_0x2d1202(0x542)],VisuMZ[_0x2d1202(0x542)]=function(_0xeece1f){const _0xfb8fa9=_0x2d1202;VisuMZ[_0xfb8fa9(0xa3c)][_0xfb8fa9(0x542)]&&('yZlwy'===_0xfb8fa9(0x5db)?(_0x3e7a14[_0xfb8fa9(0xa3c)]['Window_BattleLog_performCounter'][_0xfb8fa9(0x86c)](this,_0x51d840),this['callNextMethod']()):VisuMZ['BattleCore'][_0xfb8fa9(0x542)][_0xfb8fa9(0x86c)](this,_0xeece1f)),VisuMZ['BattleCore']['Parse_Notetags_Action'](_0xeece1f),VisuMZ[_0xfb8fa9(0xa3c)][_0xfb8fa9(0x9c0)](_0xeece1f);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x496)]=VisuMZ[_0x2d1202(0x496)],VisuMZ[_0x2d1202(0x496)]=function(_0x55aa5d){const _0x269630=_0x2d1202;VisuMZ['BattleCore'][_0x269630(0x496)]&&(_0x269630(0x94f)==='NVZpq'?this[_0x269630(0xb8a)]():VisuMZ['BattleCore'][_0x269630(0x496)][_0x269630(0x86c)](this,_0x55aa5d)),VisuMZ[_0x269630(0xa3c)]['Parse_Notetags_TraitObjects'](_0x55aa5d);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x8df)]=VisuMZ[_0x2d1202(0x8df)],VisuMZ['ParseArmorNotetags']=function(_0x4b397f){const _0x6d35bc=_0x2d1202;if(VisuMZ[_0x6d35bc(0xa3c)][_0x6d35bc(0x8df)]){if(_0x6d35bc(0x279)===_0x6d35bc(0x279))VisuMZ['BattleCore']['ParseArmorNotetags'][_0x6d35bc(0x86c)](this,_0x4b397f);else{const _0x3aaaa9=_0x492ade(_0x2ac38e['$1'])['split'](/[\r\n]+/)[_0x6d35bc(0x9b6)]('');_0xa4bc52[_0x6d35bc(0x476)]=_0x6c345d[_0x6d35bc(0x6d1)](_0x3aaaa9);}}VisuMZ[_0x6d35bc(0xa3c)][_0x6d35bc(0x512)](_0x4b397f);},VisuMZ[_0x2d1202(0xa3c)]['ParseEnemyNotetags']=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x2d1202(0x887)]=function(_0x2a7e11){const _0x4ecf04=_0x2d1202;VisuMZ[_0x4ecf04(0xa3c)]['ParseEnemyNotetags']&&VisuMZ[_0x4ecf04(0xa3c)][_0x4ecf04(0x887)]['call'](this,_0x2a7e11),VisuMZ[_0x4ecf04(0xa3c)][_0x4ecf04(0x512)](_0x2a7e11);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xa61)]=VisuMZ[_0x2d1202(0xa61)],VisuMZ[_0x2d1202(0xa61)]=function(_0x4a5be9){const _0x4c611c=_0x2d1202;VisuMZ[_0x4c611c(0xa3c)][_0x4c611c(0xa61)]&&VisuMZ[_0x4c611c(0xa3c)][_0x4c611c(0xa61)][_0x4c611c(0x86c)](this,_0x4a5be9),VisuMZ[_0x4c611c(0xa3c)]['Parse_Notetags_TraitObjects'](_0x4a5be9);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x413)]=function(_0x3fca46){const _0x2336d5=_0x2d1202,_0x4d5cb5=['PreApplyJS',_0x2336d5(0x2d0),_0x2336d5(0x98a),_0x2336d5(0x9a2),'PreStartActionJS',_0x2336d5(0xafa),_0x2336d5(0x340),_0x2336d5(0x828)];for(const _0xfb0db of _0x4d5cb5){VisuMZ['BattleCore'][_0x2336d5(0x24b)](_0x3fca46,_0xfb0db);}const _0x43a020=_0x3fca46[_0x2336d5(0x5fe)];_0x43a020[_0x2336d5(0xaa0)](/<ALWAYS CRITICAL/i)&&(_0x3fca46['damage'][_0x2336d5(0x737)]=!![]),_0x43a020['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&('GAgLe'!==_0x2336d5(0xaa8)?_0x3fca46['repeats']=Math[_0x2336d5(0x717)](0x1,Number(RegExp['$1'])):(this['processBattleCoreJS'](_0x2336d5(0x8cc)),_0x1c4f8a[_0x2336d5(0xa3c)][_0x2336d5(0x8fc)][_0x2336d5(0x86c)](this),this['processPostBattleCommonEvents'](_0x2336d5(0x1e4)))),_0x43a020[_0x2336d5(0xaa0)](/<TARGET:[ ](.*)>/i)&&(_0x3fca46[_0x2336d5(0x9e3)]=String(RegExp['$1'])[_0x2336d5(0x248)]()[_0x2336d5(0x43b)]());},VisuMZ['BattleCore'][_0x2d1202(0x512)]=function(_0x3e7c12){const _0x43608c=_0x2d1202,_0x142871=[_0x43608c(0x44b),'PostApplyAsUserJS',_0x43608c(0x7f6),_0x43608c(0x5d1),'PreApplyAsTargetJS',_0x43608c(0x55f),'PreDamageAsTargetJS','PostDamageAsTargetJS',_0x43608c(0x8f8),_0x43608c(0xafa),_0x43608c(0x340),'PostEndActionJS',_0x43608c(0xbaa),_0x43608c(0x4c2),_0x43608c(0x75f),_0x43608c(0x1f5),_0x43608c(0x8cc),'BattleDefeatJS',_0x43608c(0x6c6),_0x43608c(0x6cf),_0x43608c(0x3d3),'PostStartTurnJS',_0x43608c(0x86a),'PostEndTurnJS',_0x43608c(0x45d),'PostRegenerateJS'];for(const _0x2143c8 of _0x142871){VisuMZ[_0x43608c(0xa3c)]['createJS'](_0x3e7c12,_0x2143c8);}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x9c0)]=function(_0x37c4f4){const _0x24e644=_0x2d1202,_0x3f3c53=_0x37c4f4[_0x24e644(0x5fe)];if(_0x3f3c53['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x55c1c0=String(RegExp['$1']),_0x40dffb=VisuMZ[_0x24e644(0xa3c)][_0x24e644(0x268)](_0x37c4f4,_0x24e644(0x22f));VisuMZ[_0x24e644(0xa3c)]['createTargetsJS'](_0x55c1c0,_0x40dffb);}if(_0x3f3c53[_0x24e644(0xaa0)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x3642a5=String(RegExp['$1']),_0x4a0b03=VisuMZ[_0x24e644(0xa3c)][_0x24e644(0x268)](_0x37c4f4,'CommandVisible');VisuMZ[_0x24e644(0xa3c)]['createCommandVisibleJS'](_0x3642a5,_0x4a0b03);}},VisuMZ[_0x2d1202(0xa3c)]['JS']={},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x24b)]=function(_0xb64bb2,_0x2c1805){const _0x2dde67=_0x2d1202,_0x53013a=_0xb64bb2['note'];if(_0x53013a['match'](VisuMZ[_0x2dde67(0xa3c)][_0x2dde67(0x480)][_0x2c1805])){const _0x26fef6=RegExp['$1'],_0x3b7193=_0x2dde67(0x3fc)[_0x2dde67(0x995)](_0x26fef6),_0x4a6bdc=VisuMZ['BattleCore'][_0x2dde67(0x268)](_0xb64bb2,_0x2c1805);VisuMZ[_0x2dde67(0xa3c)]['JS'][_0x4a6bdc]=new Function(_0x3b7193);}},VisuMZ[_0x2d1202(0xa3c)]['createKeyJS']=function(_0x1b436d,_0x256858){const _0xf96c81=_0x2d1202;let _0x20a8e9='';if($dataActors[_0xf96c81(0x7c6)](_0x1b436d))_0x20a8e9=_0xf96c81(0x423)[_0xf96c81(0x995)](_0x1b436d['id'],_0x256858);if($dataClasses[_0xf96c81(0x7c6)](_0x1b436d))_0x20a8e9='Class-%1-%2'[_0xf96c81(0x995)](_0x1b436d['id'],_0x256858);if($dataSkills[_0xf96c81(0x7c6)](_0x1b436d))_0x20a8e9='Skill-%1-%2'[_0xf96c81(0x995)](_0x1b436d['id'],_0x256858);if($dataItems[_0xf96c81(0x7c6)](_0x1b436d))_0x20a8e9=_0xf96c81(0x7c3)[_0xf96c81(0x995)](_0x1b436d['id'],_0x256858);if($dataWeapons[_0xf96c81(0x7c6)](_0x1b436d))_0x20a8e9='Weapon-%1-%2'[_0xf96c81(0x995)](_0x1b436d['id'],_0x256858);if($dataArmors['includes'](_0x1b436d))_0x20a8e9='Armor-%1-%2'[_0xf96c81(0x995)](_0x1b436d['id'],_0x256858);if($dataEnemies[_0xf96c81(0x7c6)](_0x1b436d))_0x20a8e9='Enemy-%1-%2'[_0xf96c81(0x995)](_0x1b436d['id'],_0x256858);if($dataStates[_0xf96c81(0x7c6)](_0x1b436d))_0x20a8e9=_0xf96c81(0x224)[_0xf96c81(0x995)](_0x1b436d['id'],_0x256858);return _0x20a8e9;},VisuMZ[_0x2d1202(0xa3c)]['createTargetsJS']=function(_0x1cc50b,_0x3b47b1){const _0x139c7d=_0x2d1202,_0x2eef62=_0x139c7d(0x82d)['format'](_0x1cc50b);VisuMZ[_0x139c7d(0xa3c)]['JS'][_0x3b47b1]=new Function(_0x2eef62);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x4d0)]=function(_0x3dad44,_0x1529d3){const _0x4527c1=_0x2d1202,_0x92db70=_0x4527c1(0xa0a)[_0x4527c1(0x995)](_0x3dad44);VisuMZ[_0x4527c1(0xa3c)]['JS'][_0x1529d3]=new Function(_0x92db70);},TextManager[_0x2d1202(0x1ba)]=VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x6a1)][_0x2d1202(0x732)]['CmdTextAutoBattle'],TextManager[_0x2d1202(0x3d8)]=VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x6a1)][_0x2d1202(0x265)]['StartName'],TextManager[_0x2d1202(0x339)]=VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x6a1)]['AutoBattle']['StyleName'],TextManager[_0x2d1202(0x92c)]=VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x6a1)][_0x2d1202(0x678)][_0x2d1202(0x246)],ColorManager[_0x2d1202(0x23b)]=function(_0x346a50){const _0x32fda4=_0x2d1202;_0x346a50=String(_0x346a50);if(_0x346a50[_0x32fda4(0xaa0)](/#(.*)/i))return _0x32fda4(0x72d)['format'](String(RegExp['$1']));else{if('lSPRx'!=='lSPRx'){if(this[_0x32fda4(0x41e)]!==_0x981a1f)return this[_0x32fda4(0x41e)];return this[_0x32fda4(0x334)](),this[_0x32fda4(0x41e)];}else return this[_0x32fda4(0x5fc)](Number(_0x346a50));}},DataManager[_0x2d1202(0x31a)]=function(_0x2a400d){const _0x2102ae=_0x2d1202;if(_0x2a400d[_0x2102ae(0x5fe)][_0x2102ae(0xaa0)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x42aa73=String(RegExp['$1'])['toUpperCase']()[_0x2102ae(0x43b)]();if(_0x42aa73==='MANUAL')return _0x2102ae(0x9e1);if(VisuMZ[_0x2102ae(0x54d)][_0x42aa73])return _0x42aa73;}const _0x305bcd=VisuMZ[_0x2102ae(0xa3c)][_0x2102ae(0x6a1)][_0x2102ae(0x916)][_0x2102ae(0x3d1)][_0x2102ae(0x248)]()[_0x2102ae(0x43b)]();if(VisuMZ['DamageStyles'][_0x305bcd])return _0x305bcd;return'MANUAL';},DataManager[_0x2d1202(0xabb)]=function(_0x16cd17){const _0x557d74=_0x2d1202;_0x16cd17=_0x16cd17[_0x557d74(0x248)]()[_0x557d74(0x43b)](),this[_0x557d74(0x6e2)]=this[_0x557d74(0x6e2)]||{};if(this[_0x557d74(0x6e2)][_0x16cd17])return this['_stypeIDs'][_0x16cd17];for(let _0x17aa7a=0x1;_0x17aa7a<0x64;_0x17aa7a++){if(!$dataSystem['skillTypes'][_0x17aa7a])continue;let _0x12ed65=$dataSystem[_0x557d74(0xb11)][_0x17aa7a][_0x557d74(0x248)]()[_0x557d74(0x43b)]();_0x12ed65=_0x12ed65[_0x557d74(0x586)](/\x1I\[(\d+)\]/gi,''),_0x12ed65=_0x12ed65[_0x557d74(0x586)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x12ed65]=_0x17aa7a;}return this[_0x557d74(0x6e2)][_0x16cd17]||0x0;},DataManager[_0x2d1202(0xa07)]=function(_0x5493a0){const _0x5bed95=_0x2d1202;_0x5493a0=_0x5493a0['toUpperCase']()['trim'](),this[_0x5bed95(0x1bc)]=this[_0x5bed95(0x1bc)]||{};if(this['_skillIDs'][_0x5493a0])return this[_0x5bed95(0x1bc)][_0x5493a0];for(const _0xbf3ebf of $dataSkills){if('AMivS'===_0x5bed95(0x3e5)){if(!_0xbf3ebf)continue;this[_0x5bed95(0x1bc)][_0xbf3ebf[_0x5bed95(0x476)]['toUpperCase']()[_0x5bed95(0x43b)]()]=_0xbf3ebf['id'];}else{const _0x29b6af=this[_0x5bed95(0xaa1)]()?this['_eventId']:0x0,_0x5596c9=_0xc0a3ea[_0x5bed95(0x7e9)];this[_0x5bed95(0x80f)](_0x5596c9,_0x29b6af),this[_0x5bed95(0x83f)]=_0x2b6050[_0x5bed95(0x1c7)](this['_list']);const _0xb0f3ea={'code':0xbc3,'indent':this['_indent'],'parameters':_0x378f15[_0x5bed95(0x1c7)](_0x537913)};return this[_0x5bed95(0x83f)][_0x5bed95(0x62f)](this[_0x5bed95(0x283)]+0x1,0x0,_0xb0f3ea),!![];}}return this['_skillIDs'][_0x5493a0]||0x0;},DataManager[_0x2d1202(0x880)]=function(_0x3d9820){const _0x43d315=_0x2d1202;_0x3d9820=_0x3d9820[_0x43d315(0x248)]()[_0x43d315(0x43b)](),this[_0x43d315(0x810)]=this['_enemyIDs']||{};if(this['_enemyIDs'][_0x3d9820])return this[_0x43d315(0x810)][_0x3d9820];for(const _0x458b3a of $dataEnemies){if(!_0x458b3a)continue;this['_enemyIDs'][_0x458b3a[_0x43d315(0x476)][_0x43d315(0x248)]()[_0x43d315(0x43b)]()]=_0x458b3a['id'];}return this['_enemyIDs'][_0x3d9820]||0x0;},DataManager['getWtypeIdWithName']=function(_0x592a3b){const _0x318b78=_0x2d1202;_0x592a3b=_0x592a3b[_0x318b78(0x248)]()[_0x318b78(0x43b)](),this[_0x318b78(0x8b0)]=this[_0x318b78(0x8b0)]||{};if(this['_wtypeIDs'][_0x592a3b])return this[_0x318b78(0x8b0)][_0x592a3b];for(let _0x4d7fcb=0x1;_0x4d7fcb<0x64;_0x4d7fcb++){if(!$dataSystem[_0x318b78(0x72c)][_0x4d7fcb])continue;let _0x1c8a17=$dataSystem[_0x318b78(0x72c)][_0x4d7fcb][_0x318b78(0x248)]()['trim']();_0x1c8a17=_0x1c8a17[_0x318b78(0x586)](/\x1I\[(\d+)\]/gi,''),_0x1c8a17=_0x1c8a17['replace'](/\\I\[(\d+)\]/gi,''),this[_0x318b78(0x8b0)][_0x1c8a17]=_0x4d7fcb;}return this['_wtypeIDs'][_0x318b78(0x29d)]=0x0,this[_0x318b78(0x8b0)][_0x592a3b]||0x0;},DataManager[_0x2d1202(0x504)]=function(_0x3fe850){const _0x245dc8=_0x2d1202,_0x5535c1=_0x245dc8(0x577);let _0x585dda=_0x3fe850[_0x245dc8(0x24f)],_0x5af870=_0x3fe850['name'];const _0x518b1c=_0x3fe850[_0x245dc8(0x5fe)];return _0x518b1c['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x585dda=Number(RegExp['$1'])),_0x518b1c[_0x245dc8(0xaa0)](/<DISPLAY TEXT: (.*)>/i)&&(_0x5af870=String(RegExp['$1'])),_0x5535c1[_0x245dc8(0x995)](_0x585dda,_0x5af870);},DataManager[_0x2d1202(0x88b)]=function(_0x4b348e){const _0x29b14d=_0x2d1202;return _0x4b348e[_0x29b14d(0x5fe)][_0x29b14d(0xaa0)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):'GrtCS'===_0x29b14d(0xb65)?_0x4b348e[_0x29b14d(0x476)]:this[_0x29b14d(0xb96)]();},DataManager[_0x2d1202(0x481)]=function(_0x252c06){const _0x31d7b4=_0x2d1202;if(_0x252c06[_0x31d7b4(0x5fe)][_0x31d7b4(0xaa0)](/<COMMAND ICON: (\d+)>/i))return Number(RegExp['$1']);else{if(_0x31d7b4(0xa05)===_0x31d7b4(0x8bd))_0x9b9ee1-=_0x13ee63[_0x31d7b4(0x668)]();else return _0x252c06['iconIndex'];}},DataManager[_0x2d1202(0xa28)]=function(_0xfc86f5){const _0x30cc9b=_0x2d1202,_0x5732bf=$dataEnemies[_0xfc86f5];if(_0x5732bf){if(_0x30cc9b(0x318)===_0x30cc9b(0x4a8))return _0x21c25a['iconIndex'];else{if(_0x5732bf[_0x30cc9b(0x5fe)][_0x30cc9b(0xaa0)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if('hoVuY'===_0x30cc9b(0x4dd)){_0x22810e[_0x30cc9b(0xa3c)][_0x30cc9b(0x73b)][_0x30cc9b(0x86c)](this);if(this[_0x30cc9b(0x379)]&&!_0x20ea56['_subject'])this[_0x30cc9b(0x4fd)]();}else{const _0x3fa353=String(RegExp['$1'])[_0x30cc9b(0x2fd)](/[\r\n]+/)[_0x30cc9b(0x9b6)](''),_0x14d10d=this['processRandomizedData'](_0x3fa353);_0xfc86f5=this[_0x30cc9b(0x880)](_0x14d10d)||_0xfc86f5,_0xfc86f5=DataManager[_0x30cc9b(0xa28)](_0xfc86f5);}}}}return _0xfc86f5;},DataManager[_0x2d1202(0x6d1)]=function(_0x3e0006){const _0x554d5c=_0x2d1202;let _0x393d43=0x0;const _0x2528c1={};for(const _0x5709fb of _0x3e0006){if(_0x5709fb[_0x554d5c(0xaa0)](/(.*):[ ](\d+)/i)){const _0x23a143=String(RegExp['$1'])[_0x554d5c(0x43b)](),_0x28ae78=Number(RegExp['$2']);_0x2528c1[_0x23a143]=_0x28ae78,_0x393d43+=_0x28ae78;}else{if(_0x5709fb[_0x554d5c(0xaa0)](/(.*):[ ](\d+\.?\d+)/i)){if(_0x554d5c(0x5cb)==='dXrjg'){const _0x39ad22=String(RegExp['$1'])[_0x554d5c(0x43b)](),_0x4d3d4c=Number(RegExp['$2']);_0x2528c1[_0x39ad22]=_0x4d3d4c,_0x393d43+=_0x4d3d4c;}else _0x6e0397['BattleCore'][_0x554d5c(0x97c)][_0x554d5c(0x86c)](this),this[_0x554d5c(0x6a4)]();}else _0x5709fb!==''&&(_0x2528c1[_0x5709fb]=0x1,_0x393d43++);}}if(_0x393d43<=0x0)return'';let _0x2fe280=Math['random']()*_0x393d43;for(const _0x327fba in _0x2528c1){_0x2fe280-=_0x2528c1[_0x327fba];if(_0x2fe280<=0x0)return _0x327fba;}return'';},DataManager[_0x2d1202(0x52b)]=function(_0x4c72df){const _0x48d4f7=_0x2d1202;if(!_0x4c72df)return![];if(!VisuMZ[_0x48d4f7(0xa3c)][_0x48d4f7(0x6a1)][_0x48d4f7(0xb3f)]['AutoNotetag'])return![];if(_0x4c72df[_0x48d4f7(0x5fe)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x4c72df['note']['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x45e0ab of _0x4c72df[_0x48d4f7(0x78f)]){if(!_0x45e0ab)continue;if(_0x45e0ab['code']===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x2d1202(0x656)]=function(_0x9c25cb){const _0x4fe9fb=_0x2d1202,_0x2b86b9=$dataTroops[_0x9c25cb];if(!_0x2b86b9)return'';let _0x44e2c8='';_0x44e2c8+=_0x2b86b9['name'];for(const _0x4431db of _0x2b86b9[_0x4fe9fb(0x325)]){if(_0x4fe9fb(0x2d9)===_0x4fe9fb(0x733))_0x13b80c['BattleCore']['JS'][_0x3d65f8][_0x4fe9fb(0x86c)](this,this,this,_0x6303d,0x0);else for(const _0x3b80e6 of _0x4431db[_0x4fe9fb(0x7e9)]){if('FWYEZ'===_0x4fe9fb(0x947))return this[_0x4fe9fb(0x555)](_0x297961[0x0],_0x8f99fc[0x1],_0x52a143=>{const _0x2e4395=_0x4fe9fb;!_0x52a143[_0x2e4395(0x267)]()&&(_0x52a143[_0x2e4395(0x79a)](_0x281859[0x2],_0x207da2[0x3]),_0x113bd9[_0x2e4395(0x79a)](_0x52a143));}),!![];else[0x6c,0x198]['includes'](_0x3b80e6[_0x4fe9fb(0x34e)])&&('lSklA'!==_0x4fe9fb(0x59c)?(_0x44e2c8+='\x0a',_0x44e2c8+=_0x3b80e6[_0x4fe9fb(0xa3e)][0x0]):_0x2d1d9c=_0x25f982);}}return _0x44e2c8;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x2d1202(0x294)]??![],ConfigManager[_0x2d1202(0x75b)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x2d1202(0x92c)]=ConfigManager[_0x2d1202(0x92c)]??!![],VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x67b)]=ConfigManager[_0x2d1202(0x60a)],ConfigManager[_0x2d1202(0x60a)]=function(){const _0x4956ca=_0x2d1202,_0x37672c=VisuMZ[_0x4956ca(0xa3c)][_0x4956ca(0x67b)][_0x4956ca(0x86c)](this);return _0x37672c[_0x4956ca(0x294)]=this[_0x4956ca(0x294)],_0x37672c[_0x4956ca(0x75b)]=this[_0x4956ca(0x75b)],_0x37672c[_0x4956ca(0x92c)]=this[_0x4956ca(0x92c)],_0x37672c;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xb84)]=ConfigManager[_0x2d1202(0x4e2)],ConfigManager[_0x2d1202(0x4e2)]=function(_0x2be61f){const _0x1c561e=_0x2d1202;VisuMZ['BattleCore'][_0x1c561e(0xb84)]['call'](this,_0x2be61f);_0x1c561e(0x294)in _0x2be61f?this[_0x1c561e(0x294)]=_0x2be61f[_0x1c561e(0x294)]:this['autoBattleAtStart']=![];if('autoBattleUseSkills'in _0x2be61f){if(_0x1c561e(0x84b)==='auXoF'){if(!_0x35d3ab['isSceneBattle']())return;if(!this[_0x1c561e(0x22c)]())return;if(_0x2f7507[_0x1c561e(0x1d7)]<=0x0)return;_0x116744=_0x44c91c||{},_0x3b29d0[_0x1c561e(0x5fc)]=_0x162361[_0x1c561e(0x5fc)]||_0x1c561e(0x5b5),_0x18d2d4[_0x1c561e(0x835)]=_0x530288[_0x1c561e(0x835)]||[0x0,0x0,0x0,0x0],_0xc0d457[_0x1c561e(0x337)]=_0x435fdf[_0x1c561e(0x337)]||0x0,this[_0x1c561e(0x22c)]()[_0x1c561e(0x3ad)](_0x4e86bb,_0x167096,_0x1d81f);}else this['autoBattleUseSkills']=_0x2be61f[_0x1c561e(0x75b)];}else this[_0x1c561e(0x75b)]=![];if(_0x1c561e(0x92c)in _0x2be61f){if(_0x1c561e(0x1f1)!=='oFEsu')this[_0x1c561e(0x92c)]=_0x2be61f[_0x1c561e(0x92c)];else{if(!_0x3e96d9[_0x1c561e(0x346)]())return;const _0x3da34a=_0x58f3d8['getLastPluginCommandInterpreter']();if(!_0x3da34a)return;_0x3da34a[_0x1c561e(0x76a)](_0x1c561e(0xa3d));}}else this[_0x1c561e(0x92c)]=!![];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x9af)]=BattleManager[_0x2d1202(0x435)],BattleManager[_0x2d1202(0x435)]=function(){const _0x428d4d=_0x2d1202;VisuMZ[_0x428d4d(0xa3c)][_0x428d4d(0x9af)][_0x428d4d(0x86c)](this),this[_0x428d4d(0x3e2)]=[];},BattleManager[_0x2d1202(0xae8)]=function(){const _0xe35117=_0x2d1202;if(!SceneManager['isSceneBattle']())return;const _0x39fe74=SceneManager[_0xe35117(0xb69)][_0xe35117(0x210)];if(_0x39fe74)_0x39fe74[_0xe35117(0x3a5)]();},BattleManager[_0x2d1202(0x228)]=function(){const _0x222229=_0x2d1202;if(BattleManager[_0x222229(0x768)]())return _0x222229(0x784);return _0x222229(0x686);},BattleManager[_0x2d1202(0x227)]=function(_0x9982cc){const _0x2b8c7c=_0x2d1202;return _0x9982cc=_0x9982cc[_0x2b8c7c(0x248)]()['trim'](),this[_0x2b8c7c(0x228)]()===_0x9982cc;},BattleManager['isDTB']=function(){const _0x21c74f=_0x2d1202;return this['isBattleSys'](_0x21c74f(0x686));},BattleManager['isTurnBased']=function(){const _0x854c5d=_0x2d1202;return this[_0x854c5d(0x852)]();},BattleManager[_0x2d1202(0x827)]=function(){return!this['isTurnBased']();},BattleManager[_0x2d1202(0x6b3)]=function(){const _0x325d63=_0x2d1202;return!this[_0x325d63(0x369)]()&&!this[_0x325d63(0x827)]();},BattleManager[_0x2d1202(0x4a1)]=function(_0x13bcb6){const _0x22b18d=_0x2d1202;$gameParty[_0x22b18d(0x4a1)](_0x13bcb6),$gameTroop[_0x22b18d(0x4a1)](_0x13bcb6);},VisuMZ['BattleCore'][_0x2d1202(0x1e9)]=BattleManager[_0x2d1202(0x2f3)],BattleManager[_0x2d1202(0x2f3)]=function(){const _0x1d98e1=_0x2d1202;this[_0x1d98e1(0x235)]=![],this[_0x1d98e1(0xa84)]=ConfigManager[_0x1d98e1(0x294)],this[_0x1d98e1(0x4a1)](_0x1d98e1(0xbaa)),VisuMZ['BattleCore']['BattleManager_startBattle'][_0x1d98e1(0x86c)](this),this[_0x1d98e1(0x4a1)]('PostStartBattleJS');},BattleManager[_0x2d1202(0xa22)]=function(_0x16c4f7){const _0x38aa57=_0x2d1202,_0x7c51e4=VisuMZ['BattleCore'][_0x38aa57(0x6a1)]['Mechanics'];_0x7c51e4[_0x38aa57(0x463)]&&VisuMZ['BattleCore'][_0x38aa57(0x602)](_0x7c51e4['BattleEndEvent'])&&('vqNCV'===_0x38aa57(0x9d4)?(this[_0x38aa57(0x226)]=_0x58d9e4,this['_animationCount']=-_0x1e4639,this[_0x38aa57(0x3b6)]=_0x4c23cb,this[_0x38aa57(0x987)](),this[_0x38aa57(0x378)]()):$gameTemp[_0x38aa57(0xadb)](_0x7c51e4[_0x38aa57(0x463)]));const _0x218242='%1Event'[_0x38aa57(0x995)](_0x16c4f7);_0x7c51e4[_0x218242]&&VisuMZ['BattleCore'][_0x38aa57(0x602)](_0x7c51e4[_0x218242])&&$gameTemp['reserveCommonEvent'](_0x7c51e4[_0x218242]);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x8fc)]=BattleManager[_0x2d1202(0x9df)],BattleManager[_0x2d1202(0x9df)]=function(){const _0x4aaf9a=_0x2d1202;this[_0x4aaf9a(0x4a1)]('BattleVictoryJS'),VisuMZ[_0x4aaf9a(0xa3c)][_0x4aaf9a(0x8fc)][_0x4aaf9a(0x86c)](this),this['processPostBattleCommonEvents'](_0x4aaf9a(0x1e4));},VisuMZ['BattleCore'][_0x2d1202(0x54b)]=BattleManager[_0x2d1202(0x975)],BattleManager['processDefeat']=function(){const _0x5e557f=_0x2d1202;this[_0x5e557f(0x4a1)]('BattleDefeatJS'),VisuMZ[_0x5e557f(0xa3c)][_0x5e557f(0x54b)][_0x5e557f(0x86c)](this),this['processPostBattleCommonEvents'](_0x5e557f(0x6aa));},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x4cd)]=BattleManager['endBattle'],BattleManager[_0x2d1202(0x256)]=function(_0x23823b){const _0x3b0532=_0x2d1202;this[_0x3b0532(0x235)]=!![],this[_0x3b0532(0xa84)]=![],this[_0x3b0532(0x4a1)](_0x3b0532(0x75f)),VisuMZ[_0x3b0532(0xa3c)][_0x3b0532(0x4cd)][_0x3b0532(0x86c)](this,_0x23823b),this['processBattleCoreJS'](_0x3b0532(0x1f5));},VisuMZ['BattleCore'][_0x2d1202(0x27a)]=BattleManager[_0x2d1202(0x4dc)],BattleManager[_0x2d1202(0x4dc)]=function(){const _0x3bd5b0=_0x2d1202;if(this[_0x3bd5b0(0x369)]())this['processBattleCoreJS'](_0x3bd5b0(0x3d3));VisuMZ[_0x3bd5b0(0xa3c)][_0x3bd5b0(0x27a)][_0x3bd5b0(0x86c)](this);if(this['isTurnBased']())this[_0x3bd5b0(0x4a1)](_0x3bd5b0(0x364));},VisuMZ['BattleCore'][_0x2d1202(0x595)]=BattleManager[_0x2d1202(0x8bf)],BattleManager[_0x2d1202(0x8bf)]=function(){const _0x42bdda=_0x2d1202,_0x8feb8d=this[_0x42bdda(0x403)][_0x42bdda(0x8dd)]();if(_0x8feb8d)_0x8feb8d['actionBattleCoreJS'](_0x42bdda(0x8f8));VisuMZ['BattleCore'][_0x42bdda(0x595)]['call'](this);if(_0x8feb8d)_0x8feb8d[_0x42bdda(0xad7)](_0x42bdda(0xafa));},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xbc5)]=BattleManager[_0x2d1202(0x824)],BattleManager[_0x2d1202(0x824)]=function(){const _0x5ad1df=_0x2d1202,_0x517faa=this[_0x5ad1df(0xa74)];_0x517faa&&_0x517faa['actionBattleCoreJS']('PreEndActionJS'),VisuMZ[_0x5ad1df(0xa3c)][_0x5ad1df(0xbc5)][_0x5ad1df(0x86c)](this),_0x517faa&&_0x517faa[_0x5ad1df(0xad7)]('PostEndActionJS'),this[_0x5ad1df(0x653)](this['allBattleMembers']());},BattleManager['refreshBattlerMotions']=function(_0x22219c){const _0x4c0613=_0x2d1202;for(const _0x52f70e of _0x22219c){if(_0x4c0613(0x3c9)===_0x4c0613(0x3c9)){if(!_0x52f70e)continue;if(!_0x52f70e[_0x4c0613(0x22c)]())continue;_0x52f70e[_0x4c0613(0x22c)]()['refreshMotion']();}else _0xf2c548[_0x4c0613(0x8ec)]['terminate']['call'](this);}},BattleManager[_0x2d1202(0x281)]=function(){const _0x283373=_0x2d1202;!this[_0x283373(0x5d0)][_0x283373(0x623)]()&&this[_0x283373(0x824)]();},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x6fb)]=function(){const _0x506382=_0x2d1202;this[_0x506382(0xb40)]();if(Imported[_0x506382(0x4fa)]){const _0x2a633b=VisuMZ[_0x506382(0x728)][_0x506382(0x6a1)][_0x506382(0xbbe)];_0x2a633b&&_0x2a633b['ActionEndUpdate']===![]&&this[_0x506382(0x79d)](0x1);}else this[_0x506382(0x79d)](0x1);this[_0x506382(0x492)]();},BattleManager['makeEscapeRatio']=function(){const _0x28c716=_0x2d1202;this[_0x28c716(0xb43)]=VisuMZ['BattleCore'][_0x28c716(0x6a1)][_0x28c716(0x51c)][_0x28c716(0x48a)][_0x28c716(0x86c)](this);},VisuMZ['BattleCore'][_0x2d1202(0x843)]=BattleManager[_0x2d1202(0x84c)],BattleManager[_0x2d1202(0x84c)]=function(){const _0x253c29=_0x2d1202;this[_0x253c29(0x4a1)](_0x253c29(0x6c6)),BattleManager[_0x253c29(0x3d2)]['processEscape'](),VisuMZ['BattleCore'][_0x253c29(0x843)][_0x253c29(0x86c)](this),this[_0x253c29(0xa22)](_0x253c29(0x8d7));},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x27b)]=BattleManager[_0x2d1202(0x863)],BattleManager[_0x2d1202(0x863)]=function(){const _0x1eb7c1=_0x2d1202;this[_0x1eb7c1(0x4a1)](_0x1eb7c1(0x6cf));const _0x12ce79=this[_0x1eb7c1(0xb43)];VisuMZ[_0x1eb7c1(0xa3c)]['BattleManager_onEscapeFailure'][_0x1eb7c1(0x86c)](this),this[_0x1eb7c1(0xb43)]=_0x12ce79+VisuMZ['BattleCore']['Settings'][_0x1eb7c1(0x51c)]['CalcEscapeRaiseJS'][_0x1eb7c1(0x86c)](this),this[_0x1eb7c1(0xa22)]('EscapeFail');},BattleManager['displayStartMessages']=function(){const _0x5a5440=_0x2d1202;let _0x27b753=![];if(this['isDisplayEmergedEnemies']()){if('FMEqF'!==_0x5a5440(0x47c))this[_0x5a5440(0xad4)]-=0x10;else for(const _0x5a5d1f of $gameTroop[_0x5a5440(0x627)]()){this[_0x5a5440(0x5d0)][_0x5a5440(0x5c8)](_0x5a5440(0x4ed),TextManager['emerge']['format'](_0x5a5d1f)),this[_0x5a5440(0x5d0)]['push'](_0x5a5440(0x251)),_0x27b753=!![];}}if(this[_0x5a5440(0x66d)])this[_0x5a5440(0x5d0)][_0x5a5440(0x5c8)](_0x5a5440(0x4ed),TextManager[_0x5a5440(0x2b5)][_0x5a5440(0x995)]($gameParty['name']())),this[_0x5a5440(0x5d0)][_0x5a5440(0x5c8)]('wait');else this[_0x5a5440(0xa6f)]&&(this['_logWindow']['push'](_0x5a5440(0x4ed),TextManager['surprise']['format']($gameParty['name']())),this['_logWindow']['push'](_0x5a5440(0x251)));_0x27b753&&(this['_logWindow'][_0x5a5440(0x5c8)](_0x5a5440(0x251)),this[_0x5a5440(0x5d0)][_0x5a5440(0x5c8)]('clear')),this[_0x5a5440(0x768)]()&&this[_0x5a5440(0x233)]()&&(_0x5a5440(0x3a2)!==_0x5a5440(0x2d6)?this[_0x5a5440(0x5dc)]=![]:this[_0x5a5440(0x3c2)](_0x35e038,_0x34a49b,_0x4af38b));},BattleManager['isDisplayEmergedEnemies']=function(){const _0x46a6f3=_0x2d1202;if(BattleManager[_0x46a6f3(0xa84)])return![];return VisuMZ['BattleCore']['Settings'][_0x46a6f3(0x540)][_0x46a6f3(0x412)];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x704)]=BattleManager['startInput'],BattleManager[_0x2d1202(0x309)]=function(){const _0x35d7ea=_0x2d1202;VisuMZ[_0x35d7ea(0xa3c)]['BattleManager_startInput'][_0x35d7ea(0x86c)](this);if(this[_0x35d7ea(0x852)]()&&this['isSkipPartyCommandWindow']()&&!this['_surprise']&&$gameParty[_0x35d7ea(0xa24)]()){if('Boirv'!==_0x35d7ea(0x71c)){const _0x5bb0e0=new _0x33ff7b();_0x5bb0e0[_0x35d7ea(0x834)]=_0x25bbea[_0x35d7ea(0x690)](_0x20efcf[_0x35d7ea(0xbd1)]),_0x5bb0e0['x']=_0x5daef8[_0x35d7ea(0x6fa)]||0x0,_0x5bb0e0['y']=_0x545049['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x35d7ea(0x304)](_0x5bb0e0),this[_0x35d7ea(0x919)]=_0x5bb0e0;}else this['selectNextCommand']();}},BattleManager[_0x2d1202(0x233)]=function(){const _0x3f02f0=_0x2d1202;return VisuMZ['BattleCore']['Settings'][_0x3f02f0(0x732)][_0x3f02f0(0x5ad)];},BattleManager[_0x2d1202(0x4a5)]=function(){const _0x2578e4=_0x2d1202;this[_0x2578e4(0x20d)]()&&this[_0x2578e4(0x7dd)]();},VisuMZ['BattleCore'][_0x2d1202(0x8b8)]=Scene_Battle[_0x2d1202(0x8ec)]['startActorCommandSelection'],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x9e4)]=function(){const _0x5a24c1=_0x2d1202;VisuMZ['BattleCore'][_0x5a24c1(0x8b8)][_0x5a24c1(0x86c)](this),BattleManager[_0x5a24c1(0x768)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x5a24c1(0x5dc)]=![],this['actorCommandCancelTPB']());},BattleManager['invokeMagicReflection']=function(_0xf3fe60,_0x482d11){const _0x5c6eeb=_0x2d1202;this[_0x5c6eeb(0xa74)]['_reflectionTarget']=_0x482d11,this[_0x5c6eeb(0x5d0)]['displayReflection'](_0x482d11),this[_0x5c6eeb(0x5d0)]['displayReflectionPlayBack'](_0xf3fe60,this[_0x5c6eeb(0xa74)]),this[_0x5c6eeb(0xa74)][_0x5c6eeb(0x3da)](_0xf3fe60),this[_0x5c6eeb(0x5d0)][_0x5c6eeb(0x9f7)](_0xf3fe60,_0xf3fe60);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xaf3)]=BattleManager['makeActionOrders'],BattleManager['makeActionOrders']=function(){const _0x25333b=_0x2d1202;VisuMZ[_0x25333b(0xa3c)]['BattleManager_makeActionOrders'][_0x25333b(0x86c)](this),this[_0x25333b(0xaaf)]=this[_0x25333b(0xaaf)]['filter'](_0x235dba=>_0x235dba&&_0x235dba[_0x25333b(0x61b)]());},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x46e)]=BattleManager[_0x2d1202(0x4f6)],BattleManager[_0x2d1202(0x4f6)]=function(_0x44621e){const _0x28d5a0=_0x2d1202;if(this['_phase']===_0x28d5a0(0x55e))this[_0x28d5a0(0xb21)]();else this[_0x28d5a0(0x63f)]===_0x28d5a0(0x79a)?_0x28d5a0(0x31d)===_0x28d5a0(0x31d)?this['updateForceAction']():_0x301030+=_0x417309:VisuMZ['BattleCore'][_0x28d5a0(0x46e)][_0x28d5a0(0x86c)](this,_0x44621e);},BattleManager[_0x2d1202(0x94c)]=function(){const _0x31af3a=_0x2d1202;this[_0x31af3a(0x934)]=this[_0x31af3a(0x913)][_0x31af3a(0x9e9)](0x0),this[_0x31af3a(0x43a)]=0x0,this[_0x31af3a(0x823)]=this[_0x31af3a(0x934)][0x0]||null,this[_0x31af3a(0x63f)]='custom';},BattleManager[_0x2d1202(0xb21)]=function(){const _0x3597f2=_0x2d1202;!this[_0x3597f2(0xa2e)]()&&!this[_0x3597f2(0x5d0)]['isBusy']()&&(this[_0x3597f2(0x63f)]='action');},BattleManager['forceAction']=function(_0x3e7759){const _0x5156a8=_0x2d1202;this[_0x5156a8(0xaaf)][_0x5156a8(0x9b6)](_0x3e7759);if(_0x3e7759===this[_0x5156a8(0x403)])return;const _0x46131e=JsonEx['makeDeepCopy'](_0x3e7759[_0x5156a8(0x8dd)]());this['_forcedBattlers'][_0x5156a8(0x5c8)]([_0x3e7759,_0x46131e]);},BattleManager[_0x2d1202(0xbc2)]=function(){},BattleManager[_0x2d1202(0x34f)]=function(){const _0x51bda7=_0x2d1202;if(this['isTpb']())_0x51bda7(0x220)!==_0x51bda7(0xb0e)?this[_0x51bda7(0x63f)]='turn':this['_escapeRatio']=_0x4a8f16[_0x51bda7(0xa3c)][_0x51bda7(0x6a1)]['Mechanics'][_0x51bda7(0x48a)][_0x51bda7(0x86c)](this);else this['_forcedBattlers']['length']>0x0?this['_phase']=_0x51bda7(0x7d6):this[_0x51bda7(0x309)]();},BattleManager[_0x2d1202(0x6e4)]=function(){const _0x22f57a=_0x2d1202,_0x207957=this[_0x22f57a(0x403)];_0x207957&&this[_0x22f57a(0x768)]()&&_0x207957[_0x22f57a(0x9f5)]('undecided');for(;;){const _0x191cad=this[_0x22f57a(0x870)]();if(!_0x191cad)return null;if(_0x191cad[_0x22f57a(0x320)]()&&_0x191cad[_0x22f57a(0xb23)]())return _0x191cad;}},BattleManager[_0x2d1202(0x870)]=function(){const _0x3241d2=_0x2d1202;if(this[_0x3241d2(0x3e2)][_0x3241d2(0x1d7)]>0x0){const _0xf508a5=this['_forcedBattlers'][_0x3241d2(0x9c8)](),_0x529ff3=_0xf508a5[0x0];return _0x529ff3[_0x3241d2(0x1c6)]=_0x529ff3['_actions']||[],_0x529ff3[_0x3241d2(0x1c6)][0x0]=_0xf508a5[0x1],_0x529ff3;}else return this[_0x3241d2(0xaaf)]['shift']();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x7c5)]=Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x79a)],Game_Battler['prototype'][_0x2d1202(0x79a)]=function(_0x4addf4,_0x1dc014){const _0x396191=_0x2d1202;VisuMZ[_0x396191(0xa3c)][_0x396191(0x7c5)][_0x396191(0x86c)](this,_0x4addf4,_0x1dc014),this['_actions'][this[_0x396191(0x1c6)]['length']-0x1]['_forceAction']=!![];},Game_Interpreter[_0x2d1202(0x8ec)]['command339']=function(_0x327198){const _0xf74724=_0x2d1202;return this[_0xf74724(0x555)](_0x327198[0x0],_0x327198[0x1],_0x263799=>{const _0x29b40b=_0xf74724;_0x29b40b(0x876)!==_0x29b40b(0x876)?_0x21f051[_0x29b40b(0x5c8)](_0x4a1131(_0x5df191['$1'])):!_0x263799[_0x29b40b(0x267)]()&&(_0x263799[_0x29b40b(0x79a)](_0x327198[0x2],_0x327198[0x3]),BattleManager[_0x29b40b(0x79a)](_0x263799));}),!![];},VisuMZ['BattleCore'][_0x2d1202(0x404)]=Game_Battler['prototype'][_0x2d1202(0x3bb)],Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x3bb)]=function(){const _0x5da509=_0x2d1202;VisuMZ['BattleCore']['Game_Battler_makeSpeed'][_0x5da509(0x86c)](this),this['_actions']['length']<=0x0&&(this[_0x5da509(0x874)]=Number[_0x5da509(0x596)]);},VisuMZ[_0x2d1202(0xa3c)]['BattleManager_selectNextCommand']=BattleManager[_0x2d1202(0x7dd)],BattleManager[_0x2d1202(0x7dd)]=function(){const _0xeb4807=_0x2d1202;this[_0xeb4807(0x768)]()?this[_0xeb4807(0x962)]():VisuMZ[_0xeb4807(0xa3c)]['BattleManager_selectNextCommand'][_0xeb4807(0x86c)](this);},BattleManager['selectNextCommandTpb']=function(){const _0x29fbfa=_0x2d1202;if(this[_0x29fbfa(0x545)]){if(this[_0x29fbfa(0x545)]['selectNextCommand']())return;this[_0x29fbfa(0x90b)](),this[_0x29fbfa(0x1f4)](),!this['_subject']&&!this[_0x29fbfa(0x545)]&&SceneManager[_0x29fbfa(0xb69)][_0x29fbfa(0x8f7)]();}else!this[_0x29fbfa(0x403)]&&(_0x29fbfa(0x750)!==_0x29fbfa(0x750)?_0x418b78[_0x29fbfa(0x9ef)]?_0x57006b[_0x29fbfa(0x418)]([this],_0x4d69b4):_0x2b6409[_0x29fbfa(0x872)]([this],_0xfbce4e):this[_0x29fbfa(0x1d1)]());},BattleManager[_0x2d1202(0x1f4)]=function(){const _0x23fd79=_0x2d1202;if(!this[_0x23fd79(0x20d)]()||this['needsActorInputCancel']()){if(_0x23fd79(0x689)===_0x23fd79(0x335)){if(!_0x28829c[_0x23fd79(0x346)]())return;const _0x21f0d5=_0x463a0b[_0x23fd79(0x5d0)];_0x21f0d5['pushBaseLine']();}else{if(this['_tpbSceneChangeCacheActor']){if(_0x23fd79(0x487)===_0x23fd79(0x2db))return _0x4cf0a2[_0x23fd79(0xa3c)][_0x23fd79(0x6a1)][_0x23fd79(0x265)][_0x23fd79(0x89e)];else!$gameParty[_0x23fd79(0x3b2)]()[_0x23fd79(0x7c6)](this[_0x23fd79(0x675)])&&(this[_0x23fd79(0x675)]=null);}!this[_0x23fd79(0x675)]?(this[_0x23fd79(0xa58)](),this['_currentActor']=null,this[_0x23fd79(0x751)]=![]):this['revertTpbCachedActor']();}}},BattleManager['revertTpbCachedActor']=function(){const _0x295097=_0x2d1202;if(!$gameParty[_0x295097(0x3b2)]()[_0x295097(0x7c6)](this[_0x295097(0x675)])){if(_0x295097(0x72f)!==_0x295097(0xb18))this[_0x295097(0x675)]=null;else{if(_0x20c316[_0x295097(0x8fb)](_0x3d8acd))return!![];return![];}}this['_tpbSceneChangeCacheActor']?_0x295097(0x7a0)===_0x295097(0x7f9)?(this['processBattleCoreJS'](_0x295097(0x86a)),_0x4d7359[_0x295097(0xa3c)][_0x295097(0x8bc)][_0x295097(0x86c)](this),this[_0x295097(0x4a1)](_0x295097(0x5e8))):(this[_0x295097(0x545)]=this[_0x295097(0x675)],this[_0x295097(0x545)][_0x295097(0x4eb)]=_0x295097(0x257),this[_0x295097(0x751)]=!![],this[_0x295097(0x675)]=null):(this['cancelActorInput'](),this[_0x295097(0x545)]=null,this[_0x295097(0x751)]=![]);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x756)]=BattleManager[_0x2d1202(0x288)],BattleManager['isTpbMainPhase']=function(){const _0x21d446=_0x2d1202;if(this[_0x21d446(0x63f)]===_0x21d446(0x55e))return this[_0x21d446(0x8f0)]();else{if(_0x21d446(0x2cd)!==_0x21d446(0x278))return VisuMZ[_0x21d446(0xa3c)][_0x21d446(0x756)][_0x21d446(0x86c)](this);else _0x335c65[_0x21d446(0x834)]=_0x25a160[_0x21d446(0x546)](_0x4f95a4);}},BattleManager[_0x2d1202(0x8f0)]=function(){const _0x3d1d1b=_0x2d1202;return this[_0x3d1d1b(0x510)]();},VisuMZ['BattleCore'][_0x2d1202(0x245)]=BattleManager['cancelActorInput'],BattleManager['cancelActorInput']=function(){const _0x4a25f7=_0x2d1202;this[_0x4a25f7(0x768)]()&&this[_0x4a25f7(0x63f)]===_0x4a25f7(0x1df)&&(this['_currentActor']=null),VisuMZ[_0x4a25f7(0xa3c)]['BattleManager_cancelActorInput']['call'](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x8eb)]=BattleManager['inputtingAction'],BattleManager[_0x2d1202(0x5ac)]=function(){const _0x21cdae=_0x2d1202,_0x3dd2ed=this[_0x21cdae(0x545)];if(_0x3dd2ed&&!_0x3dd2ed['inputtingAction']()){const _0x4286d4=_0x3dd2ed[_0x21cdae(0x396)];_0x3dd2ed['_actions'][_0x4286d4]=new Game_Action(_0x3dd2ed);}return VisuMZ['BattleCore'][_0x21cdae(0x8eb)][_0x21cdae(0x86c)](this);},SceneManager['isSceneBattle']=function(){const _0x8d28d7=_0x2d1202;return this['_scene']&&this[_0x8d28d7(0xb69)][_0x8d28d7(0x276)]===Scene_Battle;},SceneManager[_0x2d1202(0x52d)]=function(){const _0x3ae0a5=_0x2d1202;return Spriteset_Battle['prototype'][_0x3ae0a5(0x5ee)]();},SceneManager[_0x2d1202(0x60c)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x30a5fc=_0x2d1202;if(SceneManager[_0x30a5fc(0x9ba)](Scene_Options))return!![];return![];},VisuMZ['BattleCore'][_0x2d1202(0x747)]=Game_Temp[_0x2d1202(0x8ec)][_0x2d1202(0x872)],Game_Temp[_0x2d1202(0x8ec)][_0x2d1202(0x872)]=function(_0x394e79,_0x51f0c3,_0x56f467){const _0x319a3c=_0x2d1202;_0x394e79=_0x394e79[_0x319a3c(0xb5f)]((_0x220158,_0xbf41cf,_0x115a4e)=>_0x115a4e[_0x319a3c(0x783)](_0x220158)===_0xbf41cf),SceneManager[_0x319a3c(0x346)]()&&SceneManager[_0x319a3c(0x52d)]()&&(_0x56f467=!_0x56f467),VisuMZ['BattleCore'][_0x319a3c(0x747)][_0x319a3c(0x86c)](this,_0x394e79,_0x51f0c3,_0x56f467),SceneManager[_0x319a3c(0x346)]()&&BattleManager[_0x319a3c(0x3d2)][_0x319a3c(0x65b)]();},Game_Temp[_0x2d1202(0x8ec)]['setLastPluginCommandInterpreter']=function(_0x25ad1f){const _0x52f6e5=_0x2d1202;this[_0x52f6e5(0x30e)]=_0x25ad1f;},Game_Temp[_0x2d1202(0x8ec)][_0x2d1202(0xa20)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x2d1202(0x8ec)][_0x2d1202(0x95d)]=function(){const _0x1a8e8d=_0x2d1202;this[_0x1a8e8d(0x88e)]=undefined;},Game_Temp[_0x2d1202(0x8ec)][_0x2d1202(0x90c)]=function(_0x4398e2){const _0x4cd766=_0x2d1202;$gameMap&&$dataMap&&$dataMap[_0x4cd766(0x5fe)]&&this[_0x4cd766(0x7be)]($dataMap[_0x4cd766(0x5fe)]);const _0x2c1420=$dataTroops[_0x4398e2];if(_0x2c1420){let _0x2ae64c=DataManager[_0x4cd766(0x656)](_0x2c1420['id']);this[_0x4cd766(0x7be)](_0x2ae64c);}},Game_Temp[_0x2d1202(0x8ec)][_0x2d1202(0x7be)]=function(_0x553218){const _0x3dcd0c=_0x2d1202;if(!_0x553218)return;if(_0x553218[_0x3dcd0c(0xaa0)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if(_0x3dcd0c(0x889)!==_0x3dcd0c(0x889))this[_0x3dcd0c(0x6b7)][_0x3dcd0c(0x2d3)](this[_0x3dcd0c(0x646)]),this['_partyCommandWindow'][_0x3dcd0c(0x2d3)](this[_0x3dcd0c(0x646)]);else{const _0x4071d2=String(RegExp['$1']);if(_0x4071d2[_0x3dcd0c(0xaa0)](/DEFAULT/i)){if(_0x3dcd0c(0xa7d)==='OYoFI')return _0x2aa27d[_0x3dcd0c(0xb5f)](_0x10c9dd=>_0x10c9dd!==_0x3cff68&&!_0x3dab1d[_0x3dcd0c(0x7c6)](_0x10c9dd)&&_0x10c9dd[_0x3dcd0c(0x4c4)]());else this['_forcedBattleLayout']=_0x3dcd0c(0x376);}else{if(_0x4071d2[_0x3dcd0c(0xaa0)](/LIST/i)){if('xVjfV'===_0x3dcd0c(0x652))return _0x274590[_0x3dcd0c(0xb0a)];else this[_0x3dcd0c(0x88e)]=_0x3dcd0c(0x7e9);}else{if(_0x4071d2['match'](/XP/i))this[_0x3dcd0c(0x88e)]='xp';else{if(_0x4071d2['match'](/PORTRAIT/i))this['_forcedBattleLayout']=_0x3dcd0c(0x682);else{if(_0x4071d2[_0x3dcd0c(0xaa0)](/BORDER/i))this[_0x3dcd0c(0x88e)]=_0x3dcd0c(0xb81);else{if(_0x4071d2['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(_0x3dcd0c(0x536)===_0x3dcd0c(0xa8a)){if(!_0x1f1863[_0x3dcd0c(0x1fd)]()&&this['constructor']===_0x101a0d){const _0x41eb67=_0x51490c[_0x3dcd0c(0x8ec)][_0x3dcd0c(0xbdc)]();[_0x3dcd0c(0x376),_0x3dcd0c(0x7e9),_0x3dcd0c(0x682),_0x3dcd0c(0xb81)][_0x3dcd0c(0x7c6)](_0x41eb67)&&(this[_0x3dcd0c(0xad4)]=0x0);}}else Imported[_0x3dcd0c(0xa55)]?this[_0x3dcd0c(0x88e)]=_0x3dcd0c(0x549):this['_forcedBattleLayout']=_0x3dcd0c(0x376);}}}}}}}}},VisuMZ['BattleCore'][_0x2d1202(0x40c)]=Game_System[_0x2d1202(0x8ec)]['initialize'],Game_System[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)]=function(){const _0x47732a=_0x2d1202;VisuMZ[_0x47732a(0xa3c)]['Game_System_initialize'][_0x47732a(0x86c)](this),this[_0x47732a(0x634)]();},Game_System[_0x2d1202(0x8ec)]['initBattleCore']=function(){const _0x2739d6=_0x2d1202;this[_0x2739d6(0x70a)]=this[_0x2739d6(0x70a)]||[];},Game_System[_0x2d1202(0x8ec)][_0x2d1202(0x894)]=function(){const _0x387aa8=_0x2d1202;if(this[_0x387aa8(0x70a)]===undefined)this[_0x387aa8(0x634)]();return this[_0x387aa8(0x70a)];},Game_System[_0x2d1202(0x8ec)][_0x2d1202(0xb39)]=function(_0x547f2d){const _0x527731=_0x2d1202;if(this[_0x527731(0x70a)]===undefined)this[_0x527731(0x634)]();if(!_0x547f2d)return;if(this[_0x527731(0x70a)][_0x527731(0x7c6)](_0x547f2d))return;this[_0x527731(0x70a)][_0x527731(0x5c8)](_0x547f2d),this[_0x527731(0x70a)][_0x527731(0xbbb)]((_0x50c27d,_0x54461e)=>_0x50c27d-_0x54461e);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xacd)]=Game_BattlerBase[_0x2d1202(0x8ec)]['addNewState'],Game_BattlerBase[_0x2d1202(0x8ec)]['addNewState']=function(_0x1a6034){const _0x1ceb34=_0x2d1202,_0x69ea31=this[_0x1ceb34(0xb23)](),_0x5cc76f=this['stateMotionIndex']();VisuMZ['BattleCore'][_0x1ceb34(0xacd)]['call'](this,_0x1a6034);if(this['isEnemy']()&&_0x69ea31&&this['isDead']()){if(_0x1ceb34(0x250)!=='hKlvl')this[_0x1ceb34(0x739)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x1ceb34(0xb39)](this[_0x1ceb34(0x85e)]());else return this[_0x1ceb34(0xb7b)]()?_0xbcc083[_0x1ceb34(0xa3c)][_0x1ceb34(0x6a1)][_0x1ceb34(0x97d)][_0x1ceb34(0x474)]:_0x230185['BattleCore'][_0x1ceb34(0x6a1)][_0x1ceb34(0x540)][_0x1ceb34(0x474)];}SceneManager[_0x1ceb34(0x346)]()&&_0x5cc76f!==this[_0x1ceb34(0x336)]()&&(this[_0x1ceb34(0x22c)]()&&this[_0x1ceb34(0x22c)]()[_0x1ceb34(0x589)]());},Game_Enemy[_0x2d1202(0x8ec)]['hasBeenDefeatedBefore']=function(){const _0x46ae09=_0x2d1202;return $gameSystem[_0x46ae09(0x894)]()[_0x46ae09(0x7c6)](this[_0x46ae09(0x676)]);},VisuMZ[_0x2d1202(0xa3c)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x2d1202(0x8ec)]['eraseState'],Game_BattlerBase['prototype']['eraseState']=function(_0x33e70e){const _0x16f883=_0x2d1202;VisuMZ['BattleCore'][_0x16f883(0x67e)][_0x16f883(0x86c)](this,_0x33e70e),this[_0x16f883(0xad8)]()&&_0x33e70e===this[_0x16f883(0x803)]()&&this[_0x16f883(0xb23)]()&&(this[_0x16f883(0x739)]=![]),!this[_0x16f883(0x8d4)]&&!this[_0x16f883(0x7cc)]&&SceneManager['isSceneBattle']()&&this[_0x16f883(0xb83)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x1d6)]=Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x932)],Game_Action[_0x2d1202(0x8ec)]['clear']=function(){const _0x5ef458=_0x2d1202;VisuMZ[_0x5ef458(0xa3c)][_0x5ef458(0x1d6)][_0x5ef458(0x86c)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x5ef458(0x817)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x5ef458(0x8e8)]=_0x5ef458(0x376);},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x37c)]=function(_0x5d26ca,_0xf7ce77){const _0xf5b8ca=_0x2d1202;return VisuMZ[_0xf5b8ca(0xa3c)][_0xf5b8ca(0x6a1)]['Damage']['OverallFormulaJS']['call'](this,_0x5d26ca,_0xf7ce77);},Game_Action[_0x2d1202(0x8ec)]['applyVariance']=function(_0x2a7de2,_0x3306c7){const _0x5c9b9f=_0x2d1202;return VisuMZ[_0x5c9b9f(0xa3c)][_0x5c9b9f(0x6a1)][_0x5c9b9f(0x916)][_0x5c9b9f(0xb33)][_0x5c9b9f(0x86c)](this,_0x2a7de2,_0x3306c7);},Game_Action[_0x2d1202(0x8ec)]['applyGuard']=function(_0x38f555,_0xe231cb){const _0xa9ff81=_0x2d1202;return VisuMZ['BattleCore'][_0xa9ff81(0x6a1)][_0xa9ff81(0x916)][_0xa9ff81(0x31f)]['call'](this,_0x38f555,_0xe231cb);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x1c5)]=Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x7fe)],Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x7fe)]=function(_0x85a64c){const _0xf8a321=_0x2d1202,_0x865aed=this['item']()[_0xf8a321(0x5fe)];if(_0x865aed[_0xf8a321(0xaa0)](/<ALWAYS HIT>/i)){if(_0xf8a321(0x90a)===_0xf8a321(0x2c5))_0x260c74['BattleCore']['Spriteset_Battle_updateActors'][_0xf8a321(0x86c)](this),this[_0xf8a321(0x3d0)]();else return 0x1;}else{if(_0x865aed[_0xf8a321(0xaa0)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0xf8a321(0x32d)!=='kmjnU')this['_svBattlerSprite'][_0xf8a321(0x891)]['scale']['x']=-0x1/(this[_0xf8a321(0x1de)]['x']||0.001),this['_svBattlerSprite'][_0xf8a321(0x891)][_0xf8a321(0x1de)]['y']=0x1/(this['scale']['y']||0.001);else return Number(RegExp['$1'])/0x64;}else{let _0x3de6b7=VisuMZ[_0xf8a321(0xa3c)][_0xf8a321(0x1c5)][_0xf8a321(0x86c)](this,_0x85a64c);return _0x3de6b7=this[_0xf8a321(0x817)][_0xf8a321(0x5a9)]*_0x3de6b7+this[_0xf8a321(0x817)][_0xf8a321(0xb2c)],_0x3de6b7;}}},Game_Action[_0x2d1202(0x8ec)]['itemCri']=function(_0x2bfbae){const _0x2bfb2e=_0x2d1202;if(!this[_0x2bfb2e(0x36f)]()[_0x2bfb2e(0x26a)]['critical'])return 0x0;let _0xa5d437=VisuMZ[_0x2bfb2e(0xa3c)][_0x2bfb2e(0x6a1)][_0x2bfb2e(0x916)][_0x2bfb2e(0x4e0)][_0x2bfb2e(0x86c)](this,_0x2bfbae);return _0xa5d437=this[_0x2bfb2e(0x817)][_0x2bfb2e(0xaf2)]*_0xa5d437+this[_0x2bfb2e(0x817)][_0x2bfb2e(0x8b5)],_0xa5d437;},Game_Action['prototype'][_0x2d1202(0x74b)]=function(_0x32f510){const _0x8b4d9e=_0x2d1202;return _0x32f510=VisuMZ['BattleCore']['Settings'][_0x8b4d9e(0x916)][_0x8b4d9e(0x5e1)]['call'](this,_0x32f510),_0x32f510=this[_0x8b4d9e(0x817)][_0x8b4d9e(0xb45)]*_0x32f510+this['_multipliers'][_0x8b4d9e(0x395)],_0x32f510;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x544)]=Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x597)],Game_Action[_0x2d1202(0x8ec)]['evalDamageFormula']=function(_0xcc8201){const _0x3c0b5a=_0x2d1202;if(this[_0x3c0b5a(0x8e8)]!==_0x3c0b5a(0x376))return this[_0x3c0b5a(0xad3)](_0xcc8201);else{if(DataManager[_0x3c0b5a(0x31a)](this[_0x3c0b5a(0x36f)]())===_0x3c0b5a(0x9e1)){if(_0x3c0b5a(0x432)!==_0x3c0b5a(0x432)){if(_0x24ae92>_0x3e444a[_0x3c0b5a(0x99a)])_0x1ea57c=![];if(_0x31753e<_0x3b1686[_0x3c0b5a(0x99a)])_0x57d1f8=!![];}else return VisuMZ[_0x3c0b5a(0xa3c)]['Game_Action_evalDamageFormula'][_0x3c0b5a(0x86c)](this,_0xcc8201);}else return this[_0x3c0b5a(0x702)](_0xcc8201);}},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x9b2)]=function(_0x223ef6){const _0x162879=_0x2d1202;this[_0x162879(0x8e8)]=_0x223ef6;},Game_Action['prototype'][_0x2d1202(0xad3)]=function(_0x3a2613){const _0x1dfc47=_0x2d1202,_0x6aa51f=this[_0x1dfc47(0x36f)](),_0x20c3e6=_0x6aa51f[_0x1dfc47(0x26a)]['formula'];_0x6aa51f[_0x1dfc47(0x26a)]['formula']=this[_0x1dfc47(0x8e8)];let _0x4f7726=VisuMZ[_0x1dfc47(0xa3c)][_0x1dfc47(0x544)]['call'](this,_0x3a2613);return _0x6aa51f[_0x1dfc47(0x26a)][_0x1dfc47(0x71f)]=_0x20c3e6,_0x4f7726;},Game_Action[_0x2d1202(0x8ec)]['damageStyle']=function(){const _0x408a74=_0x2d1202;if(this[_0x408a74(0x36f)]()[_0x408a74(0x5fe)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x408a74(0x794)===_0x408a74(0x794)){const _0x5c9d91=String(RegExp['$1'])['toUpperCase']()['trim']();return _0x5c9d91;}else this[_0x408a74(0x842)](),this[_0x408a74(0xb1f)]=![],_0x19611b[_0x408a74(0xaee)]();}return _0x408a74(0x9e1);},Game_Action[_0x2d1202(0x8ec)]['evalDamageFormulaBattleCore']=function(_0x4ae6b8){const _0x52b813=_0x2d1202,_0x33ddcc=DataManager[_0x52b813(0x31a)](this[_0x52b813(0x36f)]()),_0x51177f=VisuMZ['DamageStyles'][_0x33ddcc];try{return _0x52b813(0xa37)==='IWbiS'?_0x3e512a[_0x52b813(0x789)]&&_0x228e2b[_0x52b813(0x23e)][_0x52b813(0x7c6)]('['+_0x7d70be+']'):_0x51177f[_0x52b813(0x2c1)][_0x52b813(0x86c)](this,_0x4ae6b8);}catch(_0x5a2163){if($gameTemp['isPlaytest']())console[_0x52b813(0x2da)](_0x5a2163);return VisuMZ['BattleCore']['Game_Action_evalDamageFormula'][_0x52b813(0x86c)](this);}},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x8e3)]=function(_0x1a7dee,_0x1018d7){const _0x2d6320=_0x2d1202;if(this[_0x2d6320(0x292)]())return _0x1018d7;const _0x3a1a0d=this[_0x2d6320(0x229)](),_0x9811bb=_0x1a7dee;let _0x17543d=[],_0x37f199=[];_0x17543d[_0x2d6320(0x5c8)](this['_armorPenetration'][_0x2d6320(0x286)],this[_0x2d6320(0x3d7)]['arRedFlat']),_0x37f199[_0x2d6320(0x5c8)](this['_armorPenetration']['arPenRate'],this['_armorPenetration'][_0x2d6320(0x786)]);const _0x57f057=this[_0x2d6320(0x4ef)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5b2c3b=this[_0x2d6320(0x4ef)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x3c0916=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x48e060=this[_0x2d6320(0x4ef)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x17543d=_0x17543d['concat'](_0x9811bb[_0x2d6320(0x311)]()['map'](_0x31342a=>_0x31342a&&_0x31342a[_0x2d6320(0x5fe)][_0x2d6320(0xaa0)](_0x57f057)?Number(RegExp['$1']):0x0)),_0x37f199=_0x37f199['concat'](_0x9811bb[_0x2d6320(0x311)]()[_0x2d6320(0x64c)](_0x23591d=>_0x23591d&&_0x23591d['note'][_0x2d6320(0xaa0)](_0x5b2c3b)?Number(RegExp['$1'])/0x64:0x0)),_0x17543d=_0x17543d[_0x2d6320(0x8d2)](_0x3a1a0d['traitObjects']()[_0x2d6320(0x64c)](_0xca12d1=>_0xca12d1&&_0xca12d1['note'][_0x2d6320(0xaa0)](_0x3c0916)?Number(RegExp['$1']):0x0)),_0x37f199=_0x37f199[_0x2d6320(0x8d2)](_0x3a1a0d[_0x2d6320(0x311)]()[_0x2d6320(0x64c)](_0x3981e4=>_0x3981e4&&_0x3981e4[_0x2d6320(0x5fe)][_0x2d6320(0xaa0)](_0x48e060)?Number(RegExp['$1'])/0x64:0x0));if(this['item']()['note']['match'](_0x3c0916)){if(_0x2d6320(0x466)!=='cHpZs')_0x17543d[_0x2d6320(0x5c8)](Number(RegExp['$1']));else{if(_0x131d2b[_0x2d6320(0x768)]())return _0x2d6320(0x784);return'DTB';}}return this[_0x2d6320(0x36f)]()[_0x2d6320(0x5fe)][_0x2d6320(0xaa0)](_0x48e060)&&_0x37f199[_0x2d6320(0x5c8)](Number(RegExp['$1'])),_0x1018d7=_0x17543d[_0x2d6320(0x8ba)]((_0x488424,_0x2e2d9a)=>_0x488424-_0x2e2d9a,_0x1018d7),_0x1018d7>0x0&&(_0x2d6320(0x2ce)===_0x2d6320(0x347)?_0x3eb3cf[_0x2d6320(0x403)][_0x2d6320(0x30d)]()[_0x2d6320(0xa54)](_0x1672bb):_0x1018d7=_0x37f199['reduce']((_0x4b6a45,_0x57c5f5)=>_0x4b6a45*(0x1-_0x57c5f5),_0x1018d7)),_0x1018d7;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x952)]=Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x81a)],Game_Action[_0x2d1202(0x8ec)]['executeDamage']=function(_0x425a16,_0x292dd1){const _0x3e382d=_0x2d1202;_0x292dd1=_0x292dd1*this[_0x3e382d(0x817)][_0x3e382d(0x2de)],_0x292dd1+=this[_0x3e382d(0x817)]['damageFlat']*(_0x292dd1>=0x0?0x1:-0x1),_0x292dd1=this[_0x3e382d(0x86d)](_0x3e382d(0xa4e),_0x425a16,_0x292dd1,![]),_0x292dd1=this[_0x3e382d(0x948)](_0x292dd1),_0x292dd1=Math[_0x3e382d(0x4b4)](_0x292dd1),this[_0x3e382d(0x417)]=_0x292dd1,this[_0x3e382d(0x2f6)]=this[_0x3e382d(0x2f6)]||0x0,this[_0x3e382d(0x2f6)]+=_0x292dd1,VisuMZ[_0x3e382d(0xa3c)]['Game_Action_executeDamage'][_0x3e382d(0x86c)](this,_0x425a16,_0x292dd1),this[_0x3e382d(0x86d)](_0x3e382d(0xb8d),_0x425a16,_0x292dd1,!![]);},Game_Action['prototype'][_0x2d1202(0x948)]=function(_0x174af4){const _0x549657=_0x2d1202;if(this['isBypassDamageCap']())return _0x174af4;return _0x174af4=this['applySoftDamageCap'](_0x174af4),_0x174af4=this[_0x549657(0x2c3)](_0x174af4),_0x174af4;},Game_Action['prototype'][_0x2d1202(0x912)]=function(){const _0x1b1a94=_0x2d1202,_0x1fc953=/<BYPASS DAMAGE CAP>/i;if(this[_0x1b1a94(0x36f)]()[_0x1b1a94(0x5fe)][_0x1b1a94(0xaa0)](_0x1fc953))return!![];if(this[_0x1b1a94(0x229)]()[_0x1b1a94(0x311)]()[_0x1b1a94(0x3eb)](_0x2d5321=>_0x2d5321&&_0x2d5321[_0x1b1a94(0x5fe)][_0x1b1a94(0xaa0)](_0x1fc953)))return!![];return!VisuMZ[_0x1b1a94(0xa3c)][_0x1b1a94(0x6a1)]['Damage']['EnableDamageCap'];},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x372)]=function(_0x393d2c){const _0x23db3a=_0x2d1202;if(!VisuMZ[_0x23db3a(0xa3c)][_0x23db3a(0x6a1)][_0x23db3a(0x916)]['EnableSoftCap'])return _0x393d2c;const _0x445fd9=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()['note']['match'](_0x445fd9))return!![];if(this[_0x23db3a(0x229)]()[_0x23db3a(0x311)]()[_0x23db3a(0x3eb)](_0x4102f6=>_0x4102f6&&_0x4102f6[_0x23db3a(0x5fe)][_0x23db3a(0xaa0)](_0x445fd9)))return!![];const _0x27f953=_0x393d2c<0x0?-0x1:0x1;_0x393d2c=Math['abs'](_0x393d2c);let _0xd2fdf2=this['subject']()[_0x23db3a(0x88a)]();if(this[_0x23db3a(0x36f)]()[_0x23db3a(0x5fe)][_0x23db3a(0xaa0)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)){if('IIRTd'===_0x23db3a(0x89d)){if(!this[_0x23db3a(0x216)]())return;const _0x835449=this[_0x23db3a(0x8cd)](),_0x2e01ba=_0x26d76f['BattleCore']['Settings'][_0x23db3a(0x732)][_0x23db3a(0x366)],_0x417909=_0x835449===_0x23db3a(0x69d)?_0x784918[_0x23db3a(0x1ba)]:_0x23db3a(0x577)[_0x23db3a(0x995)](_0x2e01ba,_0x564e99[_0x23db3a(0x1ba)]),_0xfb742=this[_0x23db3a(0x3ab)]();this[_0x23db3a(0x814)](_0x417909,_0x23db3a(0x1ba),_0xfb742);}else _0xd2fdf2+=Number(RegExp['$1'])/0x64;}_0xd2fdf2=_0xd2fdf2['clamp'](0.01,0x1);const _0x8d3a79=this[_0x23db3a(0x3b7)](),_0x204e08=_0xd2fdf2*_0x8d3a79;if(_0x393d2c>_0x204e08&&_0x8d3a79>_0x204e08){if(_0x23db3a(0x933)!==_0x23db3a(0x57a)){_0x393d2c-=_0x204e08;const _0x5bf24a=VisuMZ[_0x23db3a(0xa3c)][_0x23db3a(0x6a1)][_0x23db3a(0x916)][_0x23db3a(0x62a)],_0x5301a5=Math[_0x23db3a(0x717)](0x1-_0x393d2c/((_0x8d3a79-_0x204e08)*_0x5bf24a+_0x393d2c),0.01);_0x393d2c*=_0x5301a5,_0x393d2c+=_0x204e08;}else{const _0x4a4d58=[],_0x28acf2=new _0x10656f(this);return _0x28acf2[_0x23db3a(0x968)](),_0x4a4d58[_0x23db3a(0x5c8)](_0x28acf2),_0x4a4d58;}}return _0x393d2c*_0x27f953;},Game_Action['prototype'][_0x2d1202(0x3b7)]=function(){const _0x46fd5e=_0x2d1202;return this[_0x46fd5e(0x36f)]()[_0x46fd5e(0x5fe)][_0x46fd5e(0xaa0)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x46fd5e(0x229)]()['hardDamageCap']();},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x2c3)]=function(_0x45e84e){const _0x87e29e=_0x2d1202;let _0x20c5cb=this[_0x87e29e(0x3b7)]();return _0x45e84e[_0x87e29e(0xb75)](-_0x20c5cb,_0x20c5cb);},VisuMZ['BattleCore'][_0x2d1202(0x6d2)]=Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x3da)],Game_Action['prototype'][_0x2d1202(0x3da)]=function(_0xb3ab86){const _0x3511ec=_0x2d1202;this['applyBattleCoreJS'](_0x3511ec(0x7ea),_0xb3ab86,0x0,!![]),VisuMZ['BattleCore'][_0x3511ec(0x6d2)][_0x3511ec(0x86c)](this,_0xb3ab86),this[_0x3511ec(0x86d)](_0x3511ec(0x8a3),_0xb3ab86,this[_0x3511ec(0x417)]||0x0,!![]),this['applyResultSwitches'](_0xb3ab86);},Game_Action['prototype'][_0x2d1202(0x86d)]=function(_0x38d4d7,_0x4038cb,_0x50b296,_0x4de8cc){const _0xfedad5=_0x2d1202;if(this[_0xfedad5(0x7cc)]||this[_0xfedad5(0x8d4)])return;_0x50b296=_0x50b296||0x0;const _0x4e74f3=_0x50b296,_0x4eeb9a=VisuMZ[_0xfedad5(0xa3c)][_0xfedad5(0x6a1)][_0xfedad5(0x51c)],_0x52e15b=_0x38d4d7[_0xfedad5(0x995)]('');if(_0x4eeb9a[_0x52e15b]){_0x50b296=_0x4eeb9a[_0x52e15b][_0xfedad5(0x86c)](this,_0x50b296,_0x4038cb);if(_0x4de8cc)_0x50b296=_0x4e74f3;}let _0x3e1ea8=VisuMZ[_0xfedad5(0xa3c)][_0xfedad5(0x268)](this[_0xfedad5(0x36f)](),_0x38d4d7['format'](''));if(VisuMZ[_0xfedad5(0xa3c)]['JS'][_0x3e1ea8]){_0x50b296=VisuMZ[_0xfedad5(0xa3c)]['JS'][_0x3e1ea8][_0xfedad5(0x86c)](this,this['subject'](),_0x4038cb,this[_0xfedad5(0x36f)](),_0x50b296);if(_0x4de8cc)_0x50b296=_0x4e74f3;}for(const _0x58f73e of this[_0xfedad5(0x229)]()[_0xfedad5(0x311)]()){if(_0xfedad5(0x679)===_0xfedad5(0x679)){if(!_0x58f73e)continue;_0x3e1ea8=VisuMZ[_0xfedad5(0xa3c)][_0xfedad5(0x268)](_0x58f73e,_0x38d4d7[_0xfedad5(0x995)](_0xfedad5(0x42d)));if(VisuMZ['BattleCore']['JS'][_0x3e1ea8]){if(_0xfedad5(0x67c)!==_0xfedad5(0x709)){_0x50b296=VisuMZ[_0xfedad5(0xa3c)]['JS'][_0x3e1ea8][_0xfedad5(0x86c)](this,this['subject'](),_0x4038cb,_0x58f73e,_0x50b296);if(_0x4de8cc)_0x50b296=_0x4e74f3;}else this[_0xfedad5(0x5c8)](_0xfedad5(0x4a3),_0x114901);}}else{const _0x7a3e8e=_0x478700['prototype'][_0xfedad5(0x2a6)](),_0x1433b0=_0xa07e27[_0xfedad5(0x203)],_0x3a46b8=this[_0xfedad5(0x23f)]()+_0x7a3e8e,_0x2955f7=0x0,_0xa09431=_0x235003[_0xfedad5(0x9ec)]-_0x3a46b8+_0x7a3e8e;return new _0x46bf23(_0x2955f7,_0xa09431,_0x1433b0,_0x3a46b8);}}for(const _0x535b4e of _0x4038cb['traitObjects']()){if(!_0x535b4e)continue;_0x3e1ea8=VisuMZ['BattleCore'][_0xfedad5(0x268)](_0x535b4e,_0x38d4d7[_0xfedad5(0x995)](_0xfedad5(0x482)));if(VisuMZ[_0xfedad5(0xa3c)]['JS'][_0x3e1ea8]){if('UKZSc'===_0xfedad5(0xa13)){_0x50b296=VisuMZ[_0xfedad5(0xa3c)]['JS'][_0x3e1ea8][_0xfedad5(0x86c)](this,this['subject'](),_0x4038cb,_0x535b4e,_0x50b296);if(_0x4de8cc)_0x50b296=_0x4e74f3;}else _0x32b338[_0xfedad5(0x214)]();}}return _0x50b296;},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0xad7)]=function(_0xea750a){const _0x5cd95b=_0x2d1202,_0x241207=this[_0x5cd95b(0x2f6)]||0x0,_0x3ee48c=VisuMZ[_0x5cd95b(0xa3c)][_0x5cd95b(0x6a1)][_0x5cd95b(0x51c)],_0xb40c13=_0xea750a[_0x5cd95b(0x995)]('');_0x3ee48c[_0xb40c13]&&_0x3ee48c[_0xb40c13][_0x5cd95b(0x86c)](this,_0x241207);let _0x106e9f=VisuMZ['BattleCore'][_0x5cd95b(0x268)](this[_0x5cd95b(0x36f)](),_0xea750a);VisuMZ[_0x5cd95b(0xa3c)]['JS'][_0x106e9f]&&VisuMZ[_0x5cd95b(0xa3c)]['JS'][_0x106e9f][_0x5cd95b(0x86c)](this,this[_0x5cd95b(0x229)](),this[_0x5cd95b(0x229)](),this[_0x5cd95b(0x36f)](),_0x241207);for(const _0x5d689a of this[_0x5cd95b(0x229)]()['traitObjects']()){if(_0x5cd95b(0x697)!==_0x5cd95b(0x697)){const _0x2b1d12=this[_0x5cd95b(0xa35)]['bitmap'];this[_0x5cd95b(0xa35)][_0x5cd95b(0xa1b)](0x0,0x0,_0x2b1d12[_0x5cd95b(0x72b)],_0x2b1d12[_0x5cd95b(0x940)]);}else{if(!_0x5d689a)continue;_0x106e9f=VisuMZ['BattleCore'][_0x5cd95b(0x268)](_0x5d689a,_0xea750a);if(VisuMZ[_0x5cd95b(0xa3c)]['JS'][_0x106e9f]){if('OiqDF'===_0x5cd95b(0x3f5)){if(!_0x5801f2['isSceneBattle']())return;if(!_0xdb73be[_0x5cd95b(0x893)])return;_0x29c555[_0x5cd95b(0x433)](_0x5b1fd1,_0x53654a);const _0x43939d=_0x3900f0[_0x5cd95b(0xa20)](),_0x15ee3d=_0x166e41[_0x5cd95b(0x513)];if(!_0x43939d)return;_0x3a61c1[_0x5cd95b(0x648)](_0x7973d7['SkewX'],_0x1f1e26[_0x5cd95b(0x9e5)],_0x3ae63f['Duration'],_0x552dbc[_0x5cd95b(0xb10)]);if(_0x15ee3d)_0x43939d['setWaitMode'](_0x5cd95b(0x375));}else VisuMZ[_0x5cd95b(0xa3c)]['JS'][_0x106e9f][_0x5cd95b(0x86c)](this,this[_0x5cd95b(0x229)](),this[_0x5cd95b(0x229)](),_0x5d689a,_0x241207);}}}},Game_Action['prototype'][_0x2d1202(0xa12)]=function(){const _0xf13717=_0x2d1202;return VisuMZ[_0xf13717(0xa3c)][_0xf13717(0x6a1)][_0xf13717(0x51c)]['CalcActionSpeedJS'][_0xf13717(0x86c)](this);},Game_Action[_0x2d1202(0x8ec)]['allowRandomSpeed']=function(){const _0x532b4b=_0x2d1202;return VisuMZ['BattleCore'][_0x532b4b(0x6a1)][_0x532b4b(0x51c)][_0x532b4b(0x6a6)];},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x5aa)]=function(){const _0x39ff36=_0x2d1202;return this[_0x39ff36(0x36f)]()[_0x39ff36(0x5fe)]['match'](/<JS TARGETS>/i);},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x6f2)]=function(){const _0x4185d8=_0x2d1202;if(!this['_forcing']&&this[_0x4185d8(0x229)]()[_0x4185d8(0x25c)]())return![];if(this[_0x4185d8(0x5aa)]())return!![];return typeof this['item']()[_0x4185d8(0x9e3)]===_0x4185d8(0x1d2);},VisuMZ['BattleCore'][_0x2d1202(0x4b7)]=Game_Action['prototype'][_0x2d1202(0xaaa)],Game_Action[_0x2d1202(0x8ec)]['isForOpponent']=function(){const _0x1807d3=_0x2d1202;return this[_0x1807d3(0x6f2)]()&&!this['isCustomBattleScope']()?'rMcEz'!==_0x1807d3(0xa57)?(_0xa61384[_0x1807d3(0xa3c)][_0x1807d3(0x56a)]['call'](this,_0x2eae78),_0x357038[_0x1807d3(0x1db)](_0x481343=>{const _0x10735a=_0x1807d3;this[_0x10735a(0xa5d)][this['_indent']]=_0x481343;}),!![]):this[_0x1807d3(0x6b6)]():VisuMZ['BattleCore'][_0x1807d3(0x4b7)][_0x1807d3(0x86c)](this);},Game_Action['prototype']['isForOpponentBattleCore']=function(){const _0x2d25ac=_0x2d1202,_0x364a37=this[_0x2d25ac(0x36f)]()[_0x2d25ac(0x9e3)];return _0x364a37['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xb8f)]=Game_Action[_0x2d1202(0x8ec)]['isForFriend'],Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x774)]=function(){const _0xf3cd9d=_0x2d1202;return this['isBattleCoreTargetScope']()&&!this[_0xf3cd9d(0x5aa)]()?this[_0xf3cd9d(0x622)]():VisuMZ[_0xf3cd9d(0xa3c)][_0xf3cd9d(0xb8f)][_0xf3cd9d(0x86c)](this);},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x622)]=function(){const _0x1df65e=_0x2d1202,_0x2e62ed=this[_0x1df65e(0x36f)]()[_0x1df65e(0x9e3)];return _0x2e62ed[_0x1df65e(0xaa0)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x996)]=Game_Action[_0x2d1202(0x8ec)]['isForRandom'],Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x9e2)]=function(){const _0x117770=_0x2d1202;if(this[_0x117770(0x6f2)]()&&!this['isCustomBattleScope']())return this['isForRandomBattleCore']();else{if(_0x117770(0x2fc)==='ZdmBE')_0x546424[_0x117770(0x76a)](_0x117770(0x873));else return VisuMZ[_0x117770(0xa3c)][_0x117770(0x996)][_0x117770(0x86c)](this);}},Game_Action['prototype'][_0x2d1202(0xa9a)]=function(){const _0x46aac0=_0x2d1202,_0x5d46d8=this[_0x46aac0(0x36f)]()[_0x46aac0(0x9e3)];return _0x5d46d8[_0x46aac0(0xaa0)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x453)]=Game_Action['prototype'][_0x2d1202(0x295)],Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x295)]=function(){const _0x5e7cef=_0x2d1202;if(this[_0x5e7cef(0x6f2)]()&&!this['isCustomBattleScope']()){if(_0x5e7cef(0xaba)!=='dBghG')_0x3e6c80=_0x227916[_0x5e7cef(0x282)];else return this[_0x5e7cef(0xb02)]();}else return VisuMZ[_0x5e7cef(0xa3c)][_0x5e7cef(0x453)][_0x5e7cef(0x86c)](this);},Game_Action['prototype'][_0x2d1202(0xb02)]=function(){const _0x15233e=_0x2d1202,_0x2f842a=this[_0x15233e(0x36f)]()[_0x15233e(0x9e3)];if(_0x2f842a[_0x15233e(0xaa0)](/RANDOM/i))return![];if(_0x2f842a[_0x15233e(0xaa0)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x2f842a[_0x15233e(0xaa0)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x15233e(0xa3c)]['Game_Action_needsSelection']['call'](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x491)]=Game_Action['prototype'][_0x2d1202(0xbbc)],Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0xbbc)]=function(){const _0x14d1fb=_0x2d1202;let _0x5f0ec5=[];return this[_0x14d1fb(0x6f2)]()?_0x5f0ec5=this[_0x14d1fb(0x5e2)]():_0x5f0ec5=VisuMZ['BattleCore'][_0x14d1fb(0x491)][_0x14d1fb(0x86c)](this),_0x5f0ec5=this[_0x14d1fb(0x9d1)](_0x5f0ec5),_0x5f0ec5;},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x5e2)]=function(){const _0x345b97=_0x2d1202;let _0x570d9f=[];const _0x15f6f4=String(this[_0x345b97(0x36f)]()[_0x345b97(0x9e3)]),_0x4ffba9=VisuMZ[_0x345b97(0xa3c)]['createKeyJS'](this['item'](),'Targets');if(VisuMZ[_0x345b97(0xa3c)]['JS'][_0x4ffba9]){if(_0x345b97(0x69a)!==_0x345b97(0x431)){_0x570d9f=VisuMZ[_0x345b97(0xa3c)][_0x345b97(0x491)][_0x345b97(0x86c)](this);const _0x1a9766=VisuMZ[_0x345b97(0xa3c)]['createKeyJS'](this[_0x345b97(0x36f)](),_0x345b97(0x22f));return _0x570d9f=VisuMZ['BattleCore']['JS'][_0x1a9766][_0x345b97(0x86c)](this,this[_0x345b97(0x229)](),_0x570d9f),this[_0x345b97(0xaed)](_0x570d9f);}else this[_0x345b97(0x1f8)]['x']=-this['_cancelButton'][_0x345b97(0x72b)]-0x4;}if(_0x15f6f4[_0x345b97(0xaa0)](/(\d+) RANDOM ANY/i)){if('kSvyS'===_0x345b97(0x390))return this[_0x345b97(0x553)]['_offsetX']===0x0&&this[_0x345b97(0x553)][_0x345b97(0x654)]===0x0;else{let _0x1963bd=Number(RegExp['$1']);while(_0x1963bd--){if(_0x345b97(0x859)===_0x345b97(0x859)){const _0x92148f=Math['randomInt'](0x2)===0x0?this[_0x345b97(0x9cd)]():this[_0x345b97(0x30d)]();_0x570d9f[_0x345b97(0x5c8)](_0x92148f['trueRandomTarget']());}else return this['_enemy']&&this[_0x345b97(0x7b8)][_0x345b97(0xb7b)]();}return this[_0x345b97(0xaed)](_0x570d9f);}}if(_0x15f6f4[_0x345b97(0xaa0)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if('eMRpi'!==_0x345b97(0x232)){let _0x2aca0f=Number(RegExp['$1']);while(_0x2aca0f--){_0x570d9f[_0x345b97(0x5c8)](this[_0x345b97(0x9cd)]()[_0x345b97(0x584)]());}return this[_0x345b97(0xaed)](_0x570d9f);}else{let _0x8e3e4b=_0x345b97(0x7ba);if(this[_0x345b97(0xa0e)](_0x8e3e4b))return this[_0x345b97(0xabd)][_0x8e3e4b];return this['_cache'][_0x8e3e4b]=this[_0x345b97(0x348)](this[_0x345b97(0xae4)]()),this[_0x345b97(0xabd)][_0x8e3e4b];}}if(_0x15f6f4['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x345b97(0x4b5)===_0x345b97(0x4b5)){let _0x42f67a=Number(RegExp['$1']);while(_0x42f67a--){_0x570d9f[_0x345b97(0x5c8)](this['friendsUnit']()[_0x345b97(0x584)]());}return this[_0x345b97(0xaed)](_0x570d9f);}else{var _0x4bdc85,_0x55ebee,_0x1ae66f;for(_0x1ae66f=_0x13a61a[_0x345b97(0x1d7)]-0x1;_0x1ae66f>0x0;_0x1ae66f--){_0x4bdc85=_0x40ddcc[_0x345b97(0x914)](_0x568bfc[_0x345b97(0x5dd)]()*(_0x1ae66f+0x1)),_0x55ebee=_0x44e4db[_0x1ae66f],_0x332cd7[_0x1ae66f]=_0x59e1dc[_0x4bdc85],_0x455caf[_0x4bdc85]=_0x55ebee;}return _0x331c8d;}}if(_0x15f6f4[_0x345b97(0xaa0)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x345b97(0x4f1)!==_0x345b97(0xb29))return _0x570d9f[_0x345b97(0x5c8)](...this[_0x345b97(0x30d)]()['aliveMembers']()[_0x345b97(0xb5f)](_0x18384e=>_0x18384e!==this[_0x345b97(0x229)]())),this['repeatTargets'](_0x570d9f);else _0x3e4871[_0x345b97(0xa3c)][_0x345b97(0x404)][_0x345b97(0x86c)](this),this[_0x345b97(0x1c6)][_0x345b97(0x1d7)]<=0x0&&(this[_0x345b97(0x874)]=_0x3a48bf[_0x345b97(0x596)]);}return VisuMZ[_0x345b97(0xa3c)][_0x345b97(0x491)][_0x345b97(0x86c)](this);},Game_Action[_0x2d1202(0x8ec)]['randomTargets']=function(_0x561a08){const _0x4ea253=_0x2d1202,_0x493853=[];for(let _0x5bc9d5=0x0;_0x5bc9d5<this['numTargets']();_0x5bc9d5++){_0x493853[_0x4ea253(0x5c8)](_0x561a08['trueRandomTarget']());}return _0x493853;},Game_Action['prototype'][_0x2d1202(0x9d1)]=function(_0x251ea0){const _0x382725=_0x2d1202;if(!this[_0x382725(0x36f)]())return _0x251ea0;const _0x184f23=this[_0x382725(0x36f)]()[_0x382725(0x5fe)];if(_0x184f23[_0x382725(0xaa0)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x382725(0xa32)!=='nFTPt')_0x251ea0['remove'](this[_0x382725(0x229)]());else{const _0x34604e=_0x4a2b8b[_0x382725(0xa3c)][_0x382725(0x6a1)][_0x382725(0xace)];_0x34604e['ActionCenteredName']&&this[_0x382725(0x5c8)](_0x382725(0x4ed),_0x382725(0xb91)[_0x382725(0x995)](_0x1c49ae[_0x382725(0x504)](_0x303060)));if(_0x2cf89c[_0x382725(0x37e)](_0x4f613e)){if(_0x34604e[_0x382725(0x88f)])this[_0x382725(0x275)](_0x41d5ee[_0x382725(0x853)],_0x1ed73b,_0x385cda);if(_0x34604e['ActionSkillMsg2'])this[_0x382725(0x275)](_0x161d1c[_0x382725(0x7d9)],_0x17d17e,_0x11f324);}else{if(_0x34604e[_0x382725(0x39f)])this[_0x382725(0x275)](_0x47a04d[_0x382725(0x9a3)],_0x336f64,_0x1de743);}}}return _0x251ea0;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x579)]=Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x60f)],Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x60f)]=function(_0x161fe7,_0x17c45d){const _0x13e793=_0x2d1202;VisuMZ[_0x13e793(0xa3c)][_0x13e793(0x579)][_0x13e793(0x86c)](this,_0x161fe7,_0x17c45d);if(!_0x161fe7[_0x13e793(0x1f3)]())return;for(const _0x30dded of this[_0x13e793(0x229)]()['attackStates']()){if(_0x13e793(0x5e6)==='WHBst'){if(_0x30dded===_0x161fe7[_0x13e793(0x803)]()){if(_0x13e793(0x7b4)!==_0x13e793(0x7b4)){if(!_0xfbde72['isSceneBattle']())return;const _0x4f621e=_0x4cbdca[_0x13e793(0xb69)][_0x13e793(0x210)];if(_0x4f621e)_0x4f621e[_0x13e793(0x3a5)]();}else{let _0x2d1c9c=_0x17c45d[_0x13e793(0x926)];_0x2d1c9c*=_0x161fe7[_0x13e793(0x83c)](_0x30dded),_0x2d1c9c*=this[_0x13e793(0x229)]()[_0x13e793(0xb31)](_0x30dded),_0x2d1c9c*=this[_0x13e793(0x3bf)](_0x161fe7),Math[_0x13e793(0x5dd)]()<_0x2d1c9c&&(_0x161fe7[_0x13e793(0x1d9)]=!![],this[_0x13e793(0x391)](_0x161fe7));}}}else _0xf404c6=(_0x1f9527+_0x5634a8)/0x2,_0x596b90=-0x1;}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x1ec)]=Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x7ce)],Game_Action[_0x2d1202(0x8ec)]['itemEffectAddNormalState']=function(_0xcc688d,_0x19310e){const _0x3d7729=_0x2d1202;VisuMZ[_0x3d7729(0xa3c)][_0x3d7729(0x1ec)]['call'](this,_0xcc688d,_0x19310e);if(!_0xcc688d[_0x3d7729(0x1f3)]())return;if(_0x19310e[_0x3d7729(0xb9d)]!==_0xcc688d[_0x3d7729(0x803)]())return;let _0x134597=_0x19310e[_0x3d7729(0x926)];if(!this[_0x3d7729(0x292)]()){if('CTSza'!==_0x3d7729(0x5a8))for(const _0x2dafee of _0x46ce5f[_0x3d7729(0x627)]()){this[_0x3d7729(0x5d0)][_0x3d7729(0x5c8)]('addText',_0x36a15a['emerge'][_0x3d7729(0x995)](_0x2dafee)),this['_logWindow']['push'](_0x3d7729(0x251)),_0x3f8d7c=!![];}else _0x134597*=_0xcc688d[_0x3d7729(0x83c)](_0x19310e[_0x3d7729(0xb9d)]),_0x134597*=this[_0x3d7729(0x3bf)](_0xcc688d);}Math[_0x3d7729(0x5dd)]()<_0x134597&&(_0xcc688d['_deathStateApplied']=!![],this[_0x3d7729(0x391)](_0xcc688d));},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x734)]=Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x32a)],Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x32a)]=function(){const _0x501df1=_0x2d1202;VisuMZ[_0x501df1(0xa3c)]['Game_Action_applyGlobal'][_0x501df1(0x86c)](this),this[_0x501df1(0x25e)](),this[_0x501df1(0x43c)]();},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x25e)]=function(){const _0x7762e1=_0x2d1202;if(!SceneManager['isSceneBattle']())return;const _0x77d98f=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x5e088f=this[_0x7762e1(0x36f)]()[_0x7762e1(0x5fe)][_0x7762e1(0xaa0)](_0x77d98f);if(_0x5e088f)for(const _0x38acee of _0x5e088f){if(_0x7762e1(0xb54)!==_0x7762e1(0xb54))_0x1a675e+=(_0xc2f0bd[_0x7762e1(0x72b)]-_0x25dd27)/0x2;else{if(!_0x38acee)continue;_0x38acee[_0x7762e1(0xaa0)](_0x77d98f);const _0x217c3d=String(RegExp['$1'])[_0x7762e1(0x2fd)](',')['map'](_0x30aa56=>String(_0x30aa56)[_0x7762e1(0x43b)]()),_0x1ed919=_0x217c3d['map'](_0x2ba2d3=>DataManager[_0x7762e1(0x82b)](_0x2ba2d3));for(const _0x5d66e2 of _0x1ed919){const _0x2a18ed=$dataCommonEvents[_0x5d66e2];_0x2a18ed&&$gameTemp[_0x7762e1(0xadb)](_0x5d66e2);}}}},DataManager['getCommonEventIdWithName']=function(_0x283bf9){const _0x285cfe=_0x2d1202;_0x283bf9=_0x283bf9[_0x285cfe(0x248)]()['trim'](),this[_0x285cfe(0x2fe)]=this[_0x285cfe(0x2fe)]||{};if(this[_0x285cfe(0x2fe)][_0x283bf9])return this[_0x285cfe(0x2fe)][_0x283bf9];for(const _0x3efc63 of $dataCommonEvents){if(!_0x3efc63)continue;let _0x54dfe0=_0x3efc63[_0x285cfe(0x476)];_0x54dfe0=_0x54dfe0['replace'](/\x1I\[(\d+)\]/gi,''),_0x54dfe0=_0x54dfe0[_0x285cfe(0x586)](/\\I\[(\d+)\]/gi,''),this[_0x285cfe(0x2fe)][_0x54dfe0[_0x285cfe(0x248)]()[_0x285cfe(0x43b)]()]=_0x3efc63['id'];}return this[_0x285cfe(0x2fe)][_0x283bf9]||0x0;},Game_Action[_0x2d1202(0x8ec)][_0x2d1202(0x43c)]=function(){const _0x2af2e5=_0x2d1202;if(!SceneManager[_0x2af2e5(0x346)]())return;const _0x57eef3=VisuMZ[_0x2af2e5(0xa3c)][_0x2af2e5(0x6a1)][_0x2af2e5(0x51c)];if(_0x57eef3[_0x2af2e5(0xb3a)]){if(_0x2af2e5(0x7f3)!==_0x2af2e5(0x2ac))$gameSwitches[_0x2af2e5(0x4d7)](_0x57eef3['SwitchCritical'],![]);else return _0x50b25d[_0x2af2e5(0xa3c)][_0x2af2e5(0x6a1)][_0x2af2e5(0xace)][_0x2af2e5(0x6b4)];}_0x57eef3[_0x2af2e5(0x4e7)]&&$gameSwitches[_0x2af2e5(0x4d7)](_0x57eef3[_0x2af2e5(0x4e7)],![]),_0x57eef3[_0x2af2e5(0x4bb)]&&$gameVariables[_0x2af2e5(0x4d7)](_0x57eef3['VariableDmg'],0x0),_0x57eef3[_0x2af2e5(0x798)]&&$gameVariables[_0x2af2e5(0x4d7)](_0x57eef3['VariableHeal'],0x0);},Game_Action['prototype']['applyResultSwitches']=function(_0x2ee44b){const _0xfbe08c=_0x2d1202;if(!SceneManager['isSceneBattle']())return;if(!_0x2ee44b)return;const _0x267d02=_0x2ee44b['result'](),_0x182c01=VisuMZ[_0xfbe08c(0xa3c)]['Settings'][_0xfbe08c(0x51c)];_0x182c01['SwitchCritical']&&_0x267d02['critical']&&('DZdDp'===_0xfbe08c(0x6c2)?$gameSwitches[_0xfbe08c(0x4d7)](_0x182c01[_0xfbe08c(0xb3a)],!![]):this['startMotion'](_0xfbe08c(0x958)));_0x182c01[_0xfbe08c(0x4e7)]&&(_0x267d02[_0xfbe08c(0x23c)]||_0x267d02['evaded'])&&$gameSwitches[_0xfbe08c(0x4d7)](_0x182c01['SwitchMissEvade'],!![]);if(_0x182c01[_0xfbe08c(0x4bb)]){if(_0xfbe08c(0x759)!==_0xfbe08c(0xa98)){let _0xbc7547=$gameVariables[_0xfbe08c(0x57c)](_0x182c01[_0xfbe08c(0x4bb)]);_0x267d02[_0xfbe08c(0x206)]>0x0&&('Nlxgr'===_0xfbe08c(0x757)?_0x54bc17[_0xfbe08c(0x1d0)](_0xe7a557):_0xbc7547+=Math[_0xfbe08c(0x4d4)](_0x267d02[_0xfbe08c(0x206)])),$gameVariables[_0xfbe08c(0x4d7)](_0x182c01[_0xfbe08c(0x4bb)],_0xbc7547);}else this[_0xfbe08c(0xad4)]=0x0;}if(_0x182c01[_0xfbe08c(0x798)]){if(_0xfbe08c(0x3d4)!=='BdVNI'){let _0x4f53d1=$gameVariables[_0xfbe08c(0x57c)](_0x182c01['VariableHeal']);_0x267d02[_0xfbe08c(0x206)]<0x0&&(_0x4f53d1+=Math[_0xfbe08c(0x4d4)](_0x267d02[_0xfbe08c(0x206)])),$gameVariables['setValue'](_0x182c01[_0xfbe08c(0x798)],_0x4f53d1);}else this[_0xfbe08c(0xbdc)]()===_0xfbe08c(0xb81)?this[_0xfbe08c(0x1f8)]['x']=0x8:this[_0xfbe08c(0x1f8)]['x']=-this[_0xfbe08c(0x1f8)][_0xfbe08c(0x72b)]-0x4;}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x6b8)]=Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x435)],Game_BattlerBase[_0x2d1202(0x8ec)]['initMembers']=function(){const _0x3957ef=_0x2d1202;VisuMZ['BattleCore']['Game_BattlerBase_initMembers'][_0x3957ef(0x86c)](this),this[_0x3957ef(0x90d)]();},Game_BattlerBase['prototype']['initMembersBattleCore']=function(){const _0x2d871b=_0x2d1202;this[_0x2d871b(0x73d)]=![];},VisuMZ['BattleCore'][_0x2d1202(0x666)]=Game_BattlerBase['prototype']['refresh'],Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x2bd)]=function(){const _0x53e1c9=_0x2d1202;this['_cache']={},VisuMZ['BattleCore'][_0x53e1c9(0x666)][_0x53e1c9(0x86c)](this);},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0xa0e)]=function(_0x2c4c32){const _0x4ee060=_0x2d1202;return this[_0x4ee060(0xabd)]=this[_0x4ee060(0xabd)]||{},this['_cache'][_0x2c4c32]!==undefined;},Game_BattlerBase['prototype'][_0x2d1202(0x42f)]=function(){const _0x5a7300=_0x2d1202;if(this[_0x5a7300(0xabd)][_0x5a7300(0x42f)]!==undefined)return this[_0x5a7300(0xabd)][_0x5a7300(0x42f)];const _0x5601af=/<DAMAGE CAP:[ ](\d+)>/i,_0x3fa053=this['traitObjects']()[_0x5a7300(0x64c)](_0x2a6b41=>_0x2a6b41&&_0x2a6b41['note'][_0x5a7300(0xaa0)](_0x5601af)?Number(RegExp['$1']):0x0);let _0x24fe1c=_0x3fa053['length']>0x0?Math['max'](..._0x3fa053):0x0;if(_0x24fe1c<=0x0)_0x24fe1c=VisuMZ[_0x5a7300(0xa3c)]['Settings']['Damage'][_0x5a7300(0x2a3)];return this[_0x5a7300(0xabd)][_0x5a7300(0x42f)]=_0x24fe1c,this[_0x5a7300(0xabd)][_0x5a7300(0x42f)];},Game_BattlerBase['prototype']['softDamageCapRate']=function(){const _0x345e87=_0x2d1202;if(this[_0x345e87(0xabd)]['softDamageCap']!==undefined)return this[_0x345e87(0xabd)][_0x345e87(0x20c)];let _0x4bba6d=VisuMZ[_0x345e87(0xa3c)][_0x345e87(0x6a1)][_0x345e87(0x916)]['DefaultSoftCap'];const _0x1a4a0c=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x451b66=this[_0x345e87(0x311)]()[_0x345e87(0x64c)](_0xf8d9d7=>_0xf8d9d7&&_0xf8d9d7['note'][_0x345e87(0xaa0)](_0x1a4a0c)?Number(RegExp['$1'])/0x64:0x0);return _0x4bba6d=_0x451b66['reduce']((_0x1f45ce,_0x1ebda1)=>_0x1f45ce+_0x1ebda1,_0x4bba6d),this[_0x345e87(0xabd)][_0x345e87(0x20c)]=_0x4bba6d,this[_0x345e87(0xabd)][_0x345e87(0x20c)][_0x345e87(0xb75)](0.01,0x1);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x58b)]=Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x34b)],Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x34b)]=function(){const _0x295395=_0x2d1202;VisuMZ[_0x295395(0xa3c)]['Game_BattlerBase_die'][_0x295395(0x86c)](this),SceneManager[_0x295395(0x346)]()&&this[_0x295395(0xa73)](_0x295395(0x3b9));},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x22c)]=function(){const _0x404c85=_0x2d1202;if(!SceneManager[_0x404c85(0x346)]())return null;if(!SceneManager[_0x404c85(0xb69)][_0x404c85(0x3d2)])return null;return SceneManager['_scene'][_0x404c85(0x3d2)]['findTargetSprite'](this);},Game_BattlerBase['prototype']['svBattlerAnchorX']=function(){const _0x42da47=_0x2d1202;return VisuMZ[_0x42da47(0xa3c)][_0x42da47(0x6a1)][_0x42da47(0x97d)]['AnchorX'];},Game_BattlerBase['prototype'][_0x2d1202(0x355)]=function(){const _0x1e89aa=_0x2d1202;return VisuMZ[_0x1e89aa(0xa3c)][_0x1e89aa(0x6a1)][_0x1e89aa(0x97d)][_0x1e89aa(0xa23)];},Game_BattlerBase['prototype'][_0x2d1202(0x1ca)]=function(){const _0x1f79bb=_0x2d1202;return this[_0x1f79bb(0xb90)]&&this[_0x1f79bb(0xb90)]()?VisuMZ['BattleCore'][_0x1f79bb(0x6a1)]['Actor'][_0x1f79bb(0x7f5)]:VisuMZ[_0x1f79bb(0xa3c)][_0x1f79bb(0x6a1)]['Enemy'][_0x1f79bb(0x7f5)];},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x79b)]=function(){return!![];},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x7ed)]=function(){return 0x0;},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x7ba)]=function(){return 0x0;},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x9f6)]=function(_0x29da69){const _0x53b4a5=_0x2d1202;if(!_0x29da69)return 0x0;let _0x4f669a=0x0;const _0x4dc975=_0x29da69[_0x53b4a5(0x5fe)];_0x4dc975[_0x53b4a5(0xaa0)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x4f669a+=Number(RegExp['$1']));if(_0x4dc975[_0x53b4a5(0xaa0)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x53b4a5(0x338)==='uRgtR')_0x4f669a+=Number(RegExp['$1']);else{if(!_0x15826e[_0x53b4a5(0x346)]())return;const _0x4aa4f7=_0x126f45['_logWindow'];_0x4aa4f7['refresh']();}}return _0x4f669a;},Game_BattlerBase['prototype'][_0x2d1202(0x348)]=function(_0xa5753){const _0x4018d2=_0x2d1202;if(!_0xa5753)return 0x0;let _0x5216c2=0x0;const _0x93c189=_0xa5753[_0x4018d2(0x5fe)];if(_0x93c189[_0x4018d2(0xaa0)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x4018d2(0x878)!==_0x4018d2(0x878)){if(!_0x3f63b3['VisuMZ_3_ActSeqImpact'])return;const _0x3e8007=_0x535adf['_scene'][_0x4018d2(0x3d2)];if(!_0x3e8007)return;_0xfc08a4[_0x4018d2(0x433)](_0x14662d,_0x4aa632);const _0x46c7ab=_0x2ed4cf['X']||0x0,_0x99dda3=_0x4491a1['Y']||0x0,_0x3d7890=_0x1935b4['Strength']||0x0,_0x42cfc9=_0x13cb15['Radius']||0x0,_0x2ebd4c=_0x1f8160['Duration']||0x1,_0xb878a8=_0x4782c1[_0x4018d2(0xb10)]||'Linear';_0x3e8007[_0x4018d2(0x207)](_0x3d7890,_0x46c7ab,_0x99dda3,_0x42cfc9,_0x2ebd4c,_0xb878a8);}else _0x5216c2+=Number(RegExp['$1']);}return _0x93c189[_0x4018d2(0xaa0)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x5216c2+=Number(RegExp['$2'])),_0x5216c2;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x4f7)]=Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x4d8)],Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x4d8)]=function(_0xcf29d){const _0x4138a8=_0x2d1202;if(_0xcf29d===this['deathStateId']()&&this[_0x4138a8(0x1f3)]())return!![];return VisuMZ[_0x4138a8(0xa3c)]['Game_BattlerBase_isStateResist'][_0x4138a8(0x86c)](this,_0xcf29d);},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x1f3)]=function(){const _0xc49680=_0x2d1202;return this[_0xc49680(0x73d)];},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0xb63)]=function(_0x4b97e2){const _0x3996c6=_0x2d1202;if(_0x4b97e2)'udjDk'!==_0x3996c6(0xafe)?this[_0x3996c6(0x69f)]():this[_0x3996c6(0xa73)]('thrust');else{if('aFaXT'!==_0x3996c6(0xad0))this['removeImmortal']();else{if(!_0x22895b['BattleCore'][_0x3996c6(0x6a1)]['HpGauge'][_0x3996c6(0xa71)])return;const _0x30da71=_0x2641e5[_0x3996c6(0x92c)],_0x589373='visualHpGauge';this['addCommand'](_0x30da71,_0x589373);}}},Game_BattlerBase[_0x2d1202(0x8ec)]['addImmortal']=function(){const _0x34e8c1=_0x2d1202;if(this[_0x34e8c1(0x7a6)]())return;this[_0x34e8c1(0x73d)]=!![],this[_0x34e8c1(0x1d9)]=![];},Game_BattlerBase[_0x2d1202(0x8ec)]['removeImmortal']=function(){const _0x345951=_0x2d1202,_0x26406e=this[_0x345951(0xb23)]();this[_0x345951(0x73d)]=![],_0x26406e&&this['_deathStateApplied']&&this[_0x345951(0x34b)](),this[_0x345951(0x1d9)]=![],this[_0x345951(0x2bd)](),this[_0x345951(0x7a6)]()&&_0x26406e&&(this[_0x345951(0xb8c)](),this[_0x345951(0xb83)]());},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x62e)]=Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x249)],Game_BattlerBase[_0x2d1202(0x8ec)]['canAttack']=function(){const _0x37eaae=_0x2d1202;if(!this[_0x37eaae(0xab7)]())return![];return VisuMZ['BattleCore']['Game_BattlerBase_canAttack'][_0x37eaae(0x86c)](this);},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0xab7)]=function(){const _0x4ae238=_0x2d1202;for(const _0x479420 of this[_0x4ae238(0x311)]()){if(!_0x479420)continue;if(_0x479420['note'][_0x4ae238(0xaa0)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x272)]=Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x701)],Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x701)]=function(){const _0x180513=_0x2d1202;if(!this[_0x180513(0x672)]())return![];return VisuMZ[_0x180513(0xa3c)][_0x180513(0x272)][_0x180513(0x86c)](this);},Game_BattlerBase[_0x2d1202(0x8ec)]['canGuardBattleCore']=function(){const _0x102c5b=_0x2d1202;for(const _0x2593a9 of this[_0x102c5b(0x311)]()){if(!_0x2593a9)continue;if(_0x2593a9['note'][_0x102c5b(0xaa0)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x332)]=function(){const _0x4c7a4f=_0x2d1202;for(const _0x5a9cdd of this[_0x4c7a4f(0x311)]()){if(!_0x5a9cdd)continue;if(_0x5a9cdd[_0x4c7a4f(0x5fe)][_0x4c7a4f(0xaa0)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x26f)]=function(){const _0x34399c=_0x2d1202;return VisuMZ[_0x34399c(0xa3c)][_0x34399c(0x6a1)]['Mechanics'][_0x34399c(0x6a6)];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xada)]=Game_Battler[_0x2d1202(0x8ec)]['regenerateAll'],Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x323)]=function(){const _0x55465d=_0x2d1202;if(SceneManager[_0x55465d(0x346)]()&&$gameTroop[_0x55465d(0x3d6)]()<=0x0)return;if(SceneManager[_0x55465d(0x346)]()&&BattleManager['isTpb']()&&this['_lastRegenFrameCount']===Graphics[_0x55465d(0x493)])return;this[_0x55465d(0x877)]=Graphics[_0x55465d(0x493)],this['processBattleCoreJS'](_0x55465d(0x45d)),VisuMZ['BattleCore'][_0x55465d(0xada)][_0x55465d(0x86c)](this),this[_0x55465d(0x9f4)](),this[_0x55465d(0x4a1)](_0x55465d(0xa7a));},Game_Battler['prototype'][_0x2d1202(0x9f4)]=function(){const _0x54f609=_0x2d1202;if(SceneManager[_0x54f609(0x346)]())for(const _0x3899ca of this['traitObjects']()){if(_0x54f609(0x507)!==_0x54f609(0x883)){if(!_0x3899ca)continue;this[_0x54f609(0x381)](_0x3899ca);}else{const _0x3a4563=_0x28dd48['prototype'][_0x54f609(0x9e9)][_0x54f609(0x86c)](arguments,0x1);this[_0x54f609(0x400)][_0x54f609(0x95c)]({'name':_0x4341ef,'params':_0x3a4563});}}},Game_Battler['prototype']['onRegeneratePlayStateAnimation']=function(_0x168e74){const _0x3970a1=_0x2d1202;if(!Imported[_0x3970a1(0x9ef)])return;if(!SceneManager[_0x3970a1(0x346)]())return;if(this['isDead']())return;if(this[_0x3970a1(0x6b9)]())return;if(_0x168e74[_0x3970a1(0x5fe)][_0x3970a1(0xaa0)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if('mpfbY'===_0x3970a1(0x900)){const _0x389f57=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x389f57,![],![]);}else{if(_0x4dc0b1[_0x3970a1(0x438)]()[_0x3970a1(0x635)]>0x0)return!![];if(_0x36712d[_0x3970a1(0x438)]()[_0x3970a1(0x89a)]>0x0)return!![];this[_0x3970a1(0xa2b)]='';}}},VisuMZ['BattleCore']['Game_Battler_startTpbTurn']=Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x2f1)],Game_Battler[_0x2d1202(0x8ec)]['startTpbTurn']=function(){const _0x34053f=_0x2d1202;this[_0x34053f(0x4a1)](_0x34053f(0x3d3)),VisuMZ['BattleCore'][_0x34053f(0x2c2)][_0x34053f(0x86c)](this),this[_0x34053f(0x4a1)](_0x34053f(0x364));},VisuMZ['BattleCore'][_0x2d1202(0x8bc)]=Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x9b8)],Game_Battler[_0x2d1202(0x8ec)]['onTurnEnd']=function(){const _0x204a7b=_0x2d1202;this[_0x204a7b(0x4a1)](_0x204a7b(0x86a)),VisuMZ['BattleCore'][_0x204a7b(0x8bc)][_0x204a7b(0x86c)](this),this[_0x204a7b(0x4a1)]('PostEndTurnJS');},Game_Battler['prototype'][_0x2d1202(0x4a1)]=function(_0x26b3cc){const _0x39462f=_0x2d1202;if(this['_tempBattler']||this[_0x39462f(0x8d4)])return;const _0x5ef8ac=VisuMZ[_0x39462f(0xa3c)][_0x39462f(0x6a1)][_0x39462f(0x51c)];if(_0x5ef8ac[_0x26b3cc])_0x5ef8ac[_0x26b3cc][_0x39462f(0x86c)](this);for(const _0x5bf1b2 of this[_0x39462f(0x311)]()){if(!_0x5bf1b2)continue;key=VisuMZ[_0x39462f(0xa3c)]['createKeyJS'](_0x5bf1b2,_0x26b3cc),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x39462f(0xa3c)]['JS'][key][_0x39462f(0x86c)](this,this,this,_0x5bf1b2,0x0);}},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x8ae)]=function(){const _0x2f5a13=_0x2d1202;return VisuMZ[_0x2f5a13(0xa3c)][_0x2f5a13(0x6a1)]['Actor'][_0x2f5a13(0x33c)]||![];},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x519)]=function(){const _0x1dec53=_0x2d1202;if(this[_0x1dec53(0x8cf)]()){if(this['chantStyle']()){if(this[_0x1dec53(0x1c6)]['some'](_0x31e519=>_0x31e519[_0x1dec53(0x36f)]()&&_0x31e519[_0x1dec53(0x8db)]())){if(_0x1dec53(0xab8)!==_0x1dec53(0xa19))return!![];else{if(!_0x3498dd)return![];return _0x5a0c83[_0x1dec53(0x30d)]()===this[_0x1dec53(0x30d)]();}}}else{if(this[_0x1dec53(0x1c6)]['some'](_0x396ec6=>_0x396ec6[_0x1dec53(0x36f)]()&&_0x396ec6[_0x1dec53(0x830)]()))return!![];}}if(BattleManager[_0x1dec53(0x768)]()&&this[_0x1dec53(0x4eb)]===_0x1dec53(0x6d4)){if(this[_0x1dec53(0x8ae)]()){if(_0x1dec53(0x29b)!==_0x1dec53(0x29b)){if(!_0x60350[_0x1dec53(0x346)]())return;_0x225c97[_0x1dec53(0x433)](_0x56bd55,_0x2439d5);const _0x596313=_0x3f4790['_action'],_0x50044b={'criticalHitRate':_0x1400c2[_0x1dec53(0x344)],'criticalHitFlat':_0xd8048e[_0x1dec53(0x39b)],'criticalDmgRate':_0x166176[_0x1dec53(0x33b)],'criticalDmgFlat':_0x4cf604[_0x1dec53(0x82c)],'damageRate':_0x21a8a1['DamageRate'],'damageFlat':_0x26bde7['DamageFlat'],'hitRate':_0x43400d[_0x1dec53(0x410)],'hitFlat':_0x260f5f[_0x1dec53(0x449)]};_0x596313['_multipliers']=_0x50044b;}else return this['currentAction']()&&this[_0x1dec53(0x8dd)]()[_0x1dec53(0x36f)]()&&this['currentAction']()[_0x1dec53(0x8db)]();}else return this[_0x1dec53(0x8dd)]()&&this[_0x1dec53(0x8dd)]()['item']()&&this[_0x1dec53(0x8dd)]()['isMagicSkill']();}return![];},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0xb82)]=function(){const _0x8cf2e7=_0x2d1202;if(BattleManager[_0x8cf2e7(0x768)]()&&this['_tpbState']==='casting'){if('QKCva'!=='EgQsP'){if(this[_0x8cf2e7(0x8ae)]())return this[_0x8cf2e7(0x8dd)]()&&this['currentAction']()['item']()&&!this[_0x8cf2e7(0x8dd)]()[_0x8cf2e7(0x8db)]();else{if(_0x8cf2e7(0x7f4)!==_0x8cf2e7(0x8a5))return this[_0x8cf2e7(0x8dd)]()&&this['currentAction']()['item']()&&!this[_0x8cf2e7(0x8dd)]()['isMagicSkill']();else _0x55310d=(_0x4e7850+_0x78af6)/0x2;}}else _0x2c3762[_0x8cf2e7(0x403)][_0x8cf2e7(0xac2)]();}return![];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x6f7)]=Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x46a)],Game_Battler['prototype'][_0x2d1202(0x46a)]=function(){const _0x2086d4=_0x2d1202;VisuMZ['BattleCore'][_0x2086d4(0x6f7)][_0x2086d4(0x86c)](this),this['_damagePopupArray']=[];},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x83a)]=function(){const _0x3fbabd=_0x2d1202;if(!this[_0x3fbabd(0xaa2)])this[_0x3fbabd(0x46a)]();return this[_0x3fbabd(0xaa2)][_0x3fbabd(0x1d7)]>0x0;},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0xa94)]=function(){const _0x1a9a27=_0x2d1202;if(!SceneManager[_0x1a9a27(0x346)]())return;if(!this[_0x1a9a27(0xaa2)])this[_0x1a9a27(0x46a)]();this['createSeparateDamagePopups']();const _0x298278=this['battler']();if(_0x298278)_0x298278[_0x1a9a27(0x359)]();},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x72e)]=function(){const _0x30946d=_0x2d1202,_0x1abad7=this[_0x30946d(0x9b9)]();if(_0x1abad7[_0x30946d(0x23c)]||_0x1abad7['evaded']){const _0x1a42e1=JsonEx[_0x30946d(0x1c7)](_0x1abad7);_0x1a42e1['hpAffected']=![],_0x1a42e1[_0x30946d(0xae9)]=0x0,this[_0x30946d(0xaa2)]['push'](_0x1a42e1);}if(_0x1abad7[_0x30946d(0xa40)]){const _0x40658b=JsonEx[_0x30946d(0x1c7)](_0x1abad7);_0x40658b[_0x30946d(0x23c)]=![],_0x40658b[_0x30946d(0xb70)]=![],_0x40658b[_0x30946d(0xae9)]=0x0,this[_0x30946d(0xaa2)]['push'](_0x40658b);}if(_0x1abad7[_0x30946d(0xae9)]!==0x0){const _0x18c183=JsonEx[_0x30946d(0x1c7)](_0x1abad7);_0x18c183['missed']=![],_0x18c183[_0x30946d(0xb70)]=![],_0x18c183[_0x30946d(0xa40)]=![],this[_0x30946d(0xaa2)]['push'](_0x18c183);}},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x9c6)]=function(){const _0x3dbe4d=_0x2d1202;if(!this[_0x3dbe4d(0xaa2)])this[_0x3dbe4d(0x46a)]();return VisuMZ[_0x3dbe4d(0xa3c)]['Settings'][_0x3dbe4d(0x916)][_0x3dbe4d(0x8a7)]?this['_damagePopupArray'][_0x3dbe4d(0x9c8)]():this[_0x3dbe4d(0xaa2)][_0x3dbe4d(0x300)]();},Game_Battler['prototype']['setupTextPopup']=function(_0x3f6566,_0x3d06d1){const _0x4c0003=_0x2d1202;if(!SceneManager[_0x4c0003(0x346)]())return;if(!this[_0x4c0003(0x22c)]())return;if(_0x3f6566[_0x4c0003(0x1d7)]<=0x0)return;_0x3d06d1=_0x3d06d1||{},_0x3d06d1[_0x4c0003(0x5fc)]=_0x3d06d1[_0x4c0003(0x5fc)]||'#ffffff',_0x3d06d1[_0x4c0003(0x835)]=_0x3d06d1[_0x4c0003(0x835)]||[0x0,0x0,0x0,0x0],_0x3d06d1[_0x4c0003(0x337)]=_0x3d06d1[_0x4c0003(0x337)]||0x0,this[_0x4c0003(0x22c)]()['setupTextPopup'](_0x3f6566,_0x3d06d1);},Game_Battler['prototype'][_0x2d1202(0x3ad)]=function(_0x1e299a,_0x3d281b,_0x369e5d){const _0x1173d5=_0x2d1202;if(!SceneManager[_0x1173d5(0x346)]())return;if(!this[_0x1173d5(0x22c)]())return;if(_0x3d281b[_0x1173d5(0x1d7)]<=0x0)return;_0x369e5d=_0x369e5d||{},_0x369e5d['textColor']=_0x369e5d[_0x1173d5(0x5fc)]||_0x1173d5(0x5b5),_0x369e5d[_0x1173d5(0x835)]=_0x369e5d[_0x1173d5(0x835)]||[0x0,0x0,0x0,0x0],_0x369e5d[_0x1173d5(0x337)]=_0x369e5d[_0x1173d5(0x337)]||0x0,this['battler']()[_0x1173d5(0x3ad)](_0x1e299a,_0x3d281b,_0x369e5d);},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x4c4)]=function(){const _0x4ee3b4=_0x2d1202;if(this[_0x4ee3b4(0x6b9)]())return![];if(this[_0x4ee3b4(0xb23)]()&&this[_0x4ee3b4(0x61b)]())return!![];if(this['isEnemy']()&&this[_0x4ee3b4(0xb7b)]()){if(this[_0x4ee3b4(0x7a6)]()&&this[_0x4ee3b4(0x84e)]())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ['BattleCore'][_0x2d1202(0xbae)]=Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0xb38)],Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0xb38)]=function(){const _0x9309d1=_0x2d1202;VisuMZ['BattleCore'][_0x9309d1(0xbae)][_0x9309d1(0x86c)](this),this[_0x9309d1(0x3ba)]();},Game_Battler[_0x2d1202(0x8ec)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x2d1202(0x8ec)]['isBattlerGrounded']=function(){return![];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x65c)]=Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x4fc)],Game_Battler[_0x2d1202(0x8ec)]['onBattleStart']=function(_0x3b7628){const _0x4dc0ed=_0x2d1202;VisuMZ[_0x4dc0ed(0xa3c)]['Game_Battler_onBattleStart'][_0x4dc0ed(0x86c)](this,_0x3b7628),this['onBattleStartBattleCore'](_0x3b7628);},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x430)]=function(_0x22eb19){const _0x248da1=_0x2d1202;this[_0x248da1(0x350)](![]);},VisuMZ[_0x2d1202(0xa3c)]['Game_Battler_performActionStart']=Game_Battler[_0x2d1202(0x8ec)]['performActionStart'],Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0xa42)]=function(_0x1baf2d){const _0x374bb0=_0x2d1202;VisuMZ[_0x374bb0(0xa3c)]['Game_Battler_performActionStart']['call'](this,_0x1baf2d);if(!_0x1baf2d['isGuard']()){const _0x115df8=this[_0x374bb0(0x22c)]();_0x115df8&&_0x115df8[_0x374bb0(0x271)]();}this[_0x374bb0(0x350)](![]);},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x313)]=function(){const _0x36e085=_0x2d1202,_0x2d58ec=this[_0x36e085(0x868)];this['_flinched']=![];if(BattleManager[_0x36e085(0x510)]()&&this[_0x36e085(0x78d)]()){if('iRNAG'!==_0x36e085(0x9e8)){const _0x1911b1=this[_0x36e085(0x22c)]();if(_0x1911b1&&_0x2d58ec)_0x1911b1[_0x36e085(0x271)]();return;}else this['_battlePortrait']='',this[_0x36e085(0x832)]()&&this[_0x36e085(0x832)]()['note'][_0x36e085(0xaa0)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x36e085(0x881)]=_0x15bcfd(_0x233da1['$1']));}const _0x3d5cf9=this['battler']();if(_0x3d5cf9)_0x3d5cf9[_0x36e085(0x255)]();this[_0x36e085(0x350)](![]),this[_0x36e085(0xb83)]();},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x556)]=function(_0x2ef729){const _0x3204d4=_0x2d1202;if(_0x2ef729[_0x3204d4(0x7b6)]())this[_0x3204d4(0x7a1)]();else{if(_0x2ef729[_0x3204d4(0xa6e)]())this[_0x3204d4(0xa73)](_0x3204d4(0x992));else{if(_0x2ef729[_0x3204d4(0x8db)]())this[_0x3204d4(0xa73)](_0x3204d4(0x4b2));else{if(_0x2ef729[_0x3204d4(0x37e)]()){if(_0x2ef729[_0x3204d4(0x36f)]()[_0x3204d4(0x26a)][_0x3204d4(0x428)]>0x0){if('senPX'===_0x3204d4(0x5b8))this[_0x3204d4(0x7a1)]();else{this['_actionBattlers'][_0x3204d4(0x9b6)](_0x4d3b1d);if(_0x652ebf===this[_0x3204d4(0x403)])return;const _0x47969f=_0xc488bc[_0x3204d4(0x1c7)](_0x47759a[_0x3204d4(0x8dd)]());this['_forcedBattlers']['push']([_0xfc9e17,_0x47969f]);}}else{if(_0x3204d4(0x64e)!==_0x3204d4(0x64e)){let _0x3d0833=this[_0x3204d4(0x3b7)]();return _0x3ef0a7[_0x3204d4(0xb75)](-_0x3d0833,_0x3d0833);}else this['requestMotion'](_0x3204d4(0x935));}}else{if(_0x2ef729['isItem']()){if('ODhYu'!=='ODhYu'){const _0x139f91=this[_0x3204d4(0x1ed)](),_0x540246=_0x139f91[0x0]?_0x139f91[0x0]['wtypeId']:0x0;return _0x451e89['attackMotions'][_0x540246];}else this[_0x3204d4(0xa73)](_0x3204d4(0x36f));}}}}}},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x415)]=function(){const _0x53b6c1=_0x2d1202;return $dataSystem[_0x53b6c1(0xb19)][0x0];},Game_Battler[_0x2d1202(0x8ec)]['getAttackWeaponAnimationId']=function(){const _0x7240b9=_0x2d1202,_0x47472f=this['getAttackMotion']();return _0x47472f?_0x47472f[_0x7240b9(0x429)]:0x0;},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x9c2)]=function(_0x29d311){const _0x86069b=_0x2d1202;if(!$gameSystem[_0x86069b(0x1fd)]())return;const _0x1618f9=this[_0x86069b(0x22c)](),_0x48345a=_0x29d311['battler']();if(!_0x1618f9||!_0x48345a)return;const _0xb218c3=_0x48345a[_0x86069b(0x99a)],_0x5b816c=_0x48345a[_0x86069b(0x75a)];this[_0x86069b(0x9be)](_0xb218c3,_0x5b816c,0x0,![],_0x86069b(0x9d0),-0x1),_0x1618f9[_0x86069b(0x1e6)]();const _0x5e9a2d=VisuMZ[_0x86069b(0xa3c)][_0x86069b(0x6a1)]['ActionSequence'];let _0x6f6d4=(_0x48345a[_0x86069b(0x72b)]+_0x1618f9[_0x86069b(0x72b)])/0x2;_0x6f6d4*=this[_0x86069b(0xb90)]()?0x1:-0x1;let _0x24f0fb=_0x5e9a2d[_0x86069b(0x977)]*(this['isActor']()?0x1:-0x1);_0x29d311[_0x86069b(0x461)](_0x6f6d4,_0x24f0fb,0x0,![],_0x86069b(0x9d0)),_0x48345a[_0x86069b(0x1e6)]();},Game_Battler['prototype'][_0x2d1202(0xa73)]=function(_0x541443){const _0x404eb1=_0x2d1202;if(SceneManager[_0x404eb1(0x346)]()){const _0x2139b4=this[_0x404eb1(0x22c)]();_0x2139b4&&(_0x2139b4[_0x404eb1(0x3e1)](_0x541443),[_0x404eb1(0x74e),_0x404eb1(0x261),_0x404eb1(0x7fb)][_0x404eb1(0x7c6)](_0x541443)&&this[_0x404eb1(0xa1e)]());}this[_0x404eb1(0x3ba)]();},Game_Battler[_0x2d1202(0x8ec)]['performWeaponAnimation']=function(){},Game_Battler[_0x2d1202(0x8ec)]['startWeaponAnimation']=function(_0x142a35){const _0xf697d8=_0x2d1202;if(SceneManager[_0xf697d8(0x346)]()){if(_0xf697d8(0x33a)===_0xf697d8(0x33a)){const _0x4c7627=this[_0xf697d8(0x22c)]();if(_0x4c7627)_0x4c7627['forceWeaponAnimation'](_0x142a35);}else this[_0xf697d8(0x5c8)](_0xf697d8(0x639),_0x12c1b3);}},Game_Battler['prototype'][_0x2d1202(0x51b)]=function(){const _0x38bfd1=_0x2d1202;if(SceneManager[_0x38bfd1(0x346)]()){const _0x12cbda=this['getAttackWeaponAnimationId']();this['startWeaponAnimation'](_0x12cbda);}},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x2cf)]=function(_0x3a4765,_0xd015a4){const _0x17978f=_0x2d1202;if(!_0x3a4765)return;if(!_0x3a4765[_0x17978f(0x36f)]())return;if(_0x3a4765[_0x17978f(0x7b6)]())return;if(_0x3a4765[_0x17978f(0xa6e)]())return;if(_0x3a4765['isItem']())return;let _0x57da4c=0x0;const _0x2a533c=VisuMZ['BattleCore']['Settings'][_0x17978f(0xb3f)],_0x526c56=_0x3a4765['item']()[_0x17978f(0x5fe)];if(_0x526c56[_0x17978f(0xaa0)](/<CAST ANIMATION: (\d+)>/i)){if(_0x17978f(0x1c8)!==_0x17978f(0x1c8)){const _0x2cd7a5=this['battler']();if(_0x2cd7a5)_0x2cd7a5['forceWeaponAnimation'](_0x54d29a);}else _0x57da4c=Number(RegExp['$1']);}else{if(_0x526c56['match'](/<NO CAST ANIMATION>/i)){if(_0x17978f(0x3c5)!==_0x17978f(0x3fe))return;else{const _0x117015=_0x36446b['getStypeIdWithName'](_0x147c63['$1']);this['addSkillTypeCommand'](_0x117015);}}else{if(_0x3a4765[_0x17978f(0x292)]())_0x57da4c=_0x2a533c[_0x17978f(0x558)];else{if(_0x3a4765['isPhysical']()){if('HGfvJ'===_0x17978f(0x1c2))_0x57da4c=_0x2a533c[_0x17978f(0x27c)];else return!this['isTurnBased']();}else _0x3a4765[_0x17978f(0x8db)]()&&(_0x57da4c=_0x2a533c[_0x17978f(0x9a6)]);}}}_0x57da4c>0x0&&(_0x17978f(0xa95)!==_0x17978f(0x41f)?$gameTemp[_0x17978f(0x872)]([this],_0x57da4c,!!_0xd015a4):this[_0x17978f(0x80c)]=_0x2da58c||0x0);},Game_Battler['prototype'][_0x2d1202(0x6bc)]=function(){const _0xae551d=_0x2d1202;SoundManager['playReflection']();let _0x1003b7=VisuMZ[_0xae551d(0xa3c)][_0xae551d(0x6a1)]['ActionSequence']['ReflectAnimation'];if(_0x1003b7>0x0){if(Imported[_0xae551d(0x9ef)])_0xae551d(0x963)===_0xae551d(0x963)?$gameTemp[_0xae551d(0x418)]([this],_0x1003b7):(_0x20217f['BattleCore'][_0xae551d(0xbc4)][_0xae551d(0x86c)](this,_0x946e3f),this[_0xae551d(0xac7)]());else{if(_0xae551d(0x6df)===_0xae551d(0x6df))$gameTemp[_0xae551d(0x872)]([this],_0x1003b7);else{const _0x12cace=this[_0xae551d(0x8cd)](),_0x422080=_0x1fa971['BattleCore'][_0xae551d(0x6a1)][_0xae551d(0x732)]['CmdIconFight'],_0x442b5b=_0x12cace==='text'?_0x5eeade[_0xae551d(0x2ff)]:_0xae551d(0x577)[_0xae551d(0x995)](_0x422080,_0x2a4f0e[_0xae551d(0x2ff)]),_0x52f031=this[_0xae551d(0x2af)]();this[_0xae551d(0x814)](_0x442b5b,_0xae551d(0x2ff),_0x52f031);}}}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x6f6)]=Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x9a5)],Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x9a5)]=function(){const _0x156116=_0x2d1202;VisuMZ[_0x156116(0xa3c)]['Game_Battler_performDamage'][_0x156116(0x86c)](this),this[_0x156116(0xa75)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x7dc)]=Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x639)],Game_Battler[_0x2d1202(0x8ec)]['performMiss']=function(){const _0x46ca8c=_0x2d1202;VisuMZ[_0x46ca8c(0xa3c)][_0x46ca8c(0x7dc)][_0x46ca8c(0x86c)](this),this['performFlinch']();},VisuMZ[_0x2d1202(0xa3c)]['Game_Battler_performEvasion']=Game_Battler[_0x2d1202(0x8ec)]['performEvasion'],Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x939)]=function(){const _0x16f2fa=_0x2d1202;VisuMZ['BattleCore'][_0x16f2fa(0x851)]['call'](this),this[_0x16f2fa(0xa75)]();},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0xa75)]=function(){const _0x5adf63=_0x2d1202;if(!$gameSystem[_0x5adf63(0x1fd)]())return;if(this[_0x5adf63(0x868)])return;this[_0x5adf63(0x868)]=!![];const _0xd00008=this['battler']();if(_0xd00008)_0xd00008[_0x5adf63(0x1c0)]();},Game_Battler[_0x2d1202(0x8ec)]['requestMotionRefresh']=function(){const _0x541c0c=_0x2d1202;if(this[_0x541c0c(0x7a6)]()&&this[_0x541c0c(0x9c5)]!==_0x541c0c(0x3b9)){this[_0x541c0c(0xa73)](_0x541c0c(0x3b9));return;}if(this[_0x541c0c(0x7a6)]()&&this['_motionType']===_0x541c0c(0x3b9))return;if(!!this['_freezeMotionData'])return;if(this[_0x541c0c(0xad8)]()){if(!this[_0x541c0c(0x525)]()&&this!==BattleManager[_0x541c0c(0x403)]){if(_0x541c0c(0xbb0)!==_0x541c0c(0x93d)){if(this[_0x541c0c(0x22c)]())this[_0x541c0c(0x22c)]()['refreshMotion']();}else this[_0x541c0c(0x81e)](_0x141bf5,_0x1ef104,_0x1a21e9);}this['clearFreezeMotion']();return;}if(this[_0x541c0c(0x9c5)]==='victory')return;if(this['_motionType']===_0x541c0c(0x3d5)&&!BattleManager[_0x541c0c(0x78d)]())return;if(this[_0x541c0c(0x9c5)]===_0x541c0c(0x992)&&!BattleManager[_0x541c0c(0x78d)]())return;this[_0x541c0c(0xb38)]();if(this[_0x541c0c(0x22c)]()&&BattleManager[_0x541c0c(0x78d)]()){if(_0x541c0c(0x85b)===_0x541c0c(0x85b)){this[_0x541c0c(0x22c)]()['refreshMotion'](),this[_0x541c0c(0x3ba)]();return;}else{const _0x3a28d9=_0x319a1f[_0x541c0c(0x1c7)](_0x468521);_0x3a28d9[_0x541c0c(0x23c)]=![],_0x3a28d9[_0x541c0c(0xb70)]=![],_0x3a28d9['mpDamage']=0x0,this[_0x541c0c(0xaa2)]['push'](_0x3a28d9);}}},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x525)]=function(){const _0x317787=_0x2d1202;if(!this[_0x317787(0xb7b)]())return![];const _0x3ba89f=this[_0x317787(0x22c)]();if(!_0x3ba89f)return![];const _0x460aec=_0x3ba89f[_0x317787(0x746)];if(!_0x460aec)return![];const _0x5613de=_0x460aec[_0x317787(0xbb3)];return _0x5613de&&!_0x5613de[_0x317787(0xa03)];},Game_Battler[_0x2d1202(0x8ec)]['isBattlerFlipped']=function(){const _0xfc354=_0x2d1202;return this[_0xfc354(0x63e)];},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x350)]=function(_0x4ec994){const _0x1ecf55=_0x2d1202;if(!$gameSystem[_0x1ecf55(0x1fd)]())return;this[_0x1ecf55(0x63e)]=_0x4ec994;const _0x474877=this[_0x1ecf55(0x22c)]();if(_0x474877)_0x474877[_0x1ecf55(0x815)]();},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x9c7)]=function(_0xa105ca,_0x3e92b9,_0x4a5f96){const _0x14bfb0=_0x2d1202;if(!$gameSystem['isSideView']())return;const _0x3cdaab=this['battler']();if(!_0x3cdaab)return;if(_0xa105ca===_0x3cdaab[_0x14bfb0(0x99a)])return;let _0x64bf78=![];if(this[_0x14bfb0(0xb90)]()){if(_0xa105ca>_0x3cdaab[_0x14bfb0(0x99a)])_0x64bf78=!![];if(_0xa105ca<_0x3cdaab[_0x14bfb0(0x99a)])_0x64bf78=![];}else{if(this['isEnemy']()){if(_0xa105ca>_0x3cdaab[_0x14bfb0(0x99a)])_0x64bf78=![];if(_0xa105ca<_0x3cdaab[_0x14bfb0(0x99a)])_0x64bf78=!![];}};this[_0x14bfb0(0x350)](_0x4a5f96?!_0x64bf78:_0x64bf78),_0x3cdaab['updateFlip']();},Game_Battler['prototype'][_0x2d1202(0x461)]=function(_0x5f71d,_0x2ad585,_0x1e5c3f,_0x4f152d,_0x1c1262){const _0x4e28ce=_0x2d1202;if(!$gameSystem[_0x4e28ce(0x1fd)]())return;const _0x2d1a3f=this[_0x4e28ce(0x22c)]();if(!_0x2d1a3f)return;if(_0x4f152d)this[_0x4e28ce(0x9c7)](_0x5f71d+_0x2d1a3f['_baseX'],_0x2ad585+_0x2d1a3f['_baseY'],![]);_0x5f71d+=_0x2d1a3f['_baseX']-_0x2d1a3f[_0x4e28ce(0xb08)],_0x2ad585+=_0x2d1a3f[_0x4e28ce(0x75a)]-_0x2d1a3f[_0x4e28ce(0x8a6)],_0x2d1a3f['startMove'](_0x5f71d,_0x2ad585,_0x1e5c3f);if(Imported[_0x4e28ce(0x9ef)])_0x2d1a3f[_0x4e28ce(0x9fb)](_0x1c1262||_0x4e28ce(0x9d0));},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x9be)]=function(_0x36bf4d,_0x2ae3ee,_0x46b090,_0x16912c,_0x44f874,_0x3b2661){const _0x77d8=_0x2d1202;if(!$gameSystem[_0x77d8(0x1fd)]())return;const _0x1d69a7=this[_0x77d8(0x22c)]();if(!_0x1d69a7)return;_0x3b2661=_0x3b2661||0x0;if(_0x3b2661>0x0){if(_0x1d69a7[_0x77d8(0x99a)]>_0x36bf4d)_0x36bf4d+=_0x1d69a7[_0x77d8(0x72b)]/0x2+_0x3b2661;if(_0x1d69a7['_baseX']<_0x36bf4d)_0x36bf4d-=_0x1d69a7[_0x77d8(0x72b)]/0x2+_0x3b2661;}if(_0x16912c)this[_0x77d8(0x9c7)](_0x36bf4d,_0x2ae3ee,![]);_0x36bf4d-=_0x1d69a7['_homeX'],_0x2ae3ee-=_0x1d69a7[_0x77d8(0x8a6)],_0x1d69a7[_0x77d8(0x434)](_0x36bf4d,_0x2ae3ee,_0x46b090);if(Imported[_0x77d8(0x9ef)])_0x1d69a7['setMoveEasingType'](_0x44f874||_0x77d8(0x9d0));},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x7d1)]=function(_0x4b72a4,_0x883d64,_0x459f59){const _0xcf326c=_0x2d1202;if(!$gameSystem[_0xcf326c(0x1fd)]())return;const _0x579d62=this['battler']();if(!_0x579d62)return;_0x579d62['startFloat'](_0x4b72a4,_0x883d64,_0x459f59);},Game_Battler[_0x2d1202(0x8ec)]['jumpBattler']=function(_0x2ff6fc,_0x430d7c){const _0x1fea3c=_0x2d1202;if(!$gameSystem[_0x1fea3c(0x1fd)]())return;const _0x33b158=this[_0x1fea3c(0x22c)]();if(!_0x33b158)return;_0x33b158['startJump'](_0x2ff6fc,_0x430d7c);},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x489)]=function(_0x3b8618,_0xfa602d,_0x49da5f,_0x34b4ca){const _0x5e7af1=_0x2d1202;if(!$gameSystem[_0x5e7af1(0x1fd)]())return;const _0x393069=this['battler']();if(!_0x393069)return;_0x393069['startSpin'](_0x3b8618,_0xfa602d,_0x49da5f,_0x34b4ca);},Game_Battler['prototype'][_0x2d1202(0x3a3)]=function(_0x3856a0,_0x8bbede,_0x567f45,_0x271084){const _0x4117f4=_0x2d1202;if(!$gameSystem[_0x4117f4(0x1fd)]())return;const _0x20f079=this[_0x4117f4(0x22c)]();if(!_0x20f079)return;this[_0x4117f4(0xb90)]()&&(_0x3856a0*=-0x1,_0x8bbede*=-0x1),_0x20f079[_0x4117f4(0x9c9)](_0x3856a0,_0x8bbede,_0x567f45,_0x271084);},Game_Battler['prototype'][_0x2d1202(0x6a8)]=function(_0x359068,_0x3becbf,_0x19f021,_0x4fd8b2){const _0x230af1=_0x2d1202;if(!$gameSystem['isSideView']())return;const _0x599059=this[_0x230af1(0x22c)]();if(!_0x599059)return;_0x599059[_0x230af1(0x88c)](_0x359068,_0x3becbf,_0x19f021,_0x4fd8b2);},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x569)]=function(_0x1d9a7b,_0x35cbfd,_0x5a33c6){const _0xb67f73=_0x2d1202;if(!$gameSystem[_0xb67f73(0x1fd)]())return;const _0x39ab71=this[_0xb67f73(0x22c)]();if(!_0x39ab71)return;_0x39ab71[_0xb67f73(0x538)](_0x1d9a7b,_0x35cbfd,_0x5a33c6);},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x3ba)]=function(){const _0x52b328=_0x2d1202,_0x57cbf1=!!this['_freezeMotionData'];this[_0x52b328(0x3ee)]=undefined;if(_0x57cbf1){if(_0x52b328(0x61e)!==_0x52b328(0x61e)){if(this[_0x52b328(0xabd)][_0x52b328(0x2ab)]!==_0x47980c)return this[_0x52b328(0xabd)][_0x52b328(0x2ab)];return this[_0x52b328(0x832)]()['note'][_0x52b328(0xaa0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x52b328(0xabd)][_0x52b328(0x6d7)]=_0x2aad1a(_0x21af37['$1']),this[_0x52b328(0xabd)][_0x52b328(0x2ab)]=_0x298f94(_0x5566e5['$2'])):this[_0x52b328(0xabd)][_0x52b328(0x2ab)]=_0x23491b['prototype']['svBattlerAnchorY'][_0x52b328(0x86c)](this),this[_0x52b328(0xabd)][_0x52b328(0x2ab)];}else this[_0x52b328(0xb83)](),this[_0x52b328(0x572)]();}},Game_Battler['prototype']['clearFreezeMotionForWeapons']=function(){const _0xc08c5f=_0x2d1202;if(!SceneManager['isSceneBattle']())return;const _0x3db9df=this[_0xc08c5f(0x22c)]();if(!_0x3db9df)return;let _0x1f78ee=this[_0xc08c5f(0xb90)]()?_0x3db9df['_weaponSprite']:_0x3db9df['_svBattlerSprite'][_0xc08c5f(0x864)];_0x1f78ee&&(_0xc08c5f(0x1bd)===_0xc08c5f(0x40a)?this['autoBattleAtStart']=![]:_0x1f78ee[_0xc08c5f(0x882)](0x0));},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x918)]=function(_0x5ad310,_0xdaac49,_0x4de6c5){const _0x5bed56=_0x2d1202;if(this[_0x5bed56(0xad8)]()&&!this[_0x5bed56(0xb7b)]())return;let _0x2c3581=0x0,_0x2b23cf=0x0;_0x5ad310['match'](/ATTACK[ ](\d+)/i)&&(_0x2b23cf=Number(RegExp['$1']),_0x2b23cf--);if(this['isActor']()){const _0x421daa=this[_0x5bed56(0x1ed)]();_0x2c3581=_0x421daa[_0x2b23cf]?_0x421daa[_0x2b23cf][_0x5bed56(0x651)]:0x0;}else this[_0x5bed56(0xad8)]()&&(_0x2c3581=this[_0x5bed56(0x211)]()[_0x5bed56(0x651)]||0x0);const _0x8d93fb=$dataSystem[_0x5bed56(0xb19)][_0x2c3581];if(_0x5ad310[_0x5bed56(0xaa0)](/attack/i)){if(_0x5bed56(0x70d)===_0x5bed56(0x353)){if(this['_customDamageFormula']!==_0x5bed56(0x376))return this[_0x5bed56(0xad3)](_0x416122);else return _0x307983[_0x5bed56(0x31a)](this[_0x5bed56(0x36f)]())===_0x5bed56(0x9e1)?_0xa8d90d[_0x5bed56(0xa3c)][_0x5bed56(0x544)][_0x5bed56(0x86c)](this,_0x2fa31b):this[_0x5bed56(0x702)](_0x1a535a);}else _0x5ad310=['thrust',_0x5bed56(0x74e),_0x5bed56(0x7fb)][_0x8d93fb[_0x5bed56(0x428)]]||_0x5bed56(0x74e);}this[_0x5bed56(0x3ee)]={'motionType':_0x5ad310,'weaponImageId':_0xdaac49?_0x8d93fb[_0x5bed56(0x429)]:0x0,'pattern':_0x4de6c5};},Game_Battler['prototype'][_0x2d1202(0x711)]=function(_0x95860d){const _0x23f265=_0x2d1202;if(!_0x95860d)return![];return _0x95860d['friendsUnit']()===this[_0x23f265(0x30d)]();},Game_Battler[_0x2d1202(0x8ec)]['isOpponent']=function(_0x4d72df){const _0x1c7cfa=_0x2d1202;if(!_0x4d72df)return![];return _0x4d72df[_0x1c7cfa(0x9cd)]()===this[_0x1c7cfa(0x30d)]();},VisuMZ[_0x2d1202(0xa3c)]['Game_Actor_setup']=Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x882)],Game_Actor[_0x2d1202(0x8ec)]['setup']=function(_0x1aa3e8){const _0x3dad49=_0x2d1202;VisuMZ['BattleCore'][_0x3dad49(0xa99)][_0x3dad49(0x86c)](this,_0x1aa3e8),this[_0x3dad49(0x801)]();},Game_Actor['prototype']['initBattlePortrait']=function(){const _0x44a129=_0x2d1202;this[_0x44a129(0x881)]='',this[_0x44a129(0x832)]()&&this[_0x44a129(0x832)]()[_0x44a129(0x5fe)][_0x44a129(0xaa0)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x4f8)]=function(){const _0x3aa91e=_0x2d1202;if(this[_0x3aa91e(0x592)]()!==''){if(_0x3aa91e(0x51a)===_0x3aa91e(0x97a)){if(!this[_0x3aa91e(0x7e4)])return;this[_0x3aa91e(0x329)]!==this['_linkedSprite'][_0x3aa91e(0x329)]&&this[_0x3aa91e(0x882)](this['_linkedSprite'][_0x3aa91e(0x329)]);}else return this[_0x3aa91e(0x592)]();}else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x3aa91e(0x6ef)]()!=='')return this[_0x3aa91e(0x6ef)]();}return'';},Game_Actor['prototype'][_0x2d1202(0x592)]=function(){const _0x1ed6bc=_0x2d1202;if(this['_battlePortrait']===undefined)this[_0x1ed6bc(0x801)]();return this[_0x1ed6bc(0x881)];},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x3b3)]=function(_0x600524){const _0x54d641=_0x2d1202;if(this['_battlePortrait']===undefined)this[_0x54d641(0x801)]();this[_0x54d641(0x881)]=_0x600524;if(SceneManager[_0x54d641(0x346)]()&&$gameParty['battleMembers']()[_0x54d641(0x7c6)](this)){if(_0x54d641(0x4e4)===_0x54d641(0x4e4)){const _0x1ab9b0=SceneManager[_0x54d641(0xb69)]['_statusWindow'];if(_0x1ab9b0)_0x1ab9b0[_0x54d641(0xa90)](this);}else{if(this[_0x54d641(0xbdc)]()==='border')return this[_0x54d641(0x436)]();else return this['isSkillItemWindowsMiddle']()?this[_0x54d641(0xacf)]():_0x52657f[_0x54d641(0xa3c)]['Scene_Battle_itemWindowRect'][_0x54d641(0x86c)](this);}}},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x8b3)]=function(){return!![];},Game_Actor[_0x2d1202(0x8ec)]['isAutoBattle']=function(){const _0x112dd6=_0x2d1202;if(!this[_0x112dd6(0x25c)]()&&BattleManager[_0x112dd6(0xa84)])return!![];return Game_Battler[_0x112dd6(0x8ec)]['isAutoBattle'][_0x112dd6(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x35e)]=Game_Actor[_0x2d1202(0x8ec)]['makeActionList'],Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x7ff)]=function(){const _0x3f80a0=_0x2d1202;if(BattleManager[_0x3f80a0(0xa84)]&&!ConfigManager[_0x3f80a0(0x75b)])return this[_0x3f80a0(0x6ac)]();else{return VisuMZ[_0x3f80a0(0xa3c)]['Game_Actor_makeActionList']['call'](this);;}},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x6ac)]=function(){const _0x5cdd23=_0x2d1202,_0x12bed8=[],_0x272164=new Game_Action(this);return _0x272164[_0x5cdd23(0x968)](),_0x12bed8[_0x5cdd23(0x5c8)](_0x272164),_0x12bed8;},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0xaf0)]=function(){const _0x63ab5e=_0x2d1202;return this[_0x63ab5e(0x28f)]()[_0x63ab5e(0x5fe)][_0x63ab5e(0xaa0)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ['BattleCore']['Settings'][_0x63ab5e(0x879)][_0x63ab5e(0xb32)];},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x24c)]=function(){const _0x22a872=_0x2d1202;if(this[_0x22a872(0xabd)][_0x22a872(0x6d7)]!==undefined)return this[_0x22a872(0xabd)][_0x22a872(0x6d7)];if(this[_0x22a872(0x832)]()['note'][_0x22a872(0xaa0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0x22a872(0xabd)][_0x22a872(0x6d7)]=eval(RegExp['$1']),this[_0x22a872(0xabd)][_0x22a872(0x2ab)]=eval(RegExp['$2']);else{if(_0x22a872(0x7ec)===_0x22a872(0x445)){if(!_0x15653b[_0x22a872(0x1fd)]())return;const _0x3764bc=this[_0x22a872(0x22c)]();if(!_0x3764bc)return;if(_0x1d4724)this[_0x22a872(0x9c7)](_0x531c8d+_0x3764bc['_baseX'],_0x307cec+_0x3764bc[_0x22a872(0x75a)],![]);_0x11fb64+=_0x3764bc[_0x22a872(0x99a)]-_0x3764bc[_0x22a872(0xb08)],_0x25da5a+=_0x3764bc['_baseY']-_0x3764bc[_0x22a872(0x8a6)],_0x3764bc[_0x22a872(0x434)](_0x4ce9be,_0x569dce,_0x4a5703);if(_0x43cbd6[_0x22a872(0x9ef)])_0x3764bc[_0x22a872(0x9fb)](_0x55c01c||_0x22a872(0x9d0));}else this['_cache'][_0x22a872(0x6d7)]=Game_Battler['prototype'][_0x22a872(0x24c)]['call'](this);}return this[_0x22a872(0xabd)][_0x22a872(0x6d7)];},Game_Actor[_0x2d1202(0x8ec)]['svBattlerAnchorY']=function(){const _0xdad61d=_0x2d1202;if(this[_0xdad61d(0xabd)][_0xdad61d(0x2ab)]!==undefined)return this[_0xdad61d(0xabd)][_0xdad61d(0x2ab)];if(this[_0xdad61d(0x832)]()[_0xdad61d(0x5fe)][_0xdad61d(0xaa0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))_0xdad61d(0x9ea)!=='EuHfR'?_0x25f72e['wtypeId']=_0x5a7555['getWtypeIdWithName'](_0x3677e1['$1']):(this[_0xdad61d(0xabd)][_0xdad61d(0x6d7)]=eval(RegExp['$1']),this[_0xdad61d(0xabd)][_0xdad61d(0x2ab)]=eval(RegExp['$2']));else{if(_0xdad61d(0x85c)===_0xdad61d(0x85c))this[_0xdad61d(0xabd)][_0xdad61d(0x2ab)]=Game_Battler[_0xdad61d(0x8ec)]['svBattlerAnchorY'][_0xdad61d(0x86c)](this);else{this[_0xdad61d(0x1fb)]=this[_0xdad61d(0x4b0)]();const _0x56c70e=_0x33055e[_0xdad61d(0xa3c)][_0xdad61d(0x6a1)][_0xdad61d(0xbd5)];_0x56c70e[_0xdad61d(0x788)]&&(this[_0xdad61d(0xad4)]=0x0);}}return this[_0xdad61d(0xabd)][_0xdad61d(0x2ab)];},Game_Actor[_0x2d1202(0x8ec)]['svBattlerShadowVisible']=function(){const _0x56564d=_0x2d1202;if(this[_0x56564d(0xabd)]['svShadow']!==undefined)return this[_0x56564d(0xabd)]['svShadow'];if(this[_0x56564d(0x832)]()[_0x56564d(0x5fe)][_0x56564d(0xaa0)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x56564d(0xabd)][_0x56564d(0x9b0)]=!![];else this['actor']()['note'][_0x56564d(0xaa0)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x56564d(0xabd)][_0x56564d(0x9b0)]=![]:this['_cache'][_0x56564d(0x9b0)]=Game_Battler[_0x56564d(0x8ec)][_0x56564d(0x1ca)][_0x56564d(0x86c)](this);return this[_0x56564d(0xabd)][_0x56564d(0x9b0)];},Game_Actor['prototype'][_0x2d1202(0x79b)]=function(){const _0x9509bd=_0x2d1202;return VisuMZ[_0x9509bd(0xa3c)][_0x9509bd(0x6a1)]['Actor'][_0x9509bd(0x474)];},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0xa1e)]=function(){const _0x4fa064=_0x2d1202,_0x2182eb=this['weapons'](),_0x3cc516=_0x2182eb[0x0]?_0x2182eb[0x0]['wtypeId']:0x0,_0x5003c2=$dataSystem['attackMotions'][_0x3cc516];_0x5003c2&&this[_0x4fa064(0xb03)](_0x5003c2[_0x4fa064(0x429)]);},Game_Actor[_0x2d1202(0x8ec)]['performAction']=function(_0x215749){const _0x24a079=_0x2d1202;Game_Battler[_0x24a079(0x8ec)][_0x24a079(0x2b3)][_0x24a079(0x86c)](this,_0x215749),this[_0x24a079(0x556)](_0x215749);},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x415)]=function(){const _0x5eb6f1=_0x2d1202,_0x6466bf=this[_0x5eb6f1(0x1ed)](),_0x51174c=_0x6466bf[0x0]?_0x6466bf[0x0]['wtypeId']:0x0;return $dataSystem[_0x5eb6f1(0xb19)][_0x51174c];},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x612)]=function(_0x61a326){const _0x2d3012=_0x2d1202;_0x61a326=_0x61a326||0x1,_0x61a326--;const _0x46f5d9=this[_0x2d3012(0x1ed)]();return _0x46f5d9[_0x61a326]?_0x46f5d9[_0x61a326][_0x2d3012(0x836)]:0x0;},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x47e)]=function(_0x4ec6b5){const _0x2cce6b=_0x2d1202;_0x4ec6b5=_0x4ec6b5||0x1,_0x4ec6b5--;const _0x272cc0=this['weapons'](),_0x1cc06e=_0x272cc0[_0x4ec6b5]?_0x272cc0[_0x4ec6b5][_0x2cce6b(0x651)]:0x0;return $dataSystem[_0x2cce6b(0xb19)][_0x1cc06e];},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x494)]=function(_0x203daf){const _0x51a61a=_0x2d1202;_0x203daf=_0x203daf||0x1,_0x203daf--;const _0x12d8ff=this[_0x51a61a(0x1ed)](),_0x273987=_0x12d8ff[_0x203daf]?_0x12d8ff[_0x203daf][_0x51a61a(0x651)]:0x0,_0x399bad=$dataSystem['attackMotions'][_0x273987];if(_0x399bad){if('AoyuW'==='vlDxs'){const _0x51c646=this['item']()[_0x51a61a(0x9e3)];if(_0x51c646[_0x51a61a(0xaa0)](/RANDOM/i))return![];if(_0x51c646[_0x51a61a(0xaa0)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x51c646['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return _0x20fb22[_0x51a61a(0xa3c)]['Game_Action_needsSelection'][_0x51a61a(0x86c)](this);}else{if(_0x399bad[_0x51a61a(0x428)]===0x0)this[_0x51a61a(0xa73)](_0x51a61a(0x261));else{if(_0x399bad[_0x51a61a(0x428)]===0x1)this[_0x51a61a(0xa73)]('swing');else{if(_0x399bad['type']===0x2){if(_0x51a61a(0x938)!=='QTSRK')this[_0x51a61a(0xa73)]('missile');else{if(!_0xbf4d67[_0x51a61a(0x346)]())return;const _0x3d9d4c=this[_0x51a61a(0x22c)]();if(!_0x3d9d4c)return;let _0x52ac43=this[_0x51a61a(0xb90)]()?_0x3d9d4c[_0x51a61a(0x864)]:_0x3d9d4c[_0x51a61a(0x746)][_0x51a61a(0x864)];_0x52ac43&&_0x52ac43[_0x51a61a(0x882)](0x0);}}}}this[_0x51a61a(0xb03)](_0x399bad['weaponImageId']);}}},Game_Battler['prototype'][_0x2d1202(0x32e)]=function(_0x356927){const _0x3302ae=_0x2d1202;this[_0x3302ae(0x80c)]=_0x356927||0x0;},Game_Battler['prototype'][_0x2d1202(0x56e)]=function(){const _0x11c106=_0x2d1202;this['_activeWeaponSlot']=this[_0x11c106(0x80c)]||0x0,this[_0x11c106(0x80c)]++;},Game_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x574)]=function(){const _0x21057b=_0x2d1202;this[_0x21057b(0x80c)]=undefined;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xa38)]=Game_Actor['prototype'][_0x2d1202(0xadd)],Game_Actor[_0x2d1202(0x8ec)]['equips']=function(){const _0x265d92=_0x2d1202;let _0x4a1f55=VisuMZ[_0x265d92(0xa3c)]['Game_Actor_equips'][_0x265d92(0x86c)](this);if(this['_tempEquipCheck'])return _0x4a1f55;if(this['_activeWeaponSlot']!==undefined){if(_0x265d92(0x66a)===_0x265d92(0x382)){const _0x29d9e3=_0x361205(_0x9702a7['$1']);return[_0x5817d0[_0x265d92(0x30d)]()[_0x265d92(0x76c)]()[_0x29d9e3]];}else{this[_0x265d92(0x1b5)]=!![];const _0x15d72c=this['equipSlots']();for(let _0x1327e2=0x0;_0x1327e2<_0x15d72c[_0x265d92(0x1d7)];_0x1327e2++){_0x15d72c[_0x1327e2]===0x1&&this[_0x265d92(0x80c)]!==_0x1327e2&&(_0x4a1f55[_0x1327e2]=null);}this[_0x265d92(0x1b5)]=undefined;}}return _0x4a1f55;},Window_BattleLog['prototype'][_0x2d1202(0x501)]=function(_0x4aec9d){const _0x56a3ee=_0x2d1202;if(_0x4aec9d[_0x56a3ee(0xb90)]()){if(_0x56a3ee(0xb20)==='tZBoK')return _0x4aec9d['weapons']()['length']||0x1;else _0x657cb0[_0x56a3ee(0xa3c)]['Game_Action_clear']['call'](this),this[_0x56a3ee(0x3d7)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x56a3ee(0x817)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x56a3ee(0x376);}else{if(_0x56a3ee(0x760)!==_0x56a3ee(0x5fa))return 0x1;else this[_0x56a3ee(0x486)]=!![];}},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x3c3)]=function(_0x36d34d,_0x2d8008){const _0x22fe31=_0x2d1202;_0x36d34d&&_0x36d34d[_0x22fe31(0xb90)]()&&_0x36d34d[_0x22fe31(0x32e)](_0x2d8008),this[_0x22fe31(0xac7)]();},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x4a3)]=function(_0x221463){const _0xfb8a03=_0x2d1202;_0x221463&&_0x221463['isActor']()&&_0x221463['clearActiveWeaponSlot'](),this[_0xfb8a03(0xac7)]();},Game_Actor[_0x2d1202(0x8ec)]['battleUIOffsetX']=function(){const _0x1e6488=_0x2d1202;let _0x3c130d=_0x1e6488(0x7ed);if(this[_0x1e6488(0xa0e)](_0x3c130d))return this['_cache'][_0x3c130d];return this[_0x1e6488(0xabd)][_0x3c130d]=this[_0x1e6488(0x9f6)](this[_0x1e6488(0x832)]()),this[_0x1e6488(0xabd)][_0x3c130d];},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x7ba)]=function(){const _0x342425=_0x2d1202;let _0x2b0645=_0x342425(0x7ba);if(this[_0x342425(0xa0e)](_0x2b0645))return this['_cache'][_0x2b0645];return this[_0x342425(0xabd)][_0x2b0645]=this['createBattleUIOffsetY'](this[_0x342425(0x832)]()),this['_cache'][_0x2b0645];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x3b5)]=Game_Enemy[_0x2d1202(0x8ec)]['setup'],Game_Enemy[_0x2d1202(0x8ec)]['setup']=function(_0x2409d6,_0x4a55c6,_0x4d8eb2){const _0x401100=_0x2d1202;_0x2409d6=DataManager[_0x401100(0xa28)](_0x2409d6),VisuMZ['BattleCore'][_0x401100(0x3b5)][_0x401100(0x86c)](this,_0x2409d6,_0x4a55c6,_0x4d8eb2),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x401100(0x87e)](),this[_0x401100(0x780)](),this[_0x401100(0x334)](),Imported[_0x401100(0x716)]&&this['recoverAll']();},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x780)]=function(){const _0x264c6c=_0x2d1202,_0x13886a=VisuMZ[_0x264c6c(0xa3c)][_0x264c6c(0x6a1)][_0x264c6c(0x540)];this[_0x264c6c(0x925)]=_0x13886a[_0x264c6c(0x56f)],this[_0x264c6c(0x41e)]={};},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x334)]=function(){const _0x33b963=_0x2d1202,_0x58260f=VisuMZ[_0x33b963(0xa3c)][_0x33b963(0x6a1)][_0x33b963(0x540)],_0x3ab6fe=this[_0x33b963(0xae4)]()[_0x33b963(0x5fe)];this[_0x33b963(0x41e)]={'name':'','wtypeId':_0x58260f[_0x33b963(0x554)],'collapse':_0x58260f[_0x33b963(0x571)],'motionIdle':_0x58260f[_0x33b963(0x319)],'width':_0x58260f[_0x33b963(0x804)]||0x40,'height':_0x58260f[_0x33b963(0x8e0)]||0x40,'anchorX':_0x58260f[_0x33b963(0x7b3)]||0x0,'anchorY':_0x58260f[_0x33b963(0xa23)]||0x0,'shadow':_0x58260f[_0x33b963(0x7f5)]};_0x3ab6fe[_0x33b963(0xaa0)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&('VyOMR'!==_0x33b963(0x846)?this[_0x33b963(0x400)][_0x33b963(0x5c8)](_0x9293bf):this[_0x33b963(0x925)]=Number(RegExp['$1']));const _0x110f49=this['_svBattlerData'];if(_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW BATTLER: (.*)>/i))_0x33b963(0x7ae)!=='gzhmz'?_0x110f49[_0x33b963(0x476)]=String(RegExp['$1']):(_0x327ebe[_0x33b963(0xa3c)][_0x33b963(0x8b8)]['call'](this),_0x943b29[_0x33b963(0x768)]()&&_0x52402d[_0x33b963(0x5dc)]&&(_0x1fa769[_0x33b963(0x5dc)]=![],this[_0x33b963(0x964)]()));else{if(_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x33b963(0x354)!=='rAAxZ'){if(this[_0x33b963(0x8b7)]<=0x0)return;const _0x4019ea=this['_floatDuration'],_0x156dde=this[_0x33b963(0x6c9)],_0x50757b=this[_0x33b963(0x3c8)];_0x59e25c[_0x33b963(0x9ef)]?this[_0x33b963(0x301)]=this[_0x33b963(0xa4c)](this['_floatHeight'],this['_targetFloatHeight'],_0x4019ea,_0x156dde,_0x50757b):this[_0x33b963(0x301)]=(this[_0x33b963(0x301)]*(_0x4019ea-0x1)+this[_0x33b963(0x65e)])/_0x4019ea;this[_0x33b963(0x8b7)]--;if(this[_0x33b963(0x8b7)]<=0x0)this[_0x33b963(0x4e5)]();}else{const _0x1a5684=String(RegExp['$1'])[_0x33b963(0x2fd)](/[\r\n]+/)[_0x33b963(0x9b6)]('');_0x110f49[_0x33b963(0x476)]=DataManager[_0x33b963(0x6d1)](_0x1a5684);}}}_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x110f49['anchorX']=eval(RegExp['$1']),_0x110f49['anchorY']=eval(RegExp['$2']));if(_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW COLLAPSE>/i))_0x110f49[_0x33b963(0x8f3)]=!![];else{if(_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW NO COLLAPSE>/i)){if(_0x33b963(0x95b)!==_0x33b963(0x95b)){if(!_0xcad8c5[_0x33b963(0x346)]())return;const _0x7f51c1=_0x1cd500[_0x33b963(0xa20)]();if(!_0x7f51c1)return;_0x7f51c1['setWaitMode'](_0x33b963(0x64f));}else _0x110f49[_0x33b963(0x8f3)]=![];}}if(_0x3ab6fe['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x110f49[_0x33b963(0x499)]=!![];else _0x3ab6fe['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x110f49[_0x33b963(0x499)]=![]);if(_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x110f49[_0x33b963(0x506)]=String(RegExp['$1'])[_0x33b963(0x8e4)]()['trim']();else{if(_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x33b963(0x805)===_0x33b963(0x896))return _0x2af99a[_0x33b963(0x421)][_0x33b963(0x6a1)]['QoL']['DigitGroupingDamageSprites'];else{const _0x1786bb=String(RegExp['$1'])[_0x33b963(0x2fd)](/[\r\n]+/)[_0x33b963(0x9b6)]('');_0x110f49[_0x33b963(0x506)]=DataManager[_0x33b963(0x6d1)](_0x1786bb);}}}_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x110f49[_0x33b963(0x72b)]=Number(RegExp['$1']),_0x110f49[_0x33b963(0x940)]=Number(RegExp['$2']));if(_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW WEAPON: (.*)>/i)){if(_0x33b963(0x234)===_0x33b963(0x451))return _0x59feaa[_0x33b963(0xa3c)][_0x33b963(0x6a1)]['Mechanics'][_0x33b963(0x6a6)];else _0x110f49[_0x33b963(0x651)]=DataManager[_0x33b963(0xb9a)](RegExp['$1']);}else{if(_0x3ab6fe[_0x33b963(0xaa0)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x157262=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x33b963(0x9b6)](''),_0x1ee070=DataManager[_0x33b963(0x6d1)](_0x157262);_0x110f49['wtypeId']=DataManager[_0x33b963(0xb9a)](_0x1ee070);}}if(Imported[_0x33b963(0x716)]){const _0x2f0349=this['getTraitSetKeys']();for(const _0xd24f90 of _0x2f0349){const _0x2a47fd=this['traitSet'](_0xd24f90)['Name'][_0x33b963(0x248)]()['trim'](),_0x291e29=_0xd24f90['toUpperCase']()[_0x33b963(0x43b)]();if(_0x3ab6fe['match'](VisuMZ['ElementStatusCore'][_0x33b963(0x480)][_0x33b963(0x1e1)[_0x33b963(0x995)](_0x291e29,_0x2a47fd)]))_0x110f49['name']=String(RegExp['$1']);else{if(_0x3ab6fe[_0x33b963(0xaa0)](VisuMZ['ElementStatusCore']['RegExp'][_0x33b963(0xbd4)['format'](_0x291e29,_0x2a47fd)])){const _0xafe280=String(RegExp['$1'])[_0x33b963(0x2fd)](/[\r\n]+/)[_0x33b963(0x9b6)]('');_0x110f49[_0x33b963(0x476)]=DataManager[_0x33b963(0x6d1)](_0xafe280);}}if(_0x3ab6fe[_0x33b963(0xaa0)](VisuMZ[_0x33b963(0xb14)][_0x33b963(0x480)][_0x33b963(0xa77)[_0x33b963(0x995)](_0x291e29,_0x2a47fd)])){if('kKcLD'===_0x33b963(0x1b8))_0x110f49[_0x33b963(0x651)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else return this['evalDamageFormulaBattleCore'](_0x1866ce);}else{if(_0x3ab6fe[_0x33b963(0xaa0)](VisuMZ[_0x33b963(0xb14)][_0x33b963(0x480)]['SvWeaponMass-%1-%2'['format'](_0x291e29,_0x2a47fd)])){if('byjrG'===_0x33b963(0x9a9)){const _0x33596d=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x23cee7=DataManager[_0x33b963(0x6d1)](_0x33596d);_0x110f49[_0x33b963(0x651)]=DataManager['getWtypeIdWithName'](_0x23cee7);}else _0x48e36a['BattleCore'][_0x33b963(0x542)][_0x33b963(0x86c)](this,_0x5202c6);}}if(_0x3ab6fe[_0x33b963(0xaa0)](VisuMZ[_0x33b963(0xb14)]['RegExp'][_0x33b963(0xaff)['format'](_0x291e29,_0x2a47fd)]))_0x110f49[_0x33b963(0x506)]=String(RegExp['$1'])[_0x33b963(0x8e4)]()[_0x33b963(0x43b)]();else{if(_0x3ab6fe['match'](VisuMZ[_0x33b963(0xb14)][_0x33b963(0x480)][_0x33b963(0x36b)[_0x33b963(0x995)](_0x291e29,_0x2a47fd)])){const _0x1ca5e9=String(RegExp['$1'])[_0x33b963(0x2fd)](/[\r\n]+/)[_0x33b963(0x9b6)]('');_0x110f49[_0x33b963(0x506)]=DataManager['processRandomizedData'](_0x1ca5e9);}}}}},Game_Enemy['prototype'][_0x2d1202(0xb96)]=function(){const _0x4a2383=_0x2d1202;return this[_0x4a2383(0x925)]||0x0;},Game_Enemy[_0x2d1202(0x8ec)]['attackAnimationId2']=function(){return this['attackAnimationId1']();},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x612)]=function(_0x4a3594){const _0x51f8fd=_0x2d1202;return this[_0x51f8fd(0xb96)]();},Game_Enemy['prototype'][_0x2d1202(0x5cf)]=function(){const _0x4ed488=_0x2d1202;if(this[_0x4ed488(0xae4)]()['note'][_0x4ed488(0xaa0)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x4ed488(0x8ec)][_0x4ed488(0x5cf)]['call'](this);},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x4b8)]=function(){const _0x41f04d=_0x2d1202;if(this['enemy']()[_0x41f04d(0x5fe)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x351)]=function(){const _0x551674=_0x2d1202,_0x5342da=[];for(const _0x4c5d20 of this['enemy']()[_0x551674(0x5d7)]){const _0x4a6d24=$dataSkills[_0x4c5d20['skillId']];if(_0x4a6d24&&!_0x5342da[_0x551674(0x7c6)](_0x4a6d24))_0x5342da[_0x551674(0x5c8)](_0x4a6d24);}return _0x5342da;},Game_Enemy['prototype']['battleUIOffsetX']=function(){const _0x3d8f82=_0x2d1202;let _0x3782c5=_0x3d8f82(0x7ed);if(this['checkCacheKey'](_0x3782c5))return this['_cache'][_0x3782c5];return this['_cache'][_0x3782c5]=this[_0x3d8f82(0x9f6)](this[_0x3d8f82(0xae4)]()),this[_0x3d8f82(0xabd)][_0x3782c5];},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x7ba)]=function(){const _0x3111ab=_0x2d1202;let _0x13bc40=_0x3111ab(0x7ba);if(this[_0x3111ab(0xa0e)](_0x13bc40))return this[_0x3111ab(0xabd)][_0x13bc40];return this[_0x3111ab(0xabd)][_0x13bc40]=this[_0x3111ab(0x348)](this[_0x3111ab(0xae4)]()),this['_cache'][_0x13bc40];},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x211)]=function(){const _0x1bbc69=_0x2d1202;if(this['_svBattlerData']!==undefined)return this[_0x1bbc69(0x41e)];return this[_0x1bbc69(0x334)](),this['_svBattlerData'];},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0xb7b)]=function(){const _0xdb8e85=_0x2d1202;return this[_0xdb8e85(0x211)]()[_0xdb8e85(0x476)]!=='';},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x867)]=function(){const _0xf2898f=_0x2d1202;return this[_0xf2898f(0x211)]()[_0xf2898f(0x476)];},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x79b)]=function(){const _0x333e55=_0x2d1202;return this[_0x333e55(0xb7b)]()?VisuMZ[_0x333e55(0xa3c)][_0x333e55(0x6a1)][_0x333e55(0x97d)][_0x333e55(0x474)]:VisuMZ['BattleCore']['Settings'][_0x333e55(0x540)][_0x333e55(0x474)];},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x2b3)]=function(_0x4b970c){const _0x1da507=_0x2d1202;Game_Battler[_0x1da507(0x8ec)]['performAction']['call'](this,_0x4b970c);if(this[_0x1da507(0xb7b)]())this[_0x1da507(0x556)](_0x4b970c);},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x7a1)]=function(){const _0x487120=_0x2d1202,_0x229a2e=this[_0x487120(0x211)]()['wtypeId']||0x0,_0xeef3ef=$dataSystem['attackMotions'][_0x229a2e];if(_0xeef3ef){if(_0x487120(0x27e)!==_0x487120(0x27e))_0x309a24['x']+=_0x8d50f2[_0x487120(0x373)]*_0x2247a1,_0x16ff2c['y']+=_0x4667d7[_0x487120(0x7c7)];else{if(_0xeef3ef[_0x487120(0x428)]===0x0)_0x487120(0x78c)!==_0x487120(0x78c)?(_0x3adb5b[_0x487120(0xa3c)][_0x487120(0x77c)][_0x487120(0x86c)](this),this[_0x487120(0x834)]&&(this['bitmap'][_0x487120(0x3a4)]=_0x4bd804['BattleCore'][_0x487120(0x6a1)][_0x487120(0x97d)][_0x487120(0x474)])):this[_0x487120(0xa73)](_0x487120(0x261));else{if(_0xeef3ef['type']===0x1)this[_0x487120(0xa73)](_0x487120(0x74e));else _0xeef3ef[_0x487120(0x428)]===0x2&&this[_0x487120(0xa73)](_0x487120(0x7fb));}}}},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0xa1e)]=function(){const _0x543737=_0x2d1202,_0x37cd36=this[_0x543737(0x211)]()[_0x543737(0x651)]||0x0,_0x810061=$dataSystem['attackMotions'][_0x37cd36];_0x810061&&this[_0x543737(0xb03)](_0x810061[_0x543737(0x429)]);},Game_Enemy['prototype'][_0x2d1202(0x415)]=function(){const _0x50c281=_0x2d1202,_0x4f9d88=this[_0x50c281(0x211)]()[_0x50c281(0x651)]||0x0;return $dataSystem[_0x50c281(0xb19)][_0x4f9d88];},Game_Enemy['prototype'][_0x2d1202(0x47e)]=function(_0x22fee2){const _0x1f4d52=_0x2d1202;return this[_0x1f4d52(0x415)]();},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x9a5)]=function(){const _0x10d9d5=_0x2d1202;Game_Battler[_0x10d9d5(0x8ec)][_0x10d9d5(0x9a5)][_0x10d9d5(0x86c)](this),this[_0x10d9d5(0x8b3)]()&&this['hasSvBattler']()&&this['requestMotion'](_0x10d9d5(0x26a)),SoundManager['playEnemyDamage']();},Game_Enemy['prototype']['performEvasion']=function(){const _0x1b62da=_0x2d1202;Game_Battler[_0x1b62da(0x8ec)][_0x1b62da(0x939)]['call'](this),this[_0x1b62da(0xa73)](_0x1b62da(0x5c0));},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x58f)]=function(){const _0x43c391=_0x2d1202;Game_Battler[_0x43c391(0x8ec)][_0x43c391(0x58f)]['call'](this),this['requestMotion'](_0x43c391(0x5c0));},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x371)]=function(){const _0x2c2f13=_0x2d1202;Game_Battler['prototype']['performCounter'][_0x2c2f13(0x86c)](this),this[_0x2c2f13(0x7a1)]();},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x84e)]=function(){const _0x55c5ec=_0x2d1202;if(this['hasSvBattler']()){if(_0x55c5ec(0x6a2)===_0x55c5ec(0x92f))return this['textColor'](_0x3047a6(_0x278bf8));else{if(this[_0x55c5ec(0x2c6)]()>=0x1)return!![];return this[_0x55c5ec(0x211)]()[_0x55c5ec(0x8f3)];}}else{if(_0x55c5ec(0x4a2)==='NhpDX')return!![];else{if(this[_0x55c5ec(0xabd)][_0x55c5ec(0x9b0)]!==_0x58b740)return this[_0x55c5ec(0xabd)][_0x55c5ec(0x9b0)];if(this[_0x55c5ec(0x832)]()[_0x55c5ec(0x5fe)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x55c5ec(0xabd)][_0x55c5ec(0x9b0)]=!![];else this[_0x55c5ec(0x832)]()[_0x55c5ec(0x5fe)]['match'](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x55c5ec(0xabd)][_0x55c5ec(0x9b0)]=![]:this[_0x55c5ec(0xabd)][_0x55c5ec(0x9b0)]=_0x4de601[_0x55c5ec(0x8ec)][_0x55c5ec(0x1ca)][_0x55c5ec(0x86c)](this);return this[_0x55c5ec(0xabd)][_0x55c5ec(0x9b0)];}}},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x24c)]=function(){const _0x27dbc2=_0x2d1202;return this[_0x27dbc2(0x211)]()[_0x27dbc2(0x6fc)];},Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x355)]=function(){const _0x5af150=_0x2d1202;return this[_0x5af150(0x211)]()[_0x5af150(0x869)];},Game_Enemy['prototype'][_0x2d1202(0x1ca)]=function(){const _0x4f79ec=_0x2d1202;return this[_0x4f79ec(0x211)]()[_0x4f79ec(0x499)];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xa02)]=Game_Enemy['prototype']['transform'],Game_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x4ce)]=function(_0x527dbd){const _0x269919=_0x2d1202;VisuMZ[_0x269919(0xa3c)][_0x269919(0xa02)]['call'](this,_0x527dbd),this[_0x269919(0x780)](),this[_0x269919(0x334)]();const _0x10aa9f=this[_0x269919(0x22c)]();if(_0x10aa9f)_0x10aa9f[_0x269919(0x53a)](this);},Game_Unit['prototype'][_0x2d1202(0x4a1)]=function(_0x203444){const _0x5de773=_0x2d1202;for(const _0x4916e9 of this[_0x5de773(0x76c)]()){if('uzAAV'!==_0x5de773(0x7a5))this[_0x5de773(0xa73)](_0x5de773(0x992));else{if(_0x4916e9)_0x4916e9[_0x5de773(0x4a1)](_0x203444);}}},Game_Unit[_0x2d1202(0x8ec)][_0x2d1202(0x584)]=function(){const _0x45d52e=_0x2d1202,_0x2078d0=this[_0x45d52e(0x973)]();return _0x2078d0[Math[_0x45d52e(0x847)](_0x2078d0[_0x45d52e(0x1d7)])];},VisuMZ['BattleCore'][_0x2d1202(0x66c)]=Game_Party[_0x2d1202(0x8ec)][_0x2d1202(0x81c)],Game_Party[_0x2d1202(0x8ec)][_0x2d1202(0x81c)]=function(_0x4bed1c){const _0xe160dd=_0x2d1202;VisuMZ['BattleCore'][_0xe160dd(0x66c)][_0xe160dd(0x86c)](this,_0x4bed1c),BattleManager[_0xe160dd(0xae8)]();},VisuMZ['BattleCore'][_0x2d1202(0x1ce)]=Game_Party[_0x2d1202(0x8ec)]['removeActor'],Game_Party[_0x2d1202(0x8ec)]['removeActor']=function(_0x44d4ca){const _0xa9f2cd=_0x2d1202;VisuMZ[_0xa9f2cd(0xa3c)][_0xa9f2cd(0x1ce)]['call'](this,_0x44d4ca),BattleManager[_0xa9f2cd(0xae8)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x409)]=Game_Troop[_0x2d1202(0x8ec)][_0x2d1202(0x882)],Game_Troop['prototype'][_0x2d1202(0x882)]=function(_0x1127a8){const _0x2a4f49=_0x2d1202;$gameTemp[_0x2a4f49(0x95d)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x1127a8),VisuMZ[_0x2a4f49(0xa3c)][_0x2a4f49(0x409)]['call'](this,_0x1127a8);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xbd0)]=Game_Troop['prototype']['expTotal'],Game_Troop[_0x2d1202(0x8ec)]['expTotal']=function(){const _0x54685f=_0x2d1202;let _0x13af92=VisuMZ['BattleCore'][_0x54685f(0xbd0)][_0x54685f(0x86c)](this);if(this[_0x54685f(0xb98)]){if(_0x54685f(0x7d3)===_0x54685f(0x7ad)){if(!_0x1f58ac[_0x54685f(0x346)]())return;if(!_0xff0746[_0x54685f(0x893)])return;const _0x4b3922=_0x3c4771[_0x54685f(0xa20)]();if(!_0x4b3922)return;_0x4b3922[_0x54685f(0x76a)](_0x54685f(0x753));}else _0x13af92*=this[_0x54685f(0xb98)]();}return Math[_0x54685f(0xb26)](_0x13af92);},Game_Troop[_0x2d1202(0x8ec)][_0x2d1202(0xb98)]=function(){return 0x1;},VisuMZ['BattleCore'][_0x2d1202(0x7e0)]=Game_Map[_0x2d1202(0x8ec)]['setupBattleback'],Game_Map[_0x2d1202(0x8ec)][_0x2d1202(0x850)]=function(){const _0x2a3569=_0x2d1202;VisuMZ['BattleCore']['Game_Map_setupBattleback'][_0x2a3569(0x86c)](this),this['setupBattlebackBattleCore']();},Game_Map[_0x2d1202(0x8ec)][_0x2d1202(0xb6f)]=function(){const _0x478d26=_0x2d1202;this[_0x478d26(0x2e2)]={},this[_0x478d26(0x839)]={};if(!$dataMap)return;const _0x4587a3=$dataMap[_0x478d26(0x5fe)];if(!_0x4587a3)return;const _0x1e6c66=_0x4587a3[_0x478d26(0xaa0)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x1e6c66){if(_0x478d26(0x8f2)!=='bvSuQ')for(const _0x79272a of _0x1e6c66){if('WzzRx'==='SwoOF'){if(this[_0x478d26(0x7a6)]())return;this[_0x478d26(0x73d)]=!![],this['_deathStateApplied']=![];}else{_0x79272a[_0x478d26(0xaa0)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x215566=Number(RegExp['$1']),_0x26fe2f=Number(RegExp['$2']),_0xe2050d=_0x26fe2f===0x1?this[_0x478d26(0x2e2)]:this['_regionBattleback2'],_0x284adf=String(RegExp['$3']);_0xe2050d[_0x215566]=_0x284adf;}}else _0x41b7fb[_0x478d26(0xa3c)][_0x478d26(0x46e)]['call'](this,_0x2249a5);}},VisuMZ['BattleCore'][_0x2d1202(0x7a7)]=Game_Map['prototype'][_0x2d1202(0x3ea)],Game_Map[_0x2d1202(0x8ec)][_0x2d1202(0x3ea)]=function(){const _0x5d8da3=_0x2d1202;if(!BattleManager[_0x5d8da3(0xab3)]()){const _0x50b1ca=$gamePlayer[_0x5d8da3(0x68e)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x5d8da3(0x2e2)]&&this[_0x5d8da3(0x2e2)][_0x50b1ca]){if(_0x5d8da3(0x60b)==='wugSj')return this[_0x5d8da3(0x2e2)][_0x50b1ca];else{if(!_0x24ec98['isSideView']())return;const _0x44415f=this[_0x5d8da3(0x22c)](),_0x3bfa38=_0x265d48['battler']();if(!_0x44415f||!_0x3bfa38)return;const _0x420483=_0x3bfa38[_0x5d8da3(0x99a)],_0x5085ed=_0x3bfa38['_baseY'];this[_0x5d8da3(0x9be)](_0x420483,_0x5085ed,0x0,![],'Linear',-0x1),_0x44415f[_0x5d8da3(0x1e6)]();const _0x280b0e=_0x54474a[_0x5d8da3(0xa3c)]['Settings'][_0x5d8da3(0xb3f)];let _0x3ff047=(_0x3bfa38['width']+_0x44415f['width'])/0x2;_0x3ff047*=this[_0x5d8da3(0xb90)]()?0x1:-0x1;let _0x565ca4=_0x280b0e[_0x5d8da3(0x977)]*(this['isActor']()?0x1:-0x1);_0x41777a[_0x5d8da3(0x461)](_0x3ff047,_0x565ca4,0x0,![],_0x5d8da3(0x9d0)),_0x3bfa38[_0x5d8da3(0x1e6)]();}}}return VisuMZ[_0x5d8da3(0xa3c)][_0x5d8da3(0x7a7)][_0x5d8da3(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)]['Game_Map_battleback2Name']=Game_Map[_0x2d1202(0x8ec)][_0x2d1202(0x2f5)],Game_Map[_0x2d1202(0x8ec)][_0x2d1202(0x2f5)]=function(){const _0x554888=_0x2d1202;if(!BattleManager['isBattleTest']()){const _0x4f0a05=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x554888(0x2e2)]&&this['_regionBattleback2'][_0x4f0a05]){if(_0x554888(0xae7)!==_0x554888(0xae7)){if(!this[_0x554888(0x2e9)])return;if(!_0x55a10a)return;this[_0x554888(0x2e9)][_0x554888(0x426)](_0x399371);}else return this['_regionBattleback2'][_0x4f0a05];}}return VisuMZ[_0x554888(0xa3c)]['Game_Map_battleback2Name'][_0x554888(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xa97)]=Game_Map[_0x2d1202(0x8ec)][_0x2d1202(0x236)],Game_Map[_0x2d1202(0x8ec)][_0x2d1202(0x236)]=function(){const _0x190d31=_0x2d1202;let _0x534571=JsonEx[_0x190d31(0x1c7)](VisuMZ[_0x190d31(0xa3c)][_0x190d31(0xa97)]['call'](this));return VisuMZ[_0x190d31(0xa3c)]['ShuffleArray'](_0x534571);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x581)]=function(_0x52e569){const _0x5e3ee8=_0x2d1202;var _0x56cdc3,_0x248509,_0x27ef1f;for(_0x27ef1f=_0x52e569[_0x5e3ee8(0x1d7)]-0x1;_0x27ef1f>0x0;_0x27ef1f--){_0x56cdc3=Math[_0x5e3ee8(0x914)](Math[_0x5e3ee8(0x5dd)]()*(_0x27ef1f+0x1)),_0x248509=_0x52e569[_0x27ef1f],_0x52e569[_0x27ef1f]=_0x52e569[_0x56cdc3],_0x52e569[_0x56cdc3]=_0x248509;}return _0x52e569;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x699)]=Game_Interpreter[_0x2d1202(0x8ec)]['command357'],Game_Interpreter[_0x2d1202(0x8ec)]['command357']=function(_0x3a18b0){const _0x271dac=_0x2d1202;return $gameTemp[_0x271dac(0x640)](this),VisuMZ[_0x271dac(0xa3c)][_0x271dac(0x699)][_0x271dac(0x86c)](this,_0x3a18b0);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x21e)]=Game_Interpreter['prototype']['updateWaitMode'],Game_Interpreter[_0x2d1202(0x8ec)]['updateWaitMode']=function(){const _0x2e1117=_0x2d1202;if(SceneManager['isSceneBattle']()){if('KBrpj'===_0x2e1117(0x96f)){if(_0x2984b5['battleCameraData']()['angleDuration']>0x0)return!![];this['_waitMode']='';}else switch(this[_0x2e1117(0xa2b)]){case'battleAngle':if(Imported[_0x2e1117(0x893)]){if($gameScreen['battleCameraData']()[_0x2e1117(0x718)]>0x0)return!![];this[_0x2e1117(0xa2b)]='';}break;case'battleAnimation':if(BattleManager[_0x2e1117(0x3d2)][_0x2e1117(0x974)]())return!![];this[_0x2e1117(0xa2b)]='';break;case _0x2e1117(0x424):if(Imported[_0x2e1117(0x893)]){if($gameScreen['battleCameraData']()['cameraDuration']>0x0)return!![];if($gameScreen['battleCameraData']()['cameraOffsetDuration']>0x0)return!![];this[_0x2e1117(0xa2b)]='';}break;case _0x2e1117(0x7c1):if(BattleManager[_0x2e1117(0x3d2)]['isEffecting']())return!![];this[_0x2e1117(0xa2b)]='';break;case _0x2e1117(0x50d):if(BattleManager['_spriteset'][_0x2e1117(0x636)]())return!![];this[_0x2e1117(0xa2b)]='';break;case _0x2e1117(0x6c5):if(BattleManager[_0x2e1117(0x3d2)]['isAnyoneJumping']())return!![];this[_0x2e1117(0xa2b)]='';break;case _0x2e1117(0x34c):if(BattleManager[_0x2e1117(0x5d0)][_0x2e1117(0x623)]())return!![];this[_0x2e1117(0xa2b)]='';break;case'battleMove':if(BattleManager[_0x2e1117(0x3d2)][_0x2e1117(0x3e6)]())return!![];this[_0x2e1117(0xa2b)]='';break;case _0x2e1117(0xb2b):if(BattleManager['_spriteset'][_0x2e1117(0x775)]())return!![];this[_0x2e1117(0xa2b)]='';break;case _0x2e1117(0xa3d):if(BattleManager[_0x2e1117(0x3d2)]['isAnyoneGrowing']())return!![];this['_waitMode']='';break;case _0x2e1117(0x91c):if(BattleManager[_0x2e1117(0x3d2)][_0x2e1117(0xbd2)]())return!![];this['_waitMode']='';break;case'battleProjectiles':if(Imported['VisuMZ_3_ActSeqProjectiles']){if('lqQeE'===_0x2e1117(0x36d)){if(BattleManager[_0x2e1117(0x3d2)][_0x2e1117(0x498)]())return!![];this[_0x2e1117(0xa2b)]='';}else{if(!_0x12c00e[_0x2e1117(0x1fd)]())return;this[_0x2e1117(0x63e)]=_0xb4a0a0;const _0x498548=this[_0x2e1117(0x22c)]();if(_0x498548)_0x498548[_0x2e1117(0x815)]();}}break;case _0x2e1117(0x375):if(Imported[_0x2e1117(0x893)]){if(_0x2e1117(0x8d9)!==_0x2e1117(0x76d)){if($gameScreen['battleCameraData']()[_0x2e1117(0x406)]>0x0)return!![];this[_0x2e1117(0xa2b)]='';}else _0x506468['Actor'][_0x2e1117(0x5f5)]=!![];}break;case _0x2e1117(0x64f):if(BattleManager[_0x2e1117(0x3d2)][_0x2e1117(0xaf4)]())return!![];this[_0x2e1117(0xa2b)]='';break;case _0x2e1117(0x5cc):if(Imported[_0x2e1117(0x893)]){if($gameScreen[_0x2e1117(0x438)]()['zoomDuration']>0x0)return!![];this[_0x2e1117(0xa2b)]='';}break;}}return VisuMZ[_0x2e1117(0xa3c)][_0x2e1117(0x21e)]['call'](this);},VisuMZ['BattleCore']['Game_Interpreter_command301']=Game_Interpreter[_0x2d1202(0x8ec)][_0x2d1202(0x40d)],Game_Interpreter[_0x2d1202(0x8ec)]['command301']=function(_0x339822){const _0x26dadf=_0x2d1202;if(!$gameParty['inBattle']())return this['command301_PreBattleEvent'](_0x339822);else{if(_0x26dadf(0x4e3)===_0x26dadf(0xb79))_0x18696e[_0x26dadf(0x986)]();else return VisuMZ[_0x26dadf(0xa3c)][_0x26dadf(0x56a)]['call'](this,_0x339822);}},Game_Interpreter[_0x2d1202(0x8ec)][_0x2d1202(0x997)]=function(_0x41ebd1){const _0x4b51fc=_0x2d1202;return VisuMZ[_0x4b51fc(0xa3c)]['Game_Interpreter_command301'][_0x4b51fc(0x86c)](this,_0x41ebd1),BattleManager[_0x4b51fc(0x1db)](_0x589f9f=>{const _0x44436d=_0x4b51fc;if(_0x44436d(0xaf9)!==_0x44436d(0x38e))this[_0x44436d(0xa5d)][this[_0x44436d(0x1b7)]]=_0x589f9f;else return _0x2a57fc[_0x44436d(0xa3c)][_0x44436d(0x6a1)]['Actor'][_0x44436d(0x7f5)];}),!![];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x602)]=function(_0x9e49b9){const _0x2638d7=_0x2d1202,_0x1abfb6=$dataCommonEvents[_0x9e49b9];if(!_0x1abfb6)return![];if(_0x1abfb6[_0x2638d7(0x7e9)][_0x2638d7(0x1d7)]<=0x1)return![];return!![];},Game_Interpreter[_0x2d1202(0x8ec)][_0x2d1202(0xac6)]=function(_0x52a65b){const _0xe0ab2e=_0x2d1202,_0x5e22da=VisuMZ[_0xe0ab2e(0xa3c)][_0xe0ab2e(0x6a1)][_0xe0ab2e(0x51c)],_0x215b98=_0x5e22da[_0xe0ab2e(0x285)],_0x43ea7a=$dataCommonEvents[_0x215b98];if(_0x43ea7a&&VisuMZ[_0xe0ab2e(0xa3c)][_0xe0ab2e(0x602)](_0x215b98)){const _0x5f5bc3=this[_0xe0ab2e(0xaa1)]()?this['_eventId']:0x0,_0x3dcf02=_0x43ea7a['list'];this['setupChild'](_0x3dcf02,_0x5f5bc3),this[_0xe0ab2e(0x83f)]=JsonEx[_0xe0ab2e(0x1c7)](this[_0xe0ab2e(0x83f)]);const _0x5adcde={'code':0xbc3,'indent':this[_0xe0ab2e(0x1b7)],'parameters':JsonEx[_0xe0ab2e(0x1c7)](_0x52a65b)};return this['_list'][_0xe0ab2e(0x62f)](this[_0xe0ab2e(0x283)]+0x1,0x0,_0x5adcde),!![];}else return VisuMZ[_0xe0ab2e(0xa3c)][_0xe0ab2e(0x56a)][_0xe0ab2e(0x86c)](this,_0x52a65b);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x4ff)]=BattleManager['onEncounter'],BattleManager[_0x2d1202(0x7d8)]=function(){const _0xf0d662=_0x2d1202;VisuMZ[_0xf0d662(0xa3c)][_0xf0d662(0x4ff)]['call'](this),this[_0xf0d662(0x407)]();},BattleManager[_0x2d1202(0x407)]=function(){const _0x4d047b=_0x2d1202,_0x2c0fa5=VisuMZ[_0x4d047b(0xa3c)][_0x4d047b(0x6a1)][_0x4d047b(0x51c)],_0x2d1461=_0x2c0fa5[_0x4d047b(0x285)];_0x2d1461&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x2d1461)&&(this[_0x4d047b(0x470)]=!![],$gameTemp[_0x4d047b(0xadb)](_0x2c0fa5[_0x4d047b(0x285)]),$gameMap[_0x4d047b(0xa0f)](),$gameMap[_0x4d047b(0x1e8)]['_preBattleCommonEvent']=!![]),_0x2c0fa5['DefeatEvent']>0x0&&(this[_0x4d047b(0x2b1)]=!![]);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x529)]=Scene_Map[_0x2d1202(0x8ec)][_0x2d1202(0x8da)],Scene_Map['prototype'][_0x2d1202(0x8da)]=function(){const _0x30a75a=_0x2d1202;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ['BattleCore'][_0x30a75a(0x529)]['call'](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x562)]=Scene_Map[_0x2d1202(0x8ec)][_0x2d1202(0x6ed)],Scene_Map[_0x2d1202(0x8ec)][_0x2d1202(0x6ed)]=function(){const _0xe9376b=_0x2d1202;BattleManager['_battleCoreBattleStartEvent']?this['battleCorePreBattleCommonEvent']():_0xe9376b(0x9a1)===_0xe9376b(0x9a1)?VisuMZ[_0xe9376b(0xa3c)][_0xe9376b(0x562)][_0xe9376b(0x86c)](this):(_0x4341e0[_0xe9376b(0xa3c)][_0xe9376b(0x7b5)][_0xe9376b(0x86c)](this),this[_0xe9376b(0xac7)]());},Scene_Map['prototype']['battleCorePreBattleCommonEvent']=function(){const _0x171291=_0x2d1202;this[_0x171291(0x486)]=!![];},VisuMZ[_0x2d1202(0xa3c)]['SceneManager_isSceneChanging']=SceneManager[_0x2d1202(0x36e)],SceneManager[_0x2d1202(0x36e)]=function(){const _0x1c8c8e=_0x2d1202;if(BattleManager[_0x1c8c8e(0x470)])return![];return VisuMZ[_0x1c8c8e(0xa3c)][_0x1c8c8e(0x44f)][_0x1c8c8e(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x6fd)]=Game_Interpreter[_0x2d1202(0x8ec)][_0x2d1202(0x865)],Game_Interpreter[_0x2d1202(0x8ec)]['terminate']=function(){const _0x24772c=_0x2d1202;VisuMZ[_0x24772c(0xa3c)]['Game_Interpreter_terminate'][_0x24772c(0x86c)](this),this[_0x24772c(0x4ab)]&&(this[_0x24772c(0x4ab)]=undefined,SceneManager['_scene']['battleCoreResumeLaunchBattle']());},Scene_Map[_0x2d1202(0x8ec)][_0x2d1202(0x4c0)]=function(){const _0x29539d=_0x2d1202;BattleManager[_0x29539d(0x470)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x29539d(0x7af)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x30c)]=Scene_Map[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)],Scene_Map[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)]=function(){const _0x303891=_0x2d1202;VisuMZ[_0x303891(0xa3c)][_0x303891(0x30c)]['call'](this),BattleManager[_0x303891(0xa93)]&&(this[_0x303891(0x486)]=!![],BattleManager[_0x303891(0xa93)]=undefined);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xa17)]=Scene_Map[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)],Scene_Map[_0x2d1202(0x8ec)]['initialize']=function(){const _0x58549d=_0x2d1202;VisuMZ[_0x58549d(0xa3c)][_0x58549d(0xa17)][_0x58549d(0x86c)](this),$gameTemp[_0x58549d(0x95d)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xb57)]=Scene_ItemBase[_0x2d1202(0x8ec)][_0x2d1202(0x47a)],Scene_ItemBase[_0x2d1202(0x8ec)]['applyItem']=function(){const _0x220e72=_0x2d1202;VisuMZ[_0x220e72(0xa3c)][_0x220e72(0xb57)][_0x220e72(0x86c)](this);this[_0x220e72(0x36f)]()[_0x220e72(0x5fe)][_0x220e72(0xaa0)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x220e72(0x2a2)]=[]);if(DataManager[_0x220e72(0x52b)](this[_0x220e72(0x36f)]())){if(_0x220e72(0x45b)===_0x220e72(0x408)){const _0x3fb564=_0x309c03[_0x220e72(0xa07)](_0x3cfec3['$1']);this[_0x220e72(0x848)](_0x2ccb0e[_0x3fb564]);}else $gameTemp[_0x220e72(0x2a2)]=[];}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x59a)]=Scene_Options[_0x2d1202(0x8ec)][_0x2d1202(0xa6a)],Scene_Options[_0x2d1202(0x8ec)][_0x2d1202(0xa6a)]=function(){const _0x1a46a4=_0x2d1202;let _0x1d64ef=VisuMZ[_0x1a46a4(0xa3c)][_0x1a46a4(0x59a)][_0x1a46a4(0x86c)](this);const _0x468453=VisuMZ[_0x1a46a4(0xa3c)][_0x1a46a4(0x6a1)];if(_0x468453[_0x1a46a4(0x265)][_0x1a46a4(0xb78)]&&_0x468453[_0x1a46a4(0x265)][_0x1a46a4(0x68d)])_0x1d64ef+=0x2;if(_0x468453[_0x1a46a4(0x678)][_0x1a46a4(0xb78)]&&_0x468453['HpGauge'][_0x1a46a4(0x68d)])_0x1d64ef+=0x1;return _0x1d64ef;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x673)]=Scene_Battle[_0x2d1202(0x8ec)]['start'],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x3f0)]=function(){const _0x58b340=_0x2d1202;if(SceneManager[_0x58b340(0x60c)]()){Scene_Message['prototype']['start']['call'](this);this[_0x58b340(0x3d2)]&&this['_spriteset'][_0x58b340(0x69e)]();if(BattleManager['_tpbSceneChangeCacheActor']){if(_0x58b340(0x5e3)===_0x58b340(0x9d7))return this[_0x58b340(0x28f)]()['note']['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x3bbb25(_0x431924['$1'])['split'](/[\r\n]+/):_0x1c50be[_0x58b340(0xa3c)]['Settings'][_0x58b340(0x879)][_0x58b340(0xb32)];else BattleManager[_0x58b340(0x254)]();}}else VisuMZ[_0x58b340(0xa3c)]['Scene_Battle_start']['call'](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x924)]=Scene_Battle['prototype'][_0x2d1202(0x7af)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x7af)]=function(){const _0x3627b0=_0x2d1202;SceneManager[_0x3627b0(0x779)]()?Scene_Message['prototype'][_0x3627b0(0x7af)]['call'](this):VisuMZ[_0x3627b0(0xa3c)][_0x3627b0(0x924)][_0x3627b0(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)]['Scene_Battle_terminate']=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x865)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x865)]=function(){const _0x20d9d9=_0x2d1202;SceneManager[_0x20d9d9(0x779)]()?Scene_Message[_0x20d9d9(0x8ec)]['terminate']['call'](this):VisuMZ[_0x20d9d9(0xa3c)]['Scene_Battle_terminate']['call'](this);},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x93a)]=function(){const _0x1573b2=_0x2d1202;if(ConfigManager[_0x1573b2(0x821)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0x1573b2(0x8ff)];else{if(this[_0x1573b2(0xbdc)]()==='border'){if(_0x1573b2(0x495)==='QISms')return![];else{if(!this[_0x1573b2(0x98f)][_0x1573b2(0x5f1)](_0x359d65['id']))return![];}}else{return Scene_Message[_0x1573b2(0x8ec)][_0x1573b2(0x93a)][_0x1573b2(0x86c)](this);;}}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x296)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x1fe)],Scene_Battle[_0x2d1202(0x8ec)]['createAllWindows']=function(){this['createEnemyNameContainer'](),VisuMZ['BattleCore']['Scene_Battle_createAllWindows']['call'](this),this['createAutoBattleWindow']();},VisuMZ[_0x2d1202(0xa3c)]['Scene_Battle_createCancelButton']=Scene_Battle['prototype']['createCancelButton'],Scene_Battle[_0x2d1202(0x8ec)]['createCancelButton']=function(){const _0x58ba05=_0x2d1202;VisuMZ['BattleCore']['Scene_Battle_createCancelButton'][_0x58ba05(0x86c)](this),this[_0x58ba05(0xbdc)]()===_0x58ba05(0xb81)&&(_0x58ba05(0xbad)===_0x58ba05(0x565)?_0x4e2617[_0x58ba05(0x5c8)]('setActiveWeaponSet',_0x3ce374,_0x2c76d8):this[_0x58ba05(0x4c3)]());},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x4e6)]=function(_0x33864a){const _0x16f9de=_0x2d1202;if(_0x33864a)this[_0x16f9de(0x454)]['x']=(Graphics[_0x16f9de(0x72b)]-Graphics[_0x16f9de(0x203)])/0x2,this[_0x16f9de(0x454)]['y']=(Graphics[_0x16f9de(0x940)]-Graphics[_0x16f9de(0x9ec)])/0x2;else{if(_0x16f9de(0x720)===_0x16f9de(0x60e)){this['_partyCommandWindow'][_0x16f9de(0x882)](),this[_0x16f9de(0x6b7)][_0x16f9de(0xa96)]();if(!_0xb431be[_0x16f9de(0xa3c)][_0x16f9de(0x2d4)])return;if(_0x17ed70[_0x16f9de(0x2b7)]&&_0x4f5fc1[_0x16f9de(0xba7)]())return;if(_0x41aa04[_0x16f9de(0x545)]){_0x332c29[_0x16f9de(0x545)][_0x16f9de(0x9f5)](_0x16f9de(0xa48));const _0x5af79a=_0x27cf17['_currentActor'][_0x16f9de(0x22c)]();if(_0x5af79a)_0x5af79a['stepBack']();}_0x315f00[_0x16f9de(0x545)]=null;}else this[_0x16f9de(0x454)]['x']=Graphics[_0x16f9de(0x72b)]*0xa,this[_0x16f9de(0x454)]['y']=Graphics['height']*0xa;}},VisuMZ[_0x2d1202(0xa3c)]['Scene_Battle_selectNextCommand']=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x7dd)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x7dd)]=function(){const _0x553cdd=_0x2d1202,_0x22043f=BattleManager[_0x553cdd(0x832)]();VisuMZ[_0x553cdd(0xa3c)][_0x553cdd(0x1fa)][_0x553cdd(0x86c)](this);if(_0x22043f){if(_0x22043f===BattleManager[_0x553cdd(0x832)]())return;if(_0x22043f===BattleManager[_0x553cdd(0x403)])return;if(_0x22043f[_0x553cdd(0x22c)]())_0x22043f[_0x553cdd(0x22c)]()[_0x553cdd(0x255)]();}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xacc)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x244)],Scene_Battle[_0x2d1202(0x8ec)]['selectPreviousCommand']=function(){const _0x13b861=_0x2d1202,_0x3c8a7d=BattleManager[_0x13b861(0x832)]();if(_0x3c8a7d&&_0x3c8a7d[_0x13b861(0x22c)])_0x3c8a7d[_0x13b861(0x22c)]()['stepBack']();VisuMZ[_0x13b861(0xa3c)][_0x13b861(0xacc)][_0x13b861(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xbdd)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x931)],Scene_Battle['prototype']['logWindowRect']=function(){const _0x3e2094=_0x2d1202;if(VisuMZ[_0x3e2094(0xa3c)][_0x3e2094(0x6a1)]['BattleLog']['BattleLogRectJS'])return VisuMZ[_0x3e2094(0xa3c)]['Settings'][_0x3e2094(0xace)]['BattleLogRectJS']['call'](this);return VisuMZ[_0x3e2094(0xa3c)]['Scene_Battle_logWindowRect'][_0x3e2094(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x7e5)],Scene_Battle[_0x2d1202(0x8ec)]['createPartyCommandWindow']=function(){const _0x73481c=_0x2d1202;VisuMZ[_0x73481c(0xa3c)][_0x73481c(0x5a4)]['call'](this),this[_0x73481c(0x9cf)]();},Scene_Battle['prototype']['createPartyCommandWindowBattleCore']=function(){const _0x2b7b42=_0x2d1202,_0x1d9943=this[_0x2b7b42(0x21c)];_0x1d9943[_0x2b7b42(0xb7f)]('autoBattle',this[_0x2b7b42(0x687)][_0x2b7b42(0x937)](this)),_0x1d9943[_0x2b7b42(0xb7f)]('options',this[_0x2b7b42(0xbb4)][_0x2b7b42(0x937)](this));const _0x1c203e=this[_0x2b7b42(0xbdc)]();switch(_0x1c203e){case'xp':case _0x2b7b42(0x682):return this[_0x2b7b42(0x21c)][_0x2b7b42(0xba9)](0x1);break;}},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x687)]=function(){const _0xcbdf7f=_0x2d1202;BattleManager['_autoBattle']=!![],$gameParty[_0xcbdf7f(0x1bb)](),this[_0xcbdf7f(0x7dd)](),BattleManager['isTpb']()&&(BattleManager[_0xcbdf7f(0x751)]=![]);},Scene_Battle['prototype'][_0x2d1202(0xbb4)]=function(){const _0x4e066b=_0x2d1202;if(this[_0x4e066b(0x6ad)]())this[_0x4e066b(0x379)]=!![],this[_0x4e066b(0x5d0)][_0x4e066b(0x5c8)](_0x4e066b(0x4ed),VisuMZ[_0x4e066b(0xa3c)][_0x4e066b(0x6a1)][_0x4e066b(0x732)][_0x4e066b(0x349)]);else{if('zWlcE'===_0x4e066b(0x1f9))this['callOptions']();else{const _0x449de3=_0xeb98e0[_0x4e066b(0xb26)](_0x1f9245['width']/0x3),_0x4b4fa7=_0x2e738e[_0x4e066b(0x4b4)]((_0x25a50f[_0x4e066b(0x203)]-_0x449de3)/0x2),_0x1b783f=this[_0x4e066b(0xb53)](),_0x20f14d=_0x1b783f['y'],_0x306a86=_0x1b783f[_0x4e066b(0x940)];return new _0x14085d(_0x4b4fa7,_0x20f14d,_0x449de3,_0x306a86);}}},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x6ad)]=function(){const _0x377752=_0x2d1202;return BattleManager[_0x377752(0x510)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x4fd)]=function(){const _0x4da4e5=_0x2d1202;this[_0x4da4e5(0x379)]=![],this[_0x4da4e5(0x3d2)][_0x4da4e5(0x69e)](),this[_0x4da4e5(0x454)][_0x4da4e5(0x3ef)]=![];if(BattleManager[_0x4da4e5(0xab3)]())_0x4da4e5(0x611)!=='FwQIy'?(_0x476401+=_0x2c39fc,_0x5143b8+=_0x1b87ce['isActor']()?-_0x1e9c0f:_0x33aa70):($dataSystem['battleback1Name']||$dataSystem[_0x4da4e5(0x2f5)])&&SceneManager[_0x4da4e5(0x986)]();else{if($gameMap[_0x4da4e5(0x3ea)]()||$gameMap[_0x4da4e5(0x2f5)]()){if(_0x4da4e5(0x688)!=='fthHq')SceneManager[_0x4da4e5(0x986)]();else{if(!_0x200577[_0x4da4e5(0x346)]())return;if(!_0x4477d7[_0x4da4e5(0x893)])return;_0xaaefc7[_0x4da4e5(0x433)](_0x1ce143,_0x2e06f4);const _0x536742=_0x2ba816[_0x4da4e5(0x438)]();_0x536742[_0x4da4e5(0x3cb)]=_0x594f9b[_0x4da4e5(0x47d)];}}}SceneManager[_0x4da4e5(0x5c8)](Scene_Options),BattleManager[_0x4da4e5(0x768)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager[_0x4da4e5(0x832)]());},VisuMZ['BattleCore'][_0x2d1202(0x73b)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x8f7)],Scene_Battle['prototype'][_0x2d1202(0x8f7)]=function(){const _0x547432=_0x2d1202;VisuMZ['BattleCore'][_0x547432(0x73b)]['call'](this);if(this[_0x547432(0x379)]&&!BattleManager['_subject'])this[_0x547432(0x4fd)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x2ee)]=function(){const _0x5d34ea=_0x2d1202,_0x3fd16c=this['autoBattleWindowRect']();this[_0x5d34ea(0x59e)]=new Window_AutoBattleCancel(_0x3fd16c),this[_0x5d34ea(0x59e)]['hide'](),this['addChild'](this[_0x5d34ea(0x59e)]);},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x316)]=function(){const _0x3ede98=_0x2d1202;return VisuMZ[_0x3ede98(0xa3c)][_0x3ede98(0x6a1)][_0x3ede98(0x265)][_0x3ede98(0x585)]['call'](this);},Scene_Battle['prototype'][_0x2d1202(0xb00)]=function(){const _0x56fe05=_0x2d1202;return VisuMZ[_0x56fe05(0xa3c)][_0x56fe05(0x6a1)][_0x56fe05(0x732)]['DisablePartyCmd'];},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x3fd)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x7fa)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x7fa)]=function(){const _0x45b645=_0x2d1202;this[_0x45b645(0xb00)]()?this['onDisabledPartyCommandSelection']():VisuMZ[_0x45b645(0xa3c)][_0x45b645(0x3fd)][_0x45b645(0x86c)](this);},Scene_Battle[_0x2d1202(0x8ec)]['onDisabledPartyCommandSelection']=function(){const _0x35c014=_0x2d1202;if(BattleManager['isDTB']())this[_0x35c014(0x7dd)]();else BattleManager[_0x35c014(0x768)]()&&(_0x35c014(0xb07)===_0x35c014(0xba2)?this[_0x35c014(0x3d2)][_0x35c014(0x69e)]():VisuMZ[_0x35c014(0xa3c)]['Scene_Battle_startPartyCommandSelection'][_0x35c014(0x86c)](this));},VisuMZ['BattleCore']['Scene_Battle_commandFight']=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x617)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x617)]=function(){const _0x3a5a6b=_0x2d1202;BattleManager[_0x3a5a6b(0x768)]()?(this['tpbCommandFight'](),this['startActorCommandSelection']()):VisuMZ[_0x3a5a6b(0xa3c)][_0x3a5a6b(0x81f)][_0x3a5a6b(0x86c)](this);},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x38c)]=function(){const _0x594e2a=_0x2d1202;if(!VisuMZ[_0x594e2a(0xa3c)][_0x594e2a(0x2d4)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x594e2a(0xba7)]())return;const _0x221959=$gameParty[_0x594e2a(0x973)]()[_0x594e2a(0xb5f)](_0x1d1af7=>_0x1d1af7['isTpbCharged']()&&_0x1d1af7[_0x594e2a(0xa24)]());BattleManager['_currentActor']=_0x221959[0x0]||null,BattleManager[_0x594e2a(0x545)]&&('cVpBG'==='QuVuY'?this[_0x594e2a(0x6d5)]():BattleManager[_0x594e2a(0x545)][_0x594e2a(0x9f5)](_0x594e2a(0x901)));},VisuMZ[_0x2d1202(0xa3c)]['Scene_Battle_createActorCommandWindow']=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x23a)],Scene_Battle[_0x2d1202(0x8ec)]['createActorCommandWindow']=function(){const _0x3d4a19=_0x2d1202;VisuMZ[_0x3d4a19(0xa3c)][_0x3d4a19(0x967)]['call'](this),this[_0x3d4a19(0x3e7)]();},Scene_Battle['prototype'][_0x2d1202(0x3e7)]=function(){const _0x2b2b28=_0x2d1202,_0x2c710a=this[_0x2b2b28(0x6b7)];_0x2c710a[_0x2b2b28(0xb7f)](_0x2b2b28(0x3d5),this[_0x2b2b28(0x855)]['bind'](this)),_0x2c710a['setHandler'](_0x2b2b28(0x1ba),this[_0x2b2b28(0x607)][_0x2b2b28(0x937)](this)),_0x2c710a['setHandler']('singleSkill',this[_0x2b2b28(0x6da)][_0x2b2b28(0x937)](this));if(BattleManager[_0x2b2b28(0x768)]()){if(_0x2b2b28(0x856)!==_0x2b2b28(0x856))this['tpbActorSwitchConditionsMet']()?this[_0x2b2b28(0x8ef)]():this[_0x2b2b28(0x9cb)]();else{if(this[_0x2b2b28(0xb00)]()){if(_0x2b2b28(0x6d3)!==_0x2b2b28(0x6d3)){const _0xa29f78=this['weapons'](),_0x1f7880=_0xa29f78[0x0]?_0xa29f78[0x0][_0x2b2b28(0x651)]:0x0,_0x300352=_0x572a62[_0x2b2b28(0xb19)][_0x1f7880];_0x300352&&this[_0x2b2b28(0xb03)](_0x300352[_0x2b2b28(0x429)]);}else delete _0x2c710a[_0x2b2b28(0x46d)][_0x2b2b28(0x41b)];}else{if(_0x2b2b28(0x773)!==_0x2b2b28(0x773))return _0x536cdb[_0x2b2b28(0xb19)][0x0];else _0x2c710a[_0x2b2b28(0xb7f)](_0x2b2b28(0x41b),this[_0x2b2b28(0x964)][_0x2b2b28(0x937)](this));}}}},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x855)]=function(){const _0x315e45=_0x2d1202;this[_0x315e45(0x6d5)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x607)]=function(){const _0x256b92=_0x2d1202;BattleManager['actor']()['makeAutoBattleActions'](),BattleManager[_0x256b92(0x90b)](),BattleManager['selectNextActor'](),this[_0x256b92(0x754)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x6da)]=function(){const _0x2c332a=_0x2d1202,_0x4cd4e6=BattleManager[_0x2c332a(0x5ac)]();_0x4cd4e6[_0x2c332a(0x684)](this[_0x2c332a(0x6b7)]['currentExt']()),this[_0x2c332a(0x29f)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x964)]=function(){const _0x37595f=_0x2d1202;this[_0x37595f(0xbcf)]()?this[_0x37595f(0x8ef)]():this['processActorCommandCancelTPB']();},VisuMZ['BattleCore'][_0x2d1202(0x2d4)]=![],Scene_Battle['prototype']['tpbActorSwitchConditionsMet']=function(){const _0x339d5d=_0x2d1202;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x339d5d(0xba7)]()){if(_0x339d5d(0x312)==='yVMUj'){const _0x1934d0=this[_0x339d5d(0x7d4)],_0x1b66f6=this[_0x339d5d(0xbab)];_0x1b66f6['x']=(_0x1b66f6['x']*(_0x1934d0-0x1)+this[_0x339d5d(0x524)])/_0x1934d0,_0x1b66f6[_0x339d5d(0xad4)]=(_0x1b66f6['opacity']*(_0x1934d0-0x1)+0xff)/_0x1934d0,this['_borderPortraitDuration']--;}else return![];}else{if(!VisuMZ[_0x339d5d(0xa3c)][_0x339d5d(0x2d4)])return![];const _0xd6a3ea=$gameParty[_0x339d5d(0x973)]()[_0x339d5d(0xb5f)](_0x3fbe3c=>_0x3fbe3c[_0x339d5d(0x217)]()&&_0x3fbe3c[_0x339d5d(0xa24)]());return _0xd6a3ea[_0x339d5d(0x1d7)]>0x0&&BattleManager[_0x339d5d(0x832)]()!==_0xd6a3ea[_0xd6a3ea[_0x339d5d(0x1d7)]-0x1];}},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x8ef)]=function(){const _0x4014ad=_0x2d1202,_0x94424e=BattleManager['actor'](),_0x1aaaa7=_0x94424e[_0x4014ad(0x22c)]();if(_0x1aaaa7)_0x1aaaa7['stepBack']();const _0xc5f57=$gameParty['aliveMembers']()[_0x4014ad(0xb5f)](_0x2d138c=>_0x2d138c[_0x4014ad(0x217)]()&&_0x2d138c[_0x4014ad(0xa24)]()),_0x3cf069=_0xc5f57[_0x4014ad(0x783)](_0x94424e),_0x429961=_0xc5f57[_0x3cf069+0x1];BattleManager[_0x4014ad(0x545)]=_0x429961||null;if(_0x429961)_0x429961[_0x4014ad(0x9f5)]('inputting');_0x94424e[_0x4014ad(0x9f5)](_0x4014ad(0xa48)),this[_0x4014ad(0x754)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x9cb)]=function(){const _0x6c9db1=_0x2d1202;this[_0x6c9db1(0x21c)]['setup'](),this['_actorCommandWindow'][_0x6c9db1(0xa96)]();if(!VisuMZ[_0x6c9db1(0xa3c)][_0x6c9db1(0x2d4)])return;if(Imported[_0x6c9db1(0x2b7)]&&BattleManager[_0x6c9db1(0xba7)]())return;if(BattleManager[_0x6c9db1(0x545)]){if(_0x6c9db1(0x9b3)!==_0x6c9db1(0x42a)){BattleManager[_0x6c9db1(0x545)][_0x6c9db1(0x9f5)]('undecided');const _0x195f5d=BattleManager[_0x6c9db1(0x545)]['battler']();if(_0x195f5d)_0x195f5d[_0x6c9db1(0x255)]();}else{this['push'](_0x6c9db1(0x6bc),_0x3893ab);if(!_0x3d5b45[_0x6c9db1(0xa3c)][_0x6c9db1(0x6a1)]['BattleLog'][_0x6c9db1(0xbaf)])return;this[_0x6c9db1(0x5c8)](_0x6c9db1(0x4ed),_0x2f4bbf[_0x6c9db1(0x358)][_0x6c9db1(0x995)](_0x558a57['name']()));}}BattleManager[_0x6c9db1(0x545)]=null;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xa4d)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xa0b)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xa0b)]=function(){const _0x5ea6cf=_0x2d1202;VisuMZ[_0x5ea6cf(0xa3c)]['Scene_Battle_createHelpWindow'][_0x5ea6cf(0x86c)](this),this[_0x5ea6cf(0x448)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x448)]=function(){const _0x56dc55=_0x2d1202;this[_0x56dc55(0x6b7)]['setHelpWindow'](this[_0x56dc55(0x646)]),this[_0x56dc55(0x21c)][_0x56dc55(0x2d3)](this['_helpWindow']);},Scene_Battle[_0x2d1202(0x8ec)]['battleLayoutStyle']=function(){const _0x4f5c28=_0x2d1202;if($gameTemp[_0x4f5c28(0x88e)]!==undefined)return $gameTemp[_0x4f5c28(0x88e)];if(this[_0x4f5c28(0x239)]){if(_0x4f5c28(0x231)!==_0x4f5c28(0x671))return this[_0x4f5c28(0x239)];else this['initialize'](...arguments);}return this[_0x4f5c28(0x239)]=VisuMZ[_0x4f5c28(0xa3c)][_0x4f5c28(0x6a1)]['BattleLayout'][_0x4f5c28(0x4d6)][_0x4f5c28(0x8e4)]()[_0x4f5c28(0x43b)](),this[_0x4f5c28(0x239)]===_0x4f5c28(0x549)&&!Imported[_0x4f5c28(0xa55)]&&(this[_0x4f5c28(0x239)]='default'),this[_0x4f5c28(0x239)];},VisuMZ['BattleCore'][_0x2d1202(0x208)]=Scene_Battle[_0x2d1202(0x8ec)]['windowAreaHeight'],Scene_Battle['prototype'][_0x2d1202(0x23f)]=function(){const _0x4010a1=_0x2d1202,_0x5d05a3=this[_0x4010a1(0xbdc)]();switch(_0x5d05a3){case _0x4010a1(0x7e9):return this[_0x4010a1(0x8c4)](Math[_0x4010a1(0x717)](0x1,$gameParty[_0x4010a1(0x736)]()),!![]);break;default:return VisuMZ[_0x4010a1(0xa3c)][_0x4010a1(0x208)][_0x4010a1(0x86c)](this);break;}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xa34)]=Scene_Battle['prototype']['helpWindowRect'],Scene_Battle['prototype']['helpWindowRect']=function(){const _0x3a9ea4=_0x2d1202,_0x40df78=this[_0x3a9ea4(0xbdc)]();switch(_0x40df78){case _0x3a9ea4(0xb81):return this['helpWindowRectBorderStyle']();break;case _0x3a9ea4(0x376):case _0x3a9ea4(0x7e9):case'xp':case _0x3a9ea4(0x682):default:return VisuMZ['BattleCore'][_0x3a9ea4(0xa34)][_0x3a9ea4(0x86c)](this);break;}},Scene_Battle[_0x2d1202(0x8ec)]['statusWindowRect']=function(){const _0x3ec3cf=_0x2d1202,_0x53eb8d=this[_0x3ec3cf(0xbdc)]();switch(_0x53eb8d){case'xp':case _0x3ec3cf(0x682):return this[_0x3ec3cf(0x645)]();break;case _0x3ec3cf(0xb81):return this[_0x3ec3cf(0xba6)]();break;case _0x3ec3cf(0x376):case'list':default:return this[_0x3ec3cf(0xab4)]();break;}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x3b4)]=Scene_Battle[_0x2d1202(0x8ec)]['partyCommandWindowRect'],Scene_Battle['prototype'][_0x2d1202(0x68c)]=function(){const _0xde080a=_0x2d1202,_0x23463=this[_0xde080a(0xbdc)]();switch(_0x23463){case'xp':case _0xde080a(0x682):return this[_0xde080a(0x844)]();break;case'border':return this[_0xde080a(0xb53)]();case'default':case'list':default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x2d1202(0x8ec)]['partyCommandWindowRectDefaultStyle']=function(){const _0x4ee7dd=_0x2d1202,_0x5ec26a=VisuMZ['BattleCore'][_0x4ee7dd(0x6a1)][_0x4ee7dd(0xbd5)],_0x4fd7da=_0x5ec26a[_0x4ee7dd(0x5d9)]||0xc0,_0x15aba6=this[_0x4ee7dd(0x23f)](),_0x2a0098=this[_0x4ee7dd(0x93a)]()?Graphics[_0x4ee7dd(0x203)]-_0x4fd7da:0x0,_0x246c5f=Graphics[_0x4ee7dd(0x9ec)]-_0x15aba6;return new Rectangle(_0x2a0098,_0x246c5f,_0x4fd7da,_0x15aba6);},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xa18)]=function(){const _0x41699f=_0x2d1202;return this[_0x41699f(0x68c)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xa30)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x24e)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x24e)]=function(){const _0x376dcb=_0x2d1202,_0x39092a=this[_0x376dcb(0xbdc)]();switch(_0x39092a){case'xp':case _0x376dcb(0x682):case _0x376dcb(0xb81):break;case'default':case'list':default:VisuMZ[_0x376dcb(0xa3c)][_0x376dcb(0xa30)][_0x376dcb(0x86c)](this);break;}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xb0d)]=Scene_Battle[_0x2d1202(0x8ec)]['startActorSelection'],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x4ae)]=function(){const _0x1d6ee8=_0x2d1202;VisuMZ[_0x1d6ee8(0xa3c)][_0x1d6ee8(0xb0d)][_0x1d6ee8(0x86c)](this),this[_0x1d6ee8(0x560)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x994)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x4a9)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x4a9)]=function(){const _0x4d1243=_0x2d1202;VisuMZ[_0x4d1243(0xa3c)][_0x4d1243(0x994)]['call'](this),this['_enemyWindow'][_0x4d1243(0x707)](),this[_0x4d1243(0x560)]();},Scene_Battle['prototype']['makeTargetSelectionMoreVisible']=function(){const _0x4644aa=_0x2d1202,_0x1f4b43=this[_0x4644aa(0xbdc)]();['xp',_0x4644aa(0x682),_0x4644aa(0xb81)][_0x4644aa(0x7c6)](_0x1f4b43)&&(_0x4644aa(0x941)!=='tKwet'?this['_actorCommandWindow']['close']():_0x46fff1[_0x4644aa(0x8f3)]=![]),(_0x1f4b43===_0x4644aa(0xb81)||this[_0x4644aa(0x2e0)]())&&(this[_0x4644aa(0xae0)]['close'](),this[_0x4644aa(0xaa7)]['close']());},VisuMZ[_0x2d1202(0xa3c)]['Scene_Battle_onActorOk']=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x9eb)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x9eb)]=function(){const _0x4b829c=_0x2d1202;VisuMZ[_0x4b829c(0xa3c)][_0x4b829c(0x28a)][_0x4b829c(0x86c)](this),this[_0x4b829c(0x8c5)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x950)]=function(){const _0x287a6f=_0x2d1202;return[_0x287a6f(0x8a0),_0x287a6f(0x992),_0x287a6f(0x469)][_0x287a6f(0x7c6)](this[_0x287a6f(0x6b7)][_0x287a6f(0x778)]());},VisuMZ[_0x2d1202(0xa3c)]['Scene_Battle_onActorCancel']=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xae6)],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xae6)]=function(){const _0x3abea9=_0x2d1202;this[_0x3abea9(0x950)]()?(this[_0x3abea9(0x210)][_0x3abea9(0xba5)](),this[_0x3abea9(0x287)][_0x3abea9(0x776)](),this[_0x3abea9(0x6b7)]['activate']()):VisuMZ[_0x3abea9(0xa3c)][_0x3abea9(0x4b9)][_0x3abea9(0x86c)](this),this[_0x3abea9(0x74a)]();},VisuMZ[_0x2d1202(0xa3c)]['Scene_Battle_onEnemyOk']=Scene_Battle['prototype'][_0x2d1202(0x749)],Scene_Battle['prototype'][_0x2d1202(0x749)]=function(){const _0xf59a0a=_0x2d1202;VisuMZ[_0xf59a0a(0xa3c)][_0xf59a0a(0xaf1)][_0xf59a0a(0x86c)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x43d)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x75e)],Scene_Battle[_0x2d1202(0x8ec)]['onEnemyCancel']=function(){const _0x475b2d=_0x2d1202;if(this[_0x475b2d(0x950)]()){if(_0x475b2d(0x20f)!==_0x475b2d(0x20f)){if(!this[_0x475b2d(0x98f)])return;const _0x7a20b0=this['_actor'][_0x475b2d(0xaf0)]();for(const _0x4c92bf of _0x7a20b0){this[_0x475b2d(0x262)](_0x4c92bf['toUpperCase']()[_0x475b2d(0x43b)]());}}else this['_statusWindow'][_0x475b2d(0xba5)](),this[_0x475b2d(0x28d)][_0x475b2d(0x776)](),this[_0x475b2d(0x6b7)][_0x475b2d(0x20a)]();}else VisuMZ[_0x475b2d(0xa3c)][_0x475b2d(0x43d)][_0x475b2d(0x86c)](this);this[_0x475b2d(0x74a)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x8c5)]=function(){const _0x14e061=_0x2d1202,_0x1f7a3f=this['battleLayoutStyle']();(_0x1f7a3f==='border'||this[_0x14e061(0x2e0)]())&&('DKCdw'!==_0x14e061(0xa46)?(this[_0x14e061(0xae0)][_0x14e061(0x66e)](),this[_0x14e061(0xae0)]['active']&&(_0x14e061(0x550)==='JkUbj'?this[_0x14e061(0xae0)][_0x14e061(0xba5)]():_0x4dd59c+=_0x4f064b['iconWidth']),this[_0x14e061(0xaa7)][_0x14e061(0x66e)](),this[_0x14e061(0xaa7)][_0x14e061(0xa7c)]&&this[_0x14e061(0xaa7)][_0x14e061(0xba5)]()):this[_0x14e061(0xaa7)][_0x14e061(0xba5)]());},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x74a)]=function(){const _0x8532ed=_0x2d1202,_0x403421=this[_0x8532ed(0xbdc)]();['xp','portrait',_0x8532ed(0xb81)]['includes'](_0x403421)&&this['_actorCommandWindow']['open'](),this[_0x8532ed(0x8c5)]();},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xab4)]=function(){const _0xb47409=_0x2d1202,_0x5ccaf5=VisuMZ['BattleCore'][_0xb47409(0x6a1)][_0xb47409(0xbd5)],_0x17bc79=Window_BattleStatus[_0xb47409(0x8ec)]['extraHeight'](),_0xbd5c78=Graphics[_0xb47409(0x203)]-(_0x5ccaf5['CommandWidth']||0xc0),_0x132685=this[_0xb47409(0x23f)]()+_0x17bc79,_0x2a1f2d=this[_0xb47409(0x93a)]()?0x0:Graphics[_0xb47409(0x203)]-_0xbd5c78,_0x1e4d31=Graphics[_0xb47409(0x9ec)]-_0x132685+_0x17bc79;return new Rectangle(_0x2a1f2d,_0x1e4d31,_0xbd5c78,_0x132685);},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x645)]=function(){const _0x5ac436=_0x2d1202,_0x5e725e=Window_BattleStatus['prototype'][_0x5ac436(0x2a6)](),_0x57941e=Graphics[_0x5ac436(0x203)],_0x4061e5=this[_0x5ac436(0x23f)]()+_0x5e725e,_0x222efc=0x0,_0x2ebb96=Graphics[_0x5ac436(0x9ec)]-_0x4061e5+_0x5e725e;return new Rectangle(_0x222efc,_0x2ebb96,_0x57941e,_0x4061e5);},Scene_Battle[_0x2d1202(0x8ec)]['partyCommandWindowRectXPStyle']=function(){const _0x492f8d=_0x2d1202,_0x22d8bb=Graphics[_0x492f8d(0x203)]/0x2,_0x378c75=this[_0x492f8d(0x8c4)](VisuMZ[_0x492f8d(0xa3c)][_0x492f8d(0x6a1)][_0x492f8d(0xbd5)][_0x492f8d(0x6ea)],!![]),_0x243f11=Math[_0x492f8d(0x4b4)]((Graphics[_0x492f8d(0x203)]-_0x22d8bb)/0x2),_0x160a7e=Graphics['boxHeight']-_0x378c75-this[_0x492f8d(0x645)]()[_0x492f8d(0x940)];return new Rectangle(_0x243f11,_0x160a7e,_0x22d8bb,_0x378c75);},Scene_Battle[_0x2d1202(0x8ec)]['helpWindowRectBorderStyle']=function(){const _0xfb0a12=_0x2d1202,_0x5ea24f=Graphics[_0xfb0a12(0x72b)],_0x731564=Math['round']((Graphics['boxWidth']-_0x5ea24f)/0x2),_0x4635f6=this[_0xfb0a12(0xa7b)](),_0x39559a=(Graphics[_0xfb0a12(0x940)]-Graphics[_0xfb0a12(0x9ec)])/-0x2;return new Rectangle(_0x731564,_0x39559a,_0x5ea24f,_0x4635f6);},Scene_Battle['prototype'][_0x2d1202(0xba6)]=function(){const _0x193ce6=_0x2d1202,_0x3998cd=Graphics[_0x193ce6(0x72b)],_0x2f9c3e=Math[_0x193ce6(0x4b4)]((Graphics[_0x193ce6(0x203)]-_0x3998cd)/0x2),_0x628a56=this[_0x193ce6(0x8c4)](0x4,!![]),_0x209a84=Graphics['boxHeight']-_0x628a56+(Graphics[_0x193ce6(0x940)]-Graphics[_0x193ce6(0x9ec)])/0x2;return new Rectangle(_0x2f9c3e,_0x209a84,_0x3998cd,_0x628a56);},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xb53)]=function(){const _0x5cec7f=_0x2d1202,_0x18a052=Math['floor'](Graphics[_0x5cec7f(0x72b)]/0x3),_0xac9d85=this['isRightInputMode']()?(Graphics[_0x5cec7f(0x72b)]+Graphics['boxWidth'])/0x2-_0x18a052:(Graphics[_0x5cec7f(0x72b)]-Graphics[_0x5cec7f(0x203)])/-0x2,_0x1c0aef=this['helpWindowRectBorderStyle'](),_0x80ceb4=_0x1c0aef['y']+_0x1c0aef[_0x5cec7f(0x940)],_0x5c2f9f=this['statusWindowRectBorderStyle'](),_0x503fb4=_0x5c2f9f['y']-_0x80ceb4;return new Rectangle(_0xac9d85,_0x80ceb4,_0x18a052,_0x503fb4);},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x436)]=function(){const _0x2404a4=_0x2d1202,_0x5619cc=Math[_0x2404a4(0xb26)](Graphics[_0x2404a4(0x72b)]/0x3),_0x1a95ea=Math[_0x2404a4(0x4b4)]((Graphics[_0x2404a4(0x203)]-_0x5619cc)/0x2),_0x5b433a=this[_0x2404a4(0xb53)](),_0x133fae=_0x5b433a['y'],_0x3b1081=_0x5b433a[_0x2404a4(0x940)];return new Rectangle(_0x1a95ea,_0x133fae,_0x5619cc,_0x3b1081);},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x4c3)]=function(){const _0x4d9c7d=_0x2d1202;this[_0x4d9c7d(0x1f8)]['y']=this['_helpWindow']['y']+this[_0x4d9c7d(0x646)][_0x4d9c7d(0x940)];if(this['isRightInputMode']()){if(this[_0x4d9c7d(0xbdc)]()===_0x4d9c7d(0xb81))this['_cancelButton']['x']=0x8;else{if(_0x4d9c7d(0x8f5)!=='cQxTH')return!![];else this[_0x4d9c7d(0x1f8)]['x']=-this[_0x4d9c7d(0x1f8)]['width']-0x4;}}else this[_0x4d9c7d(0x1f8)]['x']=Graphics[_0x4d9c7d(0x72b)]-(Graphics['width']-Graphics[_0x4d9c7d(0x203)])/0x2-this['_cancelButton'][_0x4d9c7d(0x72b)]-0x4;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x7a3)]=Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x33d)],Scene_Battle[_0x2d1202(0x8ec)]['skillWindowRect']=function(){const _0x2bcbb0=_0x2d1202;if(this['battleLayoutStyle']()==='border')return this[_0x2bcbb0(0x436)]();else{if(this[_0x2bcbb0(0x2e0)]())return this[_0x2bcbb0(0xacf)]();else{if(_0x2bcbb0(0x8a2)===_0x2bcbb0(0x52f))_0x57cc62[_0x2bcbb0(0x470)]?this[_0x2bcbb0(0xa83)]():_0x570a43[_0x2bcbb0(0xa3c)]['Scene_Map_launchBattle'][_0x2bcbb0(0x86c)](this);else return VisuMZ[_0x2bcbb0(0xa3c)][_0x2bcbb0(0x7a3)][_0x2bcbb0(0x86c)](this);}}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x2a9)]=Scene_Battle[_0x2d1202(0x8ec)]['itemWindowRect'],Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xa4a)]=function(){const _0x4402e4=_0x2d1202;if(this[_0x4402e4(0xbdc)]()===_0x4402e4(0xb81))return this[_0x4402e4(0x436)]();else{if(this['isSkillItemWindowsMiddle']())return this[_0x4402e4(0xacf)]();else{if(_0x4402e4(0x6ce)===_0x4402e4(0x6ce))return VisuMZ[_0x4402e4(0xa3c)][_0x4402e4(0x2a9)][_0x4402e4(0x86c)](this);else _0x9c4da0[_0x4402e4(0x574)]();}}},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x2e0)]=function(){const _0x12031e=_0x2d1202;return VisuMZ[_0x12031e(0xa3c)][_0x12031e(0x6a1)]['BattleLayout'][_0x12031e(0x99e)];},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xacf)]=function(){const _0x145b00=_0x2d1202,_0x3f6929=Sprite_Button[_0x145b00(0x8ec)][_0x145b00(0x68b)]()*0x2+0x4;let _0x2aa486=Graphics[_0x145b00(0x203)]-_0x3f6929;Imported[_0x145b00(0x9ef)]&&SceneManager[_0x145b00(0x259)]()&&(_0x2aa486+=_0x3f6929);const _0x48f8d4=this[_0x145b00(0x587)](),_0x3657a6=Graphics[_0x145b00(0x9ec)]-_0x48f8d4-this[_0x145b00(0x98e)]()[_0x145b00(0x940)]+Window_BattleStatus['prototype'][_0x145b00(0x2a6)](),_0x295271=0x0;return new Rectangle(_0x295271,_0x48f8d4,_0x2aa486,_0x3657a6);},Scene_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xb16)]=function(){const _0x1fe038=_0x2d1202;if(!VisuMZ[_0x1fe038(0xa3c)]['Settings']['Enemy'][_0x1fe038(0xb6d)])return;this['_enemyNameContainer']=new Sprite(),this[_0x1fe038(0x88d)]['x']=this[_0x1fe038(0x454)]['x'],this['_enemyNameContainer']['y']=this[_0x1fe038(0x454)]['y'];const _0x1fcb23=this[_0x1fe038(0x5cd)][_0x1fe038(0x783)](this[_0x1fe038(0x454)]);this['addChildAt'](this[_0x1fe038(0x88d)],_0x1fcb23);for(let _0x54e92a=0x0;_0x54e92a<0x8;_0x54e92a++){const _0x3d84d4=new Window_EnemyName(_0x54e92a);this['_enemyNameContainer'][_0x1fe038(0x304)](_0x3d84d4);}},Sprite_Battler[_0x2d1202(0xb0a)]=VisuMZ['BattleCore']['Settings']['Actor'][_0x2d1202(0xaa4)],VisuMZ['BattleCore'][_0x2d1202(0x70c)]=Sprite_Battler['prototype'][_0x2d1202(0x435)],Sprite_Battler[_0x2d1202(0x8ec)]['initMembers']=function(){const _0x5366be=_0x2d1202;VisuMZ[_0x5366be(0xa3c)]['Sprite_Battler_initMembers'][_0x5366be(0x86c)](this),this['initMembersBattleCore']();if(this[_0x5366be(0x276)]===Sprite_Enemy)this[_0x5366be(0x993)]();this[_0x5366be(0x570)]();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x90d)]=function(){const _0x24d3da=_0x2d1202;this[_0x24d3da(0x99a)]=0x0,this[_0x24d3da(0x75a)]=0x0,this[_0x24d3da(0x301)]=0x0,this[_0x24d3da(0x65e)]=0x0,this[_0x24d3da(0x8b7)]=0x0,this['_floatWholeDuration']=0x0,this[_0x24d3da(0x3c8)]=_0x24d3da(0x9d0),this[_0x24d3da(0x6e5)]=0x0,this[_0x24d3da(0x4c6)]=0x0,this['_jumpDuration']=0x0,this['_jumpWholeDuration']=0x0,this['_targetOpacity']=0xff,this[_0x24d3da(0x3c0)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x24d3da(0x903)]=_0x24d3da(0x9d0),this['_currentAngle']=0x0,this['_targetAngle']=0x0,this['_angleDuration']=0x0,this[_0x24d3da(0x4a0)]=0x0,this[_0x24d3da(0x94a)]='Linear',this[_0x24d3da(0x831)]=!![],this[_0x24d3da(0x49e)]=0x0,this[_0x24d3da(0x204)]=0x0,this['_targetSkewX']=0x0,this[_0x24d3da(0x531)]=0x0,this[_0x24d3da(0x3dc)]=0x0,this[_0x24d3da(0x765)]=0x0,this['_skewEasing']=_0x24d3da(0x9d0),this['_growX']=0x1,this[_0x24d3da(0x956)]=0x1,this[_0x24d3da(0x205)]=0x1,this[_0x24d3da(0xb94)]=0x1,this[_0x24d3da(0x6f4)]=0x0,this['_growWholeDuration']=0x0,this[_0x24d3da(0x7b2)]=_0x24d3da(0x9d0),this[_0x24d3da(0x3ce)]=0x1;},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x993)]=function(){const _0x3859a6=_0x2d1202;this['_shadowSprite']=new Sprite(),this['_shadowSprite']['bitmap']=ImageManager[_0x3859a6(0x690)]('Shadow2'),this['_shadowSprite'][_0x3859a6(0x834)]['smooth']=VisuMZ[_0x3859a6(0xa3c)][_0x3859a6(0x6a1)]['Actor'][_0x3859a6(0x474)],this['_shadowSprite'][_0x3859a6(0x5e0)]['x']=0.5,this[_0x3859a6(0xa35)][_0x3859a6(0x5e0)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x3859a6(0xa35)][_0x3859a6(0x3ef)]=![],this[_0x3859a6(0x304)](this[_0x3859a6(0xa35)]);},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x570)]=function(){const _0xfa907c=_0x2d1202;this['_distortionSprite']=new Sprite(),this[_0xfa907c(0x5a3)][_0xfa907c(0x5e0)]['x']=0.5,this[_0xfa907c(0x5a3)][_0xfa907c(0x5e0)]['y']=0.5,this[_0xfa907c(0x304)](this['_distortionSprite']);},Sprite_Battler['prototype'][_0x2d1202(0x9b1)]=function(){const _0x103a03=_0x2d1202;if(!this[_0x103a03(0x5a3)])return;if(this[_0x103a03(0xa35)]){if(_0x103a03(0x7ef)==='WaZrO'){const _0x26fa31=this[_0x103a03(0xad2)](this[_0x103a03(0x5a3)]);this[_0x103a03(0xa14)](this[_0x103a03(0xa35)],_0x26fa31),this[_0x103a03(0x7b0)]();}else _0x53b4b3?this[_0x103a03(0x69f)]():this[_0x103a03(0xa53)]();}this[_0x103a03(0x746)]&&this[_0x103a03(0x5a3)]['addChild'](this['_svBattlerSprite']),this['_weaponSprite']&&this['_distortionSprite'][_0x103a03(0x304)](this[_0x103a03(0x864)]),this['_mainSprite']&&this[_0x103a03(0x5a3)][_0x103a03(0x304)](this[_0x103a03(0x42e)]),this[_0x103a03(0x78a)]&&this[_0x103a03(0x5a3)]['addChild'](this[_0x103a03(0x78a)]);},Sprite_Battler['prototype'][_0x2d1202(0x7b0)]=function(){const _0x47fc62=_0x2d1202;if(!this[_0x47fc62(0xa35)])return;if(this[_0x47fc62(0x329)]&&this[_0x47fc62(0x329)][_0x47fc62(0x1ca)]()){const _0x109780=this[_0x47fc62(0xa35)]['bitmap'];this[_0x47fc62(0xa35)][_0x47fc62(0xa1b)](0x0,0x0,_0x109780[_0x47fc62(0x72b)],_0x109780[_0x47fc62(0x940)]);}else this[_0x47fc62(0xa35)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x2d1202(0x39d)]=function(){const _0x59139c=_0x2d1202;if(SceneManager[_0x59139c(0x346)]()){if('dKweg'!==_0x59139c(0x87b))return SceneManager[_0x59139c(0xb69)]['_spriteset'][_0x59139c(0x2e9)];else{if(_0x466115[_0x59139c(0x9ba)](_0x155ef2))return!![];return![];}}else return this[_0x59139c(0x553)];},Sprite_Battler['prototype'][_0x2d1202(0x86f)]=function(_0x32a519,_0x5debdf){const _0xee2f1=_0x2d1202;if(!this[_0xee2f1(0x329)][_0xee2f1(0x8b3)]())return;const _0x4155e5=VisuMZ['BattleCore']['Settings']['Damage'],_0x13ab49=new Sprite_Damage();_0x13ab49[_0xee2f1(0x477)]=_0x4155e5[_0xee2f1(0x6bf)],this[_0xee2f1(0x7db)](_0x13ab49),_0x13ab49['setupTextPopup'](_0x32a519,_0x5debdf),this[_0xee2f1(0x74d)](_0x13ab49);},Sprite_Battler['prototype'][_0x2d1202(0x3ad)]=function(_0x3404b1,_0x589b97,_0x303d7b){const _0x4f06ce=_0x2d1202;if(!this[_0x4f06ce(0x329)][_0x4f06ce(0x8b3)]())return;const _0x505a81=VisuMZ['BattleCore'][_0x4f06ce(0x6a1)][_0x4f06ce(0x916)],_0x507a7f=new Sprite_Damage();_0x507a7f[_0x4f06ce(0x477)]=_0x505a81[_0x4f06ce(0x6bf)],this[_0x4f06ce(0x7db)](_0x507a7f),_0x507a7f[_0x4f06ce(0x3ad)](_0x3404b1,_0x589b97,_0x303d7b),this[_0x4f06ce(0x74d)](_0x507a7f);},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x359)]=function(){const _0x1cea07=_0x2d1202;if(!this['_battler'][_0x1cea07(0x83a)]())return;while(this[_0x1cea07(0x329)][_0x1cea07(0x83a)]()){if(_0x1cea07(0x28b)!==_0x1cea07(0x5c3))this['_battler']['isSpriteVisible']()&&(_0x1cea07(0x6e3)!==_0x1cea07(0x515)?this[_0x1cea07(0x260)]():(_0x3a4922[_0x1cea07(0x79a)](_0x58ff7c[0x2],_0x3f105a[0x3]),_0x529a77[_0x1cea07(0x79a)](_0x34cadf)));else{if(this[_0x1cea07(0x63f)]===_0x1cea07(0x55e))this[_0x1cea07(0xb21)]();else this[_0x1cea07(0x63f)]===_0x1cea07(0x79a)?this[_0x1cea07(0x5d2)]():_0x1ce906['BattleCore']['BattleManager_updatePhase'][_0x1cea07(0x86c)](this,_0x3ac132);}}this[_0x1cea07(0x329)][_0x1cea07(0x46a)](),this[_0x1cea07(0x329)][_0x1cea07(0xb40)]();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x260)]=function(){const _0x53cc03=_0x2d1202,_0x2b7341=VisuMZ[_0x53cc03(0xa3c)][_0x53cc03(0x6a1)]['Damage'],_0x3ba8d4=new Sprite_Damage();_0x3ba8d4['_duration']=_0x2b7341[_0x53cc03(0x6bf)],this[_0x53cc03(0x7db)](_0x3ba8d4),_0x3ba8d4[_0x53cc03(0x882)](this[_0x53cc03(0x329)]),_0x3ba8d4[_0x53cc03(0x90f)](this[_0x53cc03(0x329)]),this[_0x53cc03(0x74d)](_0x3ba8d4);},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x74d)]=function(_0x5d2c6f){const _0x263693=_0x2d1202;this[_0x263693(0x321)][_0x263693(0x5c8)](_0x5d2c6f);if(this[_0x263693(0x904)]())SceneManager[_0x263693(0xb69)][_0x263693(0x210)][_0x263693(0x74d)](_0x5d2c6f,this['_battler']);else{if(_0x263693(0x43e)===_0x263693(0x43e)){this['damageContainer']()[_0x263693(0x304)](_0x5d2c6f);if(SceneManager[_0x263693(0x52d)]())_0x5d2c6f[_0x263693(0x1de)]['x']=-0x1;}else{this[_0x263693(0x72b)]=_0x4ab2a4[_0x263693(0x72b)],this['height']=_0xc7816e['height'];const _0x126f59=_0x26d1f2['min'](0x1,this['width']/this[_0x263693(0x834)][_0x263693(0x72b)]),_0x545a92=_0x9ea741[_0x263693(0x52e)](0x1,this[_0x263693(0x940)]/this[_0x263693(0x834)][_0x263693(0x940)]),_0x425a66=_0x498af8[_0x263693(0x717)](_0x126f59,_0x545a92);this[_0x263693(0x1de)]['x']=_0x425a66,this[_0x263693(0x1de)]['y']=_0x425a66,this['x']=(_0x27c9d3['width']-this[_0x263693(0x72b)])/0x2,this['y']=_0x3d261a[_0x263693(0x940)]-this[_0x263693(0x940)];}}},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x904)]=function(){const _0x3e30df=_0x2d1202;return!$gameSystem[_0x3e30df(0x1fd)]()&&this[_0x3e30df(0x329)]&&this[_0x3e30df(0x329)]['isActor']();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x7db)]=function(_0x1525cd){const _0x5a88c8=_0x2d1202;this[_0x5a88c8(0x225)](_0x1525cd,!![]);const _0x3c9c31=VisuMZ[_0x5a88c8(0xa3c)][_0x5a88c8(0x6a1)][_0x5a88c8(0x916)],_0x2bb69d=SceneManager['isBattleFlipped']()?-0x1:0x1;if(_0x3c9c31[_0x5a88c8(0x8a7)]){if('jcdfd'!==_0x5a88c8(0xa6b))for(const _0x8fc2d5 of this[_0x5a88c8(0x321)]){_0x5a88c8(0x5a7)===_0x5a88c8(0x5a7)?(_0x8fc2d5['x']+=_0x3c9c31[_0x5a88c8(0x373)]*_0x2bb69d,_0x8fc2d5['y']+=_0x3c9c31['PopupShiftY']):(_0x4a09ed[_0x5a88c8(0xa3c)]['Window_BattleStatus_initialize']['call'](this,_0x4300f7),this[_0x5a88c8(0x634)](),this[_0x5a88c8(0xb89)]());}else return _0x2e6267(_0x1fb7cd['$1']);}else{if('oKxyU'==='FNJWp')this[_0x5a88c8(0x309)]();else{const _0x15e746=this['_damages'][this[_0x5a88c8(0x321)][_0x5a88c8(0x1d7)]-0x1];_0x15e746&&(_0x5a88c8(0x683)===_0x5a88c8(0x683)?(_0x1525cd['x']=_0x15e746['x']+_0x3c9c31['PopupShiftX']*_0x2bb69d,_0x1525cd['y']=_0x15e746['y']+_0x3c9c31[_0x5a88c8(0x7c7)]):(this['_statusWindow']['show'](),this['_actorWindow']['hide'](),this[_0x5a88c8(0x6b7)]['activate']()));}}},Sprite_Battler[_0x2d1202(0x8ec)]['alignBattleCoreDamageSprite']=function(_0x1b77eb,_0x28633e){const _0x4fc786=_0x2d1202,_0x384a2c=SceneManager[_0x4fc786(0x52d)]()?-0x1:0x1;let _0x521631=this[_0x4fc786(0x99a)];_0x521631+=this[_0x4fc786(0x915)]();let _0x4334b3=this[_0x4fc786(0x75a)];const _0x419665=this[_0x4fc786(0x5a3)][_0x4fc786(0x1de)]['y'];_0x4334b3+=this[_0x4fc786(0xb5b)]();const _0x56cecc=SceneManager[_0x4fc786(0xb69)][_0x4fc786(0x210)];if(_0x56cecc&&this['parent']===_0x56cecc){_0x521631+=_0x56cecc['x']-this[_0x4fc786(0x3e8)]();const _0x5742d1=_0x56cecc[_0x4fc786(0xb4a)]()*0x3/0x4;_0x4334b3=_0x56cecc['y']+_0x5742d1,_0x4334b3=Math['min'](_0x4334b3,_0x56cecc['y']+this['y']-this['height']+_0x5742d1);}_0x1b77eb['x']=Math[_0x4fc786(0x4b4)](_0x521631+this[_0x4fc786(0x3e8)]()*_0x384a2c),_0x1b77eb['y']=Math['round'](_0x4334b3+this[_0x4fc786(0x34d)]());},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x21f)]=Sprite_Battler['prototype'][_0x2d1202(0x3e8)],Sprite_Battler['prototype'][_0x2d1202(0x3e8)]=function(){const _0x41e610=_0x2d1202;let _0x33730f=VisuMZ[_0x41e610(0xa3c)][_0x41e610(0x21f)][_0x41e610(0x86c)](this),_0x5f4ff7=VisuMZ[_0x41e610(0xa3c)]['Settings']['Damage']['PopupOffsetX']||0x0;return Math[_0x41e610(0x4b4)](_0x33730f+_0x5f4ff7);},VisuMZ[_0x2d1202(0xa3c)]['Sprite_Battler_damageOffsetY']=Sprite_Battler['prototype'][_0x2d1202(0x34d)],Sprite_Battler['prototype'][_0x2d1202(0x34d)]=function(){const _0x7ac4ff=_0x2d1202;let _0x9671e8=VisuMZ[_0x7ac4ff(0xa3c)][_0x7ac4ff(0x825)]['call'](this);switch(VisuMZ['BattleCore']['Settings']['Damage'][_0x7ac4ff(0x9f3)]){case _0x7ac4ff(0xb7d):_0x9671e8-=this[_0x7ac4ff(0x940)]*this[_0x7ac4ff(0x1de)]['y'];break;case'center':_0x9671e8-=this[_0x7ac4ff(0x940)]*this[_0x7ac4ff(0x1de)]['y']*0.5;break;}let _0x4e70b0=VisuMZ['BattleCore'][_0x7ac4ff(0x6a1)][_0x7ac4ff(0x916)][_0x7ac4ff(0x9bb)]||0x0;return Math[_0x7ac4ff(0x4b4)](_0x9671e8+_0x4e70b0);},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x3e8)]=function(){const _0x6044ed=_0x2d1202;return Sprite_Battler[_0x6044ed(0x8ec)][_0x6044ed(0x3e8)][_0x6044ed(0x86c)](this);},Sprite_Actor[_0x2d1202(0x8ec)]['damageOffsetY']=function(){const _0x4fc432=_0x2d1202;return Sprite_Battler[_0x4fc432(0x8ec)][_0x4fc432(0x34d)][_0x4fc432(0x86c)](this);},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x73c)]=function(_0x44524a){const _0x336104=_0x2d1202;this[_0x336104(0x904)]()?SceneManager['_scene'][_0x336104(0x210)][_0x336104(0x52a)](_0x44524a):(this[_0x336104(0x39d)]()[_0x336104(0x426)](_0x44524a),this['_damages'][_0x336104(0x9b6)](_0x44524a),_0x44524a[_0x336104(0xaea)]());},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x1e2)]=Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x219)],Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x219)]=function(_0x3fae05,_0x29265a){const _0x58981f=_0x2d1202,_0x7fe453=VisuMZ[_0x58981f(0xa3c)][_0x58981f(0x6a1)];if(this[_0x58981f(0x276)]===Sprite_Actor)_0x3fae05+=_0x7fe453[_0x58981f(0x97d)][_0x58981f(0x9cc)]||0x0,_0x29265a+=_0x7fe453[_0x58981f(0x97d)][_0x58981f(0xa1d)]||0x0;else{if(this[_0x58981f(0x276)]===Sprite_Enemy){if(_0x58981f(0x5f7)===_0x58981f(0x5f7))_0x3fae05+=_0x7fe453[_0x58981f(0x540)][_0x58981f(0x9cc)]||0x0,_0x29265a+=_0x7fe453[_0x58981f(0x540)]['OffsetY']||0x0;else{let _0x35ee8c=_0x308cff[_0x58981f(0xb11)][_0x540a07];if(!_0x35ee8c)return;let _0x4c7bb4=_0x35ee8c;const _0xdb009=this[_0x58981f(0x8cd)]();if(_0xdb009===_0x58981f(0x69d))_0x4c7bb4=_0x4c7bb4[_0x58981f(0x586)](/\x1I\[(\d+)\]/gi,''),_0x4c7bb4=_0x4c7bb4[_0x58981f(0x586)](/\\I\[(\d+)\]/gi,'');else{if(!_0x35ee8c[_0x58981f(0xaa0)](/\\I\[(\d+)\]/i)){const _0x5202e0=_0x1baf12[_0x58981f(0x4fa)]?_0x5e1b1f[_0x58981f(0x728)][_0x58981f(0x6a1)]['Skills']:_0x3ef77b[_0x58981f(0xa3c)]['Settings'][_0x58981f(0x879)],_0x80855d=_0x42627d['magicSkills'][_0x58981f(0x7c6)](_0x58a75a),_0x292192=_0x80855d?_0x5202e0[_0x58981f(0x5f3)]:_0x5202e0[_0x58981f(0x66b)];_0x4c7bb4=_0x58981f(0x577)[_0x58981f(0x995)](_0x292192,_0x35ee8c);}}this['addCommand'](_0x4c7bb4,'skill',!![],_0x3318f4);}}}VisuMZ[_0x58981f(0xa3c)]['Sprite_Battler_setHome'][_0x58981f(0x86c)](this,_0x3fae05,_0x29265a);},VisuMZ[_0x2d1202(0xa3c)]['Sprite_Battler_update']=Sprite_Battler['prototype'][_0x2d1202(0x69e)],Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x69e)]=function(){const _0x2c5213=_0x2d1202;VisuMZ[_0x2c5213(0xa3c)]['Sprite_Battler_update'][_0x2c5213(0x86c)](this),!this[_0x2c5213(0x329)]&&this[_0x2c5213(0x68f)]&&(this[_0x2c5213(0x68f)][_0x2c5213(0x3ef)]=![]);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x92a)]=Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x4c7)],Sprite_Battler[_0x2d1202(0x8ec)]['updateMain']=function(){const _0xc88acb=_0x2d1202;this[_0xc88acb(0x2d7)](),this[_0xc88acb(0x650)](),this[_0xc88acb(0x290)](),this[_0xc88acb(0x815)](),this[_0xc88acb(0x31e)](),VisuMZ[_0xc88acb(0xa3c)][_0xc88acb(0x92a)]['call'](this);if(this['constructor']===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x500)]=Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x1e6)],Sprite_Battler['prototype'][_0x2d1202(0x1e6)]=function(){const _0x46e69b=_0x2d1202;VisuMZ[_0x46e69b(0xa3c)][_0x46e69b(0x500)]['call'](this),this[_0x46e69b(0xa60)](),this[_0x46e69b(0x444)]();},Sprite_Battler['prototype'][_0x2d1202(0xa60)]=function(){const _0x26e7e6=_0x2d1202;this['_baseX']=this['x'],this[_0x26e7e6(0x75a)]=this['y'],this[_0x26e7e6(0x7a4)](),this[_0x26e7e6(0xaa3)](),this['x']+=this[_0x26e7e6(0x915)](),this['y']+=this[_0x26e7e6(0xb5b)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x26e7e6(0x914)](this['x']),this['y']=Math[_0x26e7e6(0x914)](this['y']);},Sprite_Battler[_0x2d1202(0x8ec)]['extraPositionX']=function(){let _0x2c059a=0x0;return _0x2c059a;},Sprite_Battler['prototype'][_0x2d1202(0xb5b)]=function(){const _0x5492b2=_0x2d1202;let _0x535002=0x0;return this['_battler']&&!this[_0x5492b2(0x329)]['isBattlerGrounded']()&&('UFBBV'===_0x5492b2(0x55a)?(_0x535002-=this[_0x5492b2(0x301)],_0x535002-=this[_0x5492b2(0x6e5)]):this[_0x5492b2(0xa73)](_0x5492b2(0x7fb))),_0x535002;},Sprite_Battler[_0x2d1202(0x8ec)]['extraPositionScaledY']=function(){const _0x332a09=_0x2d1202;let _0x1ffe8b=0x0;if(this[_0x332a09(0x5a3)]&&this[_0x332a09(0x276)]!==Sprite_SvEnemy){const _0x1d1579=this[_0x332a09(0x5a3)]['scale']['y'];_0x1ffe8b-=(_0x1d1579-0x1)*this[_0x332a09(0x940)];}return _0x1ffe8b;},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x815)]=function(){const _0x2d7c89=_0x2d1202,_0x3404e2=this['_battler']&&this[_0x2d7c89(0x329)][_0x2d7c89(0x845)]();this[_0x2d7c89(0x3ce)]=(_0x3404e2?-0x1:0x1)*Math['abs'](this[_0x2d7c89(0x1de)]['x']);},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x89f)]=function(_0x2b3e0f,_0x703a6b,_0x55174a){const _0x4b3096=_0x2d1202;if(!this[_0x4b3096(0x7e3)]())return;if(this[_0x4b3096(0x65e)]===_0x2b3e0f)return;this[_0x4b3096(0x65e)]=_0x2b3e0f,this['_floatDuration']=_0x703a6b,this['_floatWholeDuration']=_0x703a6b,this[_0x4b3096(0x3c8)]=_0x55174a||_0x4b3096(0x9d0);if(_0x703a6b<=0x0)this[_0x4b3096(0x301)]=_0x2b3e0f;},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x7a4)]=function(){const _0x7fc50c=_0x2d1202;if(this['_floatDuration']<=0x0)return;const _0x58ff5d=this[_0x7fc50c(0x8b7)],_0x21caa1=this[_0x7fc50c(0x6c9)],_0x3d91db=this['_floatEasing'];if(Imported['VisuMZ_0_CoreEngine'])this[_0x7fc50c(0x301)]=this[_0x7fc50c(0xa4c)](this[_0x7fc50c(0x301)],this['_targetFloatHeight'],_0x58ff5d,_0x21caa1,_0x3d91db);else{if(_0x7fc50c(0xa5c)!=='gfhKr'){const _0x550f31=[];for(const _0x2c9f45 of this[_0x7fc50c(0xae4)]()[_0x7fc50c(0x5d7)]){const _0x66f3e4=_0x1a7c36[_0x2c9f45['skillId']];if(_0x66f3e4&&!_0x550f31['includes'](_0x66f3e4))_0x550f31['push'](_0x66f3e4);}return _0x550f31;}else this['_floatHeight']=(this[_0x7fc50c(0x301)]*(_0x58ff5d-0x1)+this['_targetFloatHeight'])/_0x58ff5d;}this['_floatDuration']--;if(this[_0x7fc50c(0x8b7)]<=0x0)this[_0x7fc50c(0x4e5)]();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x4e5)]=function(){const _0x42e6ab=_0x2d1202;this[_0x42e6ab(0x301)]=this[_0x42e6ab(0x65e)];},Sprite_Battler[_0x2d1202(0x8ec)]['isFloating']=function(){const _0xf48bff=_0x2d1202;return this[_0xf48bff(0x8b7)]>0x0;},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x692)]=function(_0x54f882,_0x4e2de){const _0x53b7c=_0x2d1202;if(!this[_0x53b7c(0x7e3)]())return;if(_0x4e2de<=0x0)return;this[_0x53b7c(0x4c6)]=_0x54f882,this[_0x53b7c(0x96c)]=_0x4e2de,this[_0x53b7c(0x9fe)]=_0x4e2de;},Sprite_Battler['prototype'][_0x2d1202(0xaa3)]=function(){const _0x2d6ec8=_0x2d1202;if(this[_0x2d6ec8(0x96c)]<=0x0)return;const _0x4f4451=this[_0x2d6ec8(0x9fe)]-this[_0x2d6ec8(0x96c)],_0x5830db=this[_0x2d6ec8(0x9fe)]/0x2,_0x3cdb19=this[_0x2d6ec8(0x4c6)],_0x1be7ba=-_0x3cdb19/Math[_0x2d6ec8(0x983)](_0x5830db,0x2);this[_0x2d6ec8(0x6e5)]=_0x1be7ba*Math[_0x2d6ec8(0x983)](_0x4f4451-_0x5830db,0x2)+_0x3cdb19,this['_jumpDuration']--;if(this[_0x2d6ec8(0x96c)]<=0x0)return this[_0x2d6ec8(0x456)]();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x456)]=function(){const _0x3da3f5=_0x2d1202;this[_0x3da3f5(0x6e5)]=0x0;},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x2d2)]=function(){const _0x14724b=_0x2d1202;return this[_0x14724b(0x96c)]>0x0;},Sprite_Battler['prototype'][_0x2d1202(0x538)]=function(_0xcd5b83,_0xc2f69e,_0x46b1f0){const _0x1c436b=_0x2d1202;if(this[_0x1c436b(0x62d)]===_0xcd5b83)return;this[_0x1c436b(0x62d)]=_0xcd5b83,this[_0x1c436b(0x3c0)]=_0xc2f69e,this[_0x1c436b(0x8a4)]=_0xc2f69e,this['_opacityEasing']=_0x46b1f0||_0x1c436b(0x9d0);if(_0xc2f69e<=0x0)this[_0x1c436b(0xad4)]=_0xcd5b83;},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x444)]=function(){const _0x490021=_0x2d1202;if(this[_0x490021(0x276)][_0x490021(0x476)]===_0x490021(0x3d9))return;if(this[_0x490021(0x3c0)]<=0x0)return;const _0x2f4138=this[_0x490021(0x3c0)],_0x34f06b=this['_opacityWholeDuration'],_0x55b3c1=this[_0x490021(0x903)];Imported[_0x490021(0x9ef)]?this[_0x490021(0xad4)]=this[_0x490021(0xa4c)](this['opacity'],this[_0x490021(0x62d)],_0x2f4138,_0x34f06b,_0x55b3c1):this['opacity']=(this[_0x490021(0xad4)]*(_0x2f4138-0x1)+this[_0x490021(0x62d)])/_0x2f4138;this[_0x490021(0x3c0)]--;if(this[_0x490021(0x3c0)]<=0x0)this[_0x490021(0xabf)]();},Sprite_Battler['prototype'][_0x2d1202(0xabf)]=function(){const _0x52fe62=_0x2d1202;this[_0x52fe62(0xad4)]=this[_0x52fe62(0x62d)];},Sprite_Battler[_0x2d1202(0x8ec)]['isChangingOpacity']=function(){const _0x2bf22a=_0x2d1202;return this[_0x2bf22a(0x3c0)]>0x0;},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x503)]=function(){const _0x33f6e2=_0x2d1202;this[_0x33f6e2(0xa35)][_0x33f6e2(0x3ef)]=this['_battler'][_0x33f6e2(0xb7b)](),this['updateShadowPosition']();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0xa8b)]=function(){const _0x5a4c6d=_0x2d1202;if(!this[_0x5a4c6d(0xa35)])return;this[_0x5a4c6d(0xa35)]['y']=this[_0x5a4c6d(0x75a)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x2d1202(0x5fd)]=function(){const _0x2117f0=_0x2d1202;if(!this[_0x2117f0(0x329)])return;this[_0x2117f0(0x50e)]=this[_0x2117f0(0x329)][_0x2117f0(0x82f)](),this['_shadowScaleY']=this[_0x2117f0(0x329)][_0x2117f0(0xbd6)]();},Game_BattlerBase[_0x2d1202(0x8ec)][_0x2d1202(0x82f)]=function(){const _0x3f1a36=_0x2d1202,_0x2eb654=this[_0x3f1a36(0xb90)]()?this[_0x3f1a36(0x832)]():this[_0x3f1a36(0xae4)]();if(_0x2eb654){const _0x5e51d0=_0x2eb654['note'];if(_0x5e51d0[_0x3f1a36(0xaa0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x5e51d0[_0x3f1a36(0xaa0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return'CcgSN'!=='PABTN'?Number(RegExp['$1'])||0x0:!![];}}return 0x1;},Game_BattlerBase[_0x2d1202(0x8ec)]['battlerShadowScaleY']=function(){const _0x5ef25a=_0x2d1202,_0x535e03=this[_0x5ef25a(0xb90)]()?this[_0x5ef25a(0x832)]():this[_0x5ef25a(0xae4)]();if(_0x535e03){if(_0x5ef25a(0x8a1)!==_0x5ef25a(0xbb1)){const _0x290bb8=_0x535e03['note'];if(_0x290bb8[_0x5ef25a(0xaa0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if(_0x5ef25a(0xa87)===_0x5ef25a(0xb6e))_0x589f4c[_0x5ef25a(0xa3c)][_0x5ef25a(0x9af)][_0x5ef25a(0x86c)](this),this[_0x5ef25a(0x3e2)]=[];else return Number(RegExp['$1'])*0.01;}else{if(_0x290bb8[_0x5ef25a(0xaa0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}else this[_0x5ef25a(0x79d)](0x1);}return 0x1;},Sprite_Battler['prototype'][_0x2d1202(0x2d7)]=function(){const _0x8fbf66=_0x2d1202;if(this[_0x8fbf66(0x276)]===Sprite_SvEnemy)return;this[_0x8fbf66(0x5c2)](),this['finalizeScale']();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0xb50)]=function(){const _0x376c34=_0x2d1202,_0x3c16f7=this[_0x376c34(0x5a3)];_0x3c16f7&&(_0x3c16f7[_0x376c34(0x1de)]['x']=this[_0x376c34(0x731)](),_0x3c16f7['scale']['y']=this['mainSpriteScaleY']());},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x731)]=function(){const _0x5ba440=_0x2d1202;let _0x18a569=0x1;return _0x18a569*=this[_0x5ba440(0x3ce)],_0x18a569*=this[_0x5ba440(0xb60)],_0x18a569;},Sprite_Battler['prototype']['mainSpriteScaleY']=function(){const _0x58b4c2=_0x2d1202;return 0x1*this[_0x58b4c2(0x956)];},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x81d)]=function(){const _0x463cfb=_0x2d1202;return this[_0x463cfb(0x72b)]*this[_0x463cfb(0x731)]();},Sprite_Battler['prototype'][_0x2d1202(0x668)]=function(){const _0x1f5d03=_0x2d1202;return this[_0x1f5d03(0x940)]*this['mainSpriteScaleY']();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x88c)]=function(_0x2e781e,_0x2829a5,_0x487b98,_0x7ed5c0){const _0xb50cae=_0x2d1202;if(!this[_0xb50cae(0x7e3)]())return;if(!this[_0xb50cae(0x5a3)])return;if(this[_0xb50cae(0x205)]===_0x2e781e&&this[_0xb50cae(0xb94)]===_0x2829a5)return;this[_0xb50cae(0x205)]=_0x2e781e,this[_0xb50cae(0xb94)]=_0x2829a5,this[_0xb50cae(0x6f4)]=_0x487b98,this[_0xb50cae(0x649)]=_0x487b98,this['_growEasing']=_0x7ed5c0||_0xb50cae(0x9d0),_0x487b98<=0x0&&(this[_0xb50cae(0xb60)]=this[_0xb50cae(0x205)],this['_growY']=this['_targetGrowY']);},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x5c2)]=function(){const _0x4c2f3b=_0x2d1202;if(this[_0x4c2f3b(0x6f4)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x4cc83c=this[_0x4c2f3b(0x6f4)],_0x2e49f7=this['_growWholeDuration'],_0x16118e=this[_0x4c2f3b(0x7b2)];Imported['VisuMZ_0_CoreEngine']?(this[_0x4c2f3b(0xb60)]=this[_0x4c2f3b(0xa4c)](this[_0x4c2f3b(0xb60)],this[_0x4c2f3b(0x205)],_0x4cc83c,_0x2e49f7,_0x16118e),this['_growY']=this[_0x4c2f3b(0xa4c)](this[_0x4c2f3b(0x956)],this[_0x4c2f3b(0xb94)],_0x4cc83c,_0x2e49f7,_0x16118e)):(this[_0x4c2f3b(0xb60)]=(this[_0x4c2f3b(0xb60)]*(_0x4cc83c-0x1)+this['_targetGrowX'])/_0x4cc83c,this['_growY']=(this[_0x4c2f3b(0x956)]*(_0x4cc83c-0x1)+this[_0x4c2f3b(0xb94)])/_0x4cc83c);this[_0x4c2f3b(0x6f4)]--;if(this[_0x4c2f3b(0x6f4)]<=0x0)this[_0x4c2f3b(0x29e)]();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x29e)]=function(){const _0x1e9437=_0x2d1202;this['_growX']=this['_targetGrowX'],this[_0x1e9437(0x956)]=this[_0x1e9437(0xb94)];},Sprite_Battler[_0x2d1202(0x8ec)]['isGrowing']=function(){const _0x20693c=_0x2d1202;return this[_0x20693c(0x6f4)]>0x0;},Sprite_Battler['prototype']['startSkew']=function(_0x188cfc,_0x1f5a79,_0x172ab4,_0x34aa3c){const _0x17665d=_0x2d1202;if(!this[_0x17665d(0x7e3)]())return;if(!this[_0x17665d(0x5a3)])return;if(this[_0x17665d(0x46b)]===_0x188cfc&&this[_0x17665d(0x531)]===_0x1f5a79)return;this['_targetSkewX']=_0x188cfc,this[_0x17665d(0x531)]=_0x1f5a79,this[_0x17665d(0x3dc)]=_0x172ab4,this[_0x17665d(0x765)]=_0x172ab4,this[_0x17665d(0xb62)]=_0x34aa3c||_0x17665d(0x9d0),_0x172ab4<=0x0&&(_0x17665d(0x8aa)!==_0x17665d(0x8aa)?_0x2ef0e5=!_0x8828ee:(this['_distortionSprite'][_0x17665d(0x710)]['x']=this[_0x17665d(0x46b)],this['_distortionSprite'][_0x17665d(0x710)]['y']=this[_0x17665d(0x531)]));},Sprite_Battler['prototype'][_0x2d1202(0x650)]=function(){const _0x170cc2=_0x2d1202;if(this['_skewDuration']<=0x0)return;if(!this[_0x170cc2(0x5a3)])return;const _0x2a4abc=this[_0x170cc2(0x3dc)],_0x4d25ba=this[_0x170cc2(0x765)],_0x2f4589=this[_0x170cc2(0xb62)],_0x306b6e=this[_0x170cc2(0x5a3)];if(Imported['VisuMZ_0_CoreEngine'])_0x306b6e[_0x170cc2(0x710)]['x']=this[_0x170cc2(0xa4c)](_0x306b6e[_0x170cc2(0x710)]['x'],this['_targetSkewX'],_0x2a4abc,_0x4d25ba,_0x2f4589),_0x306b6e[_0x170cc2(0x710)]['y']=this[_0x170cc2(0xa4c)](_0x306b6e['skew']['y'],this[_0x170cc2(0x531)],_0x2a4abc,_0x4d25ba,_0x2f4589);else{if(_0x170cc2(0x95a)===_0x170cc2(0x95a))_0x306b6e[_0x170cc2(0x710)]['x']=(_0x306b6e[_0x170cc2(0x710)]['x']*(_0x2a4abc-0x1)+this['_targetSkewX'])/_0x2a4abc,_0x306b6e['skew']['y']=(_0x306b6e['skew']['y']*(_0x2a4abc-0x1)+this[_0x170cc2(0x531)])/_0x2a4abc;else return _0x5124ee[_0x170cc2(0x9cd)]()[_0x170cc2(0x2ba)]();}this['_skewDuration']--;if(this[_0x170cc2(0x3dc)]<=0x0)this['onSkewEnd']();},Sprite_Battler[_0x2d1202(0x8ec)]['onSkewEnd']=function(){const _0x1b1442=_0x2d1202;this[_0x1b1442(0x5a3)][_0x1b1442(0x710)]['x']=this[_0x1b1442(0x46b)],this['_distortionSprite'][_0x1b1442(0x710)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x2d1202(0x8ec)]['isSkewing']=function(){return this['_skewDuration']>0x0;},Sprite_Battler['prototype'][_0x2d1202(0x657)]=function(_0x5008c4,_0x59587c,_0x2ff899,_0x51de9e){const _0x300268=_0x2d1202;if(!this[_0x300268(0x7e3)]())return;if(!this[_0x300268(0x5a3)])return;if(this['_targetAngle']===_0x5008c4)return;this[_0x300268(0x953)]=_0x5008c4,this[_0x300268(0x277)]=_0x59587c,this[_0x300268(0x4a0)]=_0x59587c,this[_0x300268(0x94a)]=_0x2ff899||_0x300268(0x9d0),this[_0x300268(0x831)]=_0x51de9e;this[_0x300268(0x831)]===undefined&&(_0x300268(0x90e)!==_0x300268(0x8ad)?this[_0x300268(0x831)]=!![]:this[_0x300268(0x2df)](_0x300268(0x9a8)));if(_0x59587c<=0x0){if(_0x300268(0x799)===_0x300268(0x755)){let _0x470577=_0x29bb5b['BattleCore'][_0x300268(0x1c5)][_0x300268(0x86c)](this,_0x489c93);return _0x470577=this[_0x300268(0x817)][_0x300268(0x5a9)]*_0x470577+this[_0x300268(0x817)][_0x300268(0xb2c)],_0x470577;}else this[_0x300268(0x32c)]=_0x5008c4,this[_0x300268(0x831)]&&(this[_0x300268(0x953)]=0x0,this[_0x300268(0x32c)]=0x0);}},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x290)]=function(){const _0x117c56=_0x2d1202;this[_0x117c56(0x7e1)](),this[_0x117c56(0x8ab)]();},Sprite_Battler['prototype'][_0x2d1202(0x7e1)]=function(){const _0xded579=_0x2d1202;if(this['_angleDuration']<=0x0)return;const _0x177e3d=this[_0xded579(0x277)],_0x33caf5=this['_angleWholeDuration'],_0x453ef8=this[_0xded579(0x94a)];if(Imported[_0xded579(0x9ef)])'uakbO'===_0xded579(0x670)?this[_0xded579(0x32c)]=this[_0xded579(0xa4c)](this['_currentAngle'],this[_0xded579(0x953)],_0x177e3d,_0x33caf5,_0x453ef8):this['revertTpbCachedActor']();else{if(_0xded579(0x38d)!==_0xded579(0x38d))for(const _0x41e154 of _0xe7e096){const _0x4d10af=_0x58db7f[0x0][_0xded579(0x995)](_0x41e154[0x0]),_0x4f3fad=_0x4eb6d2[0x1][_0xded579(0x995)](_0x41e154[0x1]),_0x17e79b=new _0x803ae(_0x1ff746[_0xded579(0x995)](_0x4f3fad),'i');_0x380a4f[_0x4d10af]=_0x17e79b;}else this['_currentAngle']=(this[_0xded579(0x32c)]*(_0x177e3d-0x1)+this[_0xded579(0x953)])/_0x177e3d;}this['_angleDuration']--;if(this[_0xded579(0x277)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x568)]=function(){const _0x12ae78=_0x2d1202;this[_0x12ae78(0x32c)]=this[_0x12ae78(0x953)];if(this[_0x12ae78(0x831)]){if('bPGRO'!==_0x12ae78(0x3de))this[_0x12ae78(0x953)]=0x0,this[_0x12ae78(0x32c)]=0x0;else{const _0x4ac1f5=_0x5af55e[_0x12ae78(0x36f)]();this[_0x12ae78(0x949)](_0x177009,_0x4ac1f5),this[_0x12ae78(0x5c8)](_0x12ae78(0xb2e),_0x56b22c,_0x1467bd,!![]),this[_0x12ae78(0x5c8)](_0x12ae78(0xa42),_0x1eb91e,_0xd6b9c6),this[_0x12ae78(0x5c8)](_0x12ae78(0x2be)),this[_0x12ae78(0x5c8)](_0x12ae78(0x2cf),_0x167986,_0x24e113),this[_0x12ae78(0x5c8)](_0x12ae78(0x2aa));}}},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x8dc)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x8ab)]=function(){const _0x5291cf=_0x2d1202;if(!this[_0x5291cf(0x5a3)])return;const _0x59d480=this[_0x5291cf(0x32c)],_0x1d83fd=this[_0x5291cf(0x1de)]['x'],_0x4a1636=this[_0x5291cf(0x329)][_0x5291cf(0xb90)]()?-0x1:0x1;this['_distortionSprite'][_0x5291cf(0x3df)]=_0x59d480*_0x1d83fd*_0x4a1636;const _0x236c36=this[_0x5291cf(0x5a3)][_0x5291cf(0x1de)]['y'];this['_distortionSprite']['y']=this[_0x5291cf(0x940)]*-0.5*(0x2-_0x236c36),this[_0x5291cf(0x5a3)]['y']=Math['ceil'](this[_0x5291cf(0x5a3)]['y']);const _0x540b8d=[this[_0x5291cf(0x42e)],this[_0x5291cf(0x746)],this[_0x5291cf(0x78a)]];for(const _0x43e7de of _0x540b8d){if(!_0x43e7de)continue;_0x43e7de['y']=this[_0x5291cf(0x940)]*0.5;}this[_0x5291cf(0xa35)]&&(_0x5291cf(0x8ed)==='aerIj'?(this['_shadowScaleX']=this[_0x5291cf(0x50e)]??0x1,this['_shadowScaleY']=this[_0x5291cf(0x44d)]??0x1,this['_shadowSprite'][_0x5291cf(0x1de)]['x']=this[_0x5291cf(0x5a3)][_0x5291cf(0x1de)]['x']*this[_0x5291cf(0x50e)],this[_0x5291cf(0xa35)][_0x5291cf(0x1de)]['y']=this[_0x5291cf(0x5a3)][_0x5291cf(0x1de)]['y']*this['_shadowScaleY']):this[_0x5291cf(0x590)]());},VisuMZ['BattleCore']['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x906)],Sprite_Actor['prototype'][_0x2d1202(0x906)]=function(){const _0x495e31=_0x2d1202;VisuMZ[_0x495e31(0xa3c)]['Sprite_Actor_createStateSprite'][_0x495e31(0x86c)](this),VisuMZ[_0x495e31(0xa3c)]['Settings'][_0x495e31(0x678)][_0x495e31(0x36c)]&&this[_0x495e31(0x26e)]();},VisuMZ[_0x2d1202(0xa3c)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x2d1202(0x8ec)]['createStateIconSprite'],Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x269)]=function(){const _0x3b7afd=_0x2d1202;VisuMZ[_0x3b7afd(0xa3c)][_0x3b7afd(0x6a1)][_0x3b7afd(0x678)][_0x3b7afd(0x5b4)]&&this['createHpGaugeSprite'](),VisuMZ[_0x3b7afd(0xa3c)][_0x3b7afd(0x87c)][_0x3b7afd(0x86c)](this);},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x26e)]=function(){const _0x502a15=_0x2d1202;if(!ConfigManager[_0x502a15(0x92c)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x2d1ac5=VisuMZ[_0x502a15(0xa3c)][_0x502a15(0x6a1)][_0x502a15(0x678)],_0x6711ea=new Sprite_HpGauge();_0x6711ea[_0x502a15(0x5e0)]['x']=_0x2d1ac5[_0x502a15(0x7b3)],_0x6711ea[_0x502a15(0x5e0)]['y']=_0x2d1ac5[_0x502a15(0xa23)],_0x6711ea[_0x502a15(0x1de)]['x']=_0x6711ea[_0x502a15(0x1de)]['y']=_0x2d1ac5[_0x502a15(0x4da)],this[_0x502a15(0x68f)]=_0x6711ea,this[_0x502a15(0x304)](this[_0x502a15(0x68f)]);},VisuMZ[_0x2d1202(0xa3c)]['Sprite_Battler_setBattler']=Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x53a)],Sprite_Battler['prototype'][_0x2d1202(0x53a)]=function(_0x1b8b3f){const _0x221d2e=_0x2d1202,_0x38be8d=this[_0x221d2e(0x329)];VisuMZ[_0x221d2e(0xa3c)][_0x221d2e(0x822)][_0x221d2e(0x86c)](this,_0x1b8b3f),this[_0x221d2e(0x811)](_0x1b8b3f);if(_0x38be8d!==_0x1b8b3f)this[_0x221d2e(0x5fd)]();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x811)]=function(_0x2bc5a8){const _0x5067f1=_0x2d1202;if(!_0x2bc5a8)return;if(!this['_hpGaugeSprite'])return;if(_0x2bc5a8['isActor']()){}else{if(_0x2bc5a8[_0x5067f1(0xad8)]()){if(_0x5067f1(0x67a)===_0x5067f1(0xb97))this['_battlerName']=_0x5dff80,this['_mainSprite'][_0x5067f1(0x834)]=_0x2c87d8[_0x5067f1(0x762)](_0x1f097a);else{if(this[_0x5067f1(0x276)]===Sprite_SvEnemy&&!_0x2bc5a8['hasSvBattler']())return;}}}this[_0x5067f1(0x68f)][_0x5067f1(0x882)](_0x2bc5a8,'hp');},Sprite_Battler['prototype'][_0x2d1202(0x31e)]=function(){const _0x5e971b=_0x2d1202;if(!this['_battler'])return;if(!this[_0x5e971b(0x68f)])return;const _0x4c4b45=VisuMZ[_0x5e971b(0xa3c)]['Settings'][_0x5e971b(0x678)],_0x4be3a9=this[_0x5e971b(0x68f)];_0x4be3a9[_0x5e971b(0x3ef)]=this[_0x5e971b(0x922)]();const _0x2f5ed4=_0x4c4b45[_0x5e971b(0x9cc)],_0x4e4181=_0x4c4b45['OffsetY'];_0x4be3a9['x']=_0x2f5ed4,_0x4be3a9['x']+=this[_0x5e971b(0x329)]['battleUIOffsetX'](),_0x4be3a9['y']=-this[_0x5e971b(0x940)]+_0x4e4181,_0x4be3a9['y']+=this[_0x5e971b(0x329)]['battleUIOffsetY']();},Sprite_Battler['prototype'][_0x2d1202(0x922)]=function(){const _0x3058f0=_0x2d1202;if(!this[_0x3058f0(0x329)])return![];if(this[_0x3058f0(0x329)]['isActor']())return!![];const _0x5b5241=this['_battler'][_0x3058f0(0xae4)]()[_0x3058f0(0x5fe)];if(_0x5b5241[_0x3058f0(0xaa0)](/<SHOW HP GAUGE>/i))return!![];if(_0x5b5241['match'](/<HIDE HP GAUGE>/i))return![];const _0x5c80e3=VisuMZ[_0x3058f0(0xa3c)][_0x3058f0(0x6a1)][_0x3058f0(0x678)];if(_0x5c80e3['RequiresDefeat']){if(_0x5c80e3[_0x3058f0(0xa6c)]&&BattleManager[_0x3058f0(0xab3)]())return!![];if(this[_0x3058f0(0x329)]['_visualHpGauge_JustDied'])return![];return this['_battler'][_0x3058f0(0xb7e)]();}return!![];},VisuMZ['BattleCore'][_0x2d1202(0xb72)]=Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x35c)],Sprite_Battler['prototype'][_0x2d1202(0x35c)]=function(){const _0x38eba7=_0x2d1202;if(!this[_0x38eba7(0x329)])return![];return VisuMZ[_0x38eba7(0xa3c)]['Sprite_Battler_isMoving'][_0x38eba7(0x86c)](this);},VisuMZ['BattleCore'][_0x2d1202(0x9ad)]=Sprite_Battler['prototype']['startMove'],Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x434)]=function(_0x3861f8,_0x5a1e5f,_0x5bed61){const _0x247b04=_0x2d1202;this[_0x247b04(0x7e3)]()&&VisuMZ['BattleCore'][_0x247b04(0x9ad)][_0x247b04(0x86c)](this,_0x3861f8,_0x5a1e5f,_0x5bed61);},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x7e3)]=function(){const _0x4825ee=_0x2d1202;if(this[_0x4825ee(0x329)]&&this['_battler'][_0x4825ee(0x7a6)]())return![];if(this[_0x4825ee(0x329)]&&!this['_battler']['canBattlerMove']())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x271)]=function(){},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x255)]=function(){const _0x2c6145=_0x2d1202;this[_0x2c6145(0x434)](0x0,0x0,0xc);},Sprite_Battler[_0x2d1202(0x8ec)][_0x2d1202(0x370)]=function(){},Sprite_Battler['prototype'][_0x2d1202(0x1c0)]=function(){const _0x59f8bc=_0x2d1202,_0x4bd3c1=VisuMZ[_0x59f8bc(0xa3c)][_0x59f8bc(0x6a1)][_0x59f8bc(0x97d)],_0x53b2e4=this['_battler']&&this[_0x59f8bc(0x329)][_0x59f8bc(0xb90)]()?0x1:-0x1,_0x449eef=this[_0x59f8bc(0x99a)]-this[_0x59f8bc(0xb08)]+_0x53b2e4*_0x4bd3c1['FlinchDistanceX'],_0x226da8=this[_0x59f8bc(0x75a)]-this['_homeY']+_0x53b2e4*_0x4bd3c1[_0x59f8bc(0x620)],_0x1f1e68=_0x4bd3c1[_0x59f8bc(0x9ae)];this[_0x59f8bc(0x434)](_0x449eef,_0x226da8,_0x1f1e68);},VisuMZ[_0x2d1202(0xa3c)]['Sprite_Actor_initMembers']=Sprite_Actor['prototype'][_0x2d1202(0x435)],Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x435)]=function(){const _0x299453=_0x2d1202;VisuMZ[_0x299453(0xa3c)][_0x299453(0x2b9)][_0x299453(0x86c)](this),this[_0x299453(0x9b1)]();},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x63a)]=function(){const _0x210005=_0x2d1202;return this[_0x210005(0x5a3)]||this[_0x210005(0x42e)]||this;},VisuMZ['BattleCore'][_0x2d1202(0xb01)]=Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0xbb8)],Sprite_Actor[_0x2d1202(0x8ec)]['moveToStartPosition']=function(){},Sprite_Actor['prototype'][_0x2d1202(0x4f5)]=function(_0xf72267){const _0x31ef87=_0x2d1202;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0xf72267)return;if(!_0xf72267[_0x31ef87(0x7e3)]())return;VisuMZ[_0x31ef87(0xa3c)]['Sprite_Actor_moveToStartPosition'][_0x31ef87(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x3ff)],Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x3ff)]=function(_0x4daaae){const _0x3fd00a=_0x2d1202;VisuMZ[_0x3fd00a(0xa3c)][_0x3fd00a(0x6a1)][_0x3fd00a(0x97d)][_0x3fd00a(0xbb9)]?VisuMZ[_0x3fd00a(0xa3c)][_0x3fd00a(0x6a1)][_0x3fd00a(0x97d)][_0x3fd00a(0xbb9)]['call'](this,_0x4daaae):VisuMZ[_0x3fd00a(0xa3c)][_0x3fd00a(0x3ed)][_0x3fd00a(0x86c)](this,_0x4daaae);},VisuMZ[_0x2d1202(0xa3c)]['Sprite_Actor_setBattler']=Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x53a)],Sprite_Actor['prototype'][_0x2d1202(0x53a)]=function(_0x2be4d2){const _0x41e319=_0x2d1202;VisuMZ[_0x41e319(0xa3c)][_0x41e319(0x93c)][_0x41e319(0x86c)](this,_0x2be4d2),this[_0x41e319(0x1cc)](_0x2be4d2);},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x1cc)]=function(_0x16b0cf){const _0x74e98e=_0x2d1202;if(!_0x16b0cf)return;if(!this[_0x74e98e(0x42e)])return;this['_mainSprite'][_0x74e98e(0x5e0)]['x']=this[_0x74e98e(0x98f)][_0x74e98e(0x24c)](),this[_0x74e98e(0x42e)][_0x74e98e(0x5e0)]['y']=this[_0x74e98e(0x98f)]['svBattlerAnchorY'](),this['updateShadowVisibility']();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x357)]=Sprite_Actor['prototype'][_0x2d1202(0x69e)],Sprite_Actor['prototype'][_0x2d1202(0x69e)]=function(){const _0x5a7588=_0x2d1202;VisuMZ[_0x5a7588(0xa3c)][_0x5a7588(0x357)]['call'](this),this[_0x5a7588(0x98f)]&&('mygXm'===_0x5a7588(0xb67)?this[_0x5a7588(0xa53)]():(this[_0x5a7588(0x30f)](),this[_0x5a7588(0x644)]()));},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x9ab)]=Sprite_Actor['prototype'][_0x2d1202(0x714)],Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x714)]=function(){const _0x2ef93b=_0x2d1202;VisuMZ[_0x2ef93b(0xa3c)]['Sprite_Actor_updateBitmap']['call'](this);if(this['_mainSprite']&&this[_0x2ef93b(0x42e)]['bitmap']&&this[_0x2ef93b(0x329)]){if(this[_0x2ef93b(0x42e)][_0x2ef93b(0x834)][_0x2ef93b(0x3a4)]!==this[_0x2ef93b(0x329)][_0x2ef93b(0x79b)]()){if(_0x2ef93b(0x59d)!==_0x2ef93b(0x59d))return _0x7d36b0['BattleCore'][_0x2ef93b(0x6a1)][_0x2ef93b(0xbd5)]['SkillItemStandardCols'];else this['_mainSprite']['bitmap'][_0x2ef93b(0x3a4)]=this['_battler']['battlerSmoothImage']();}}},VisuMZ[_0x2d1202(0xa3c)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x2d1202(0x8ec)]['updateShadow'],Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x503)]=function(){const _0x396185=_0x2d1202;VisuMZ[_0x396185(0xa3c)]['Sprite_Actor_updateShadow'][_0x396185(0x86c)](this),this[_0x396185(0x53b)]();},Sprite_Actor['prototype']['updateShadowBattleCore']=function(){const _0x35fbaa=_0x2d1202;if(!this[_0x35fbaa(0x42e)])return;if(!this[_0x35fbaa(0xa35)])return;this[_0x35fbaa(0x7b0)](),this[_0x35fbaa(0xa8b)]();},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x30f)]=function(){const _0x490456=_0x2d1202;this[_0x490456(0x891)][_0x490456(0x1de)]['x']=0x1/(this[_0x490456(0x1de)]['x']||0.001),this[_0x490456(0x891)][_0x490456(0x1de)]['y']=0x1/(this[_0x490456(0x1de)]['y']||0.001);},Sprite_Actor[_0x2d1202(0x8ec)]['updateStyleOpacity']=function(){const _0x46141a=_0x2d1202;if(!$gameSystem[_0x46141a(0x1fd)]()&&this[_0x46141a(0x276)]===Sprite_Actor){const _0x16f68f=Scene_Battle[_0x46141a(0x8ec)][_0x46141a(0xbdc)]();[_0x46141a(0x376),_0x46141a(0x7e9),'portrait',_0x46141a(0xb81)][_0x46141a(0x7c6)](_0x16f68f)&&(this[_0x46141a(0xad4)]=0x0);}},Sprite_Actor['prototype'][_0x2d1202(0x589)]=function(){const _0x41cdba=_0x2d1202,_0x4ae4b1=this[_0x41cdba(0x98f)];if(_0x4ae4b1){const _0xc843dc=_0x4ae4b1[_0x41cdba(0x336)]();if(_0x4ae4b1[_0x41cdba(0x78d)]()||_0x4ae4b1[_0x41cdba(0x961)]())this['startMotion'](_0x41cdba(0x330));else{if(_0xc843dc===0x3)this[_0x41cdba(0x2df)](_0x41cdba(0x3b9));else{if(_0xc843dc===0x2)this[_0x41cdba(0x2df)](_0x41cdba(0x92d));else{if(this['forceEscapeSprite'])this['startMotion']('escape');else{if(_0x4ae4b1[_0x41cdba(0xb82)]())this[_0x41cdba(0x2df)](_0x41cdba(0x251));else{if(_0x4ae4b1['isChanting']())this[_0x41cdba(0x2df)](_0x41cdba(0x9a8));else{if(_0x4ae4b1[_0x41cdba(0xa6e)]()||_0x4ae4b1['isGuardWaiting']())this['startMotion'](_0x41cdba(0x992));else{if(_0xc843dc===0x1)this['startMotion']('abnormal');else{if(_0x4ae4b1['isDying']())this[_0x41cdba(0x2df)](_0x41cdba(0x958));else{if(_0x4ae4b1['isUndecided']()){if(_0x41cdba(0x6b1)!==_0x41cdba(0x6b1)){const _0x4fe95f=_0x390868[this[_0x41cdba(0x98f)]['attackSkillId']()];if(!_0x4fe95f)return;if(!this[_0x41cdba(0x2f7)](_0x4fe95f))return;const _0x1f47d8=this['commandStyle'](),_0x491a7f=_0x4cabd1[_0x41cdba(0x88b)](_0x4fe95f),_0x12a654=_0x1a57a0[_0x41cdba(0x481)](_0x4fe95f),_0x58e3b1=_0x1f47d8===_0x41cdba(0x69d)?_0x491a7f:_0x41cdba(0x577)[_0x41cdba(0x995)](_0x12a654,_0x491a7f);this[_0x41cdba(0x814)](_0x58e3b1,'attack',this['_actor'][_0x41cdba(0x249)]());}else this[_0x41cdba(0x2df)]('walk');}else{if(_0x4ae4b1[_0x41cdba(0x8dd)]())this[_0x41cdba(0x2df)](_0x41cdba(0x251));else{if(_0x41cdba(0x616)===_0x41cdba(0x5d5)){const _0x5ee862=this[_0x41cdba(0xb87)](_0x9976b4),_0xed724f=this[_0x41cdba(0x5c6)](_0x1cace4),_0x4f40c5=this[_0x41cdba(0x446)](_0xed724f)[_0x41cdba(0x72b)];this[_0x41cdba(0x48c)](this['isCommandEnabled'](_0x240c86));const _0x35628c=this[_0x41cdba(0x763)]();if(_0x35628c===_0x41cdba(0x9d8))this[_0x41cdba(0xb6a)](_0xed724f,_0x5ee862['x']+_0x5ee862[_0x41cdba(0x72b)]-_0x4f40c5,_0x5ee862['y'],_0x4f40c5);else{if(_0x35628c===_0x41cdba(0x42b)){const _0x3504a6=_0x5ee862['x']+_0x327ace['floor']((_0x5ee862[_0x41cdba(0x72b)]-_0x4f40c5)/0x2);this[_0x41cdba(0xb6a)](_0xed724f,_0x3504a6,_0x5ee862['y'],_0x4f40c5);}else this['drawTextEx'](_0xed724f,_0x5ee862['x'],_0x5ee862['y'],_0x4f40c5);}}else this[_0x41cdba(0x2df)](_0x41cdba(0x330));}}}}}}}}}}}}},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x370)]=function(){const _0x569436=0xa,_0x52c7c9=0x12c*_0x569436,_0xe3c2de=0x1e*_0x569436;this['startMove'](_0x52c7c9,0x0,_0xe3c2de);},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x6d6)]=function(){const _0x28e73f=_0x2d1202;Sprite_Battler[_0x28e73f(0x8ec)][_0x28e73f(0x6d6)][_0x28e73f(0x86c)](this);},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x721)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x2d1202(0x8ec)][_0x2d1202(0x766)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x490)]=function(){},Sprite_Actor[_0x2d1202(0x8ec)]['setupWeaponAnimation']=function(){},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0xb5d)]=function(){const _0x5109fd=_0x2d1202;if(this[_0x5109fd(0xbb3)]&&++this[_0x5109fd(0x365)]>=this[_0x5109fd(0x721)]()){if(this[_0x5109fd(0xbb3)][_0x5109fd(0xa03)]){if('PJjhN'!==_0x5109fd(0x988))this[_0x5109fd(0x3b6)]=(this['_pattern']+0x1)%0x4;else return this['customDamageFormula'](_0x1f7489);}else this[_0x5109fd(0x3b6)]<0x2?this['_pattern']++:this[_0x5109fd(0x589)]();this[_0x5109fd(0x365)]=0x0;}},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x3e1)]=function(_0x51c4fa){const _0x3fac35=_0x2d1202;if(_0x51c4fa===_0x3fac35(0x41a))this[_0x3fac35(0x9a7)]=!![];if(this[_0x3fac35(0x329)]&&this[_0x3fac35(0x329)][_0x3fac35(0x7a6)]()){this[_0x3fac35(0xbb3)]=Sprite_Actor[_0x3fac35(0x5b1)]['dead'];return;}const _0x434f85=Sprite_Actor['MOTIONS'][_0x51c4fa];this[_0x3fac35(0xbb3)]=_0x434f85,this['_motionCount']=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x3c1)]=function(_0x595c64){const _0x27965a=_0x2d1202;this[_0x27965a(0x527)](),this[_0x27965a(0x864)][_0x27965a(0x882)](_0x595c64),this[_0x27965a(0x98f)][_0x27965a(0x7a2)]();},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x527)]=function(){const _0xa9ada=_0x2d1202;let _0x1abc1d=-0x10,_0x13f810=this[_0xa9ada(0x940)]*0.5;const _0x303ed4=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x4270e5=this[_0xa9ada(0x329)][_0xa9ada(0x311)]()[_0xa9ada(0x64c)](_0x3decfa=>_0x3decfa&&_0x3decfa[_0xa9ada(0x5fe)][_0xa9ada(0xaa0)](_0x303ed4)?Number(RegExp['$1']):0x0),_0x173724=this[_0xa9ada(0x329)][_0xa9ada(0x311)]()[_0xa9ada(0x64c)](_0x842b1f=>_0x842b1f&&_0x842b1f[_0xa9ada(0x5fe)][_0xa9ada(0xaa0)](_0x303ed4)?Number(RegExp['$2']):0x0);_0x1abc1d=_0x4270e5[_0xa9ada(0x8ba)]((_0x4672e0,_0x3e7274)=>_0x4672e0+_0x3e7274,_0x1abc1d),_0x13f810=_0x173724[_0xa9ada(0x8ba)]((_0x9cf60,_0x48efac)=>_0x9cf60+_0x48efac,_0x13f810),this[_0xa9ada(0x864)]['x']=_0x1abc1d,this[_0xa9ada(0x864)]['y']=_0x13f810,this[_0xa9ada(0x864)][_0xa9ada(0x69e)]();},Sprite_Weapon[_0x2d1202(0x8ec)][_0x2d1202(0x882)]=function(_0x52cd20){const _0x443a34=_0x2d1202;this[_0x443a34(0x226)]=_0x52cd20,this[_0x443a34(0x9d6)]=-0x1,this['_pattern']=0x0,this[_0x443a34(0x987)](),this[_0x443a34(0x378)]();},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0xb61)]=function(){},Sprite_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x271)]=function(){const _0x36c147=_0x2d1202,_0xfa18fd=VisuMZ[_0x36c147(0xa3c)]['Settings'][_0x36c147(0xb3f)],_0x40d63b=_0xfa18fd['StepDistanceX'],_0x51c844=_0xfa18fd[_0x36c147(0x977)],_0x5afab3=_0xfa18fd[_0x36c147(0xacb)];this[_0x36c147(0x434)](-_0x40d63b,-_0x51c844,_0x5afab3);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x99f)]=Sprite_Actor['prototype'][_0x2d1202(0x378)],Sprite_Actor['prototype'][_0x2d1202(0x378)]=function(){const _0x3e2d8c=_0x2d1202;this['applyFreezeMotionFrames'](),VisuMZ[_0x3e2d8c(0xa3c)][_0x3e2d8c(0x99f)][_0x3e2d8c(0x86c)](this);},Sprite_Actor['prototype'][_0x2d1202(0x97e)]=function(){const _0x2532d4=_0x2d1202;if(this[_0x2532d4(0x329)]&&this['_battler'][_0x2532d4(0x3ee)]){const _0x2dc312=this[_0x2532d4(0x329)][_0x2532d4(0x3ee)];this[_0x2532d4(0xbb3)]=Sprite_Actor['MOTIONS'][_0x2dc312[_0x2532d4(0x363)]],this[_0x2532d4(0x3b6)]=_0x2dc312['pattern'];const _0x1f4f4c=this['_weaponSprite'];_0x1f4f4c[_0x2532d4(0xb47)](_0x2dc312[_0x2532d4(0x429)],_0x2dc312[_0x2532d4(0x6f5)]),this[_0x2532d4(0x527)]();}},Sprite_Weapon[_0x2d1202(0x8ec)][_0x2d1202(0xb47)]=function(_0x353b93,_0x38b15b){const _0x4b8412=_0x2d1202;this[_0x4b8412(0x226)]=_0x353b93,this['_animationCount']=-Infinity,this[_0x4b8412(0x3b6)]=_0x38b15b,this[_0x4b8412(0x987)](),this[_0x4b8412(0x378)]();},Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x435)]=function(){const _0x24380e=_0x2d1202;Sprite_Battler['prototype']['initMembers']['call'](this),this[_0x24380e(0x7b8)]=null,this[_0x24380e(0x91f)]=![],this[_0x24380e(0x696)]='',this[_0x24380e(0x638)]=0x0,this[_0x24380e(0xa9c)]=null,this['_effectDuration']=0x0,this[_0x24380e(0xb8e)]=0x0,this[_0x24380e(0xbc9)](),this[_0x24380e(0x269)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x2a4)]=Sprite_Enemy[_0x2d1202(0x8ec)]['update'],Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x69e)]=function(){const _0x1b2504=_0x2d1202;VisuMZ[_0x1b2504(0xa3c)]['Sprite_Enemy_update']['call'](this),this[_0x1b2504(0x7b0)]();},Sprite_Enemy['prototype']['createMainSprite']=function(){const _0x36c316=_0x2d1202;this[_0x36c316(0x42e)]=new Sprite(),this[_0x36c316(0x42e)]['anchor']['x']=0.5,this['_mainSprite'][_0x36c316(0x5e0)]['y']=0x1,this[_0x36c316(0x304)](this[_0x36c316(0x42e)]),this[_0x36c316(0x9b1)]();},Sprite_Enemy[_0x2d1202(0x8ec)]['mainSprite']=function(){const _0x5132fc=_0x2d1202;return this[_0x5132fc(0x5a3)]||this['_mainSprite']||this;},Sprite_Enemy[_0x2d1202(0x8ec)]['loadBitmap']=function(_0x58fd96){const _0x1f31fd=_0x2d1202;this[_0x1f31fd(0x834)]=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){const _0x405f73=this[_0x1f31fd(0x7b8)][_0x1f31fd(0x211)]();this[_0x1f31fd(0x834)]=new Bitmap(_0x405f73[_0x1f31fd(0x72b)],_0x405f73[_0x1f31fd(0x940)]),this[_0x1f31fd(0x42e)][_0x1f31fd(0x834)]=new Bitmap(0x1,0x1);}else $gameSystem[_0x1f31fd(0x1fd)]()?_0x1f31fd(0x67f)===_0x1f31fd(0x936)?_0x3dec4d=_0x456222[_0x1f31fd(0x9a6)]:(this[_0x1f31fd(0x42e)][_0x1f31fd(0x834)]=ImageManager['loadSvEnemy'](_0x58fd96),this[_0x1f31fd(0x42e)][_0x1f31fd(0x834)][_0x1f31fd(0x65a)](this[_0x1f31fd(0x7bf)][_0x1f31fd(0x937)](this))):'coVoo'!==_0x1f31fd(0x6be)?(this[_0x1f31fd(0x42e)]['bitmap']=ImageManager[_0x1f31fd(0x2fa)](_0x58fd96),this[_0x1f31fd(0x42e)][_0x1f31fd(0x834)]['addLoadListener'](this[_0x1f31fd(0x7bf)][_0x1f31fd(0x937)](this))):(this[_0x1f31fd(0x5a3)][_0x1f31fd(0x710)]['x']=this[_0x1f31fd(0x46b)],this[_0x1f31fd(0x5a3)][_0x1f31fd(0x710)]['y']=this[_0x1f31fd(0x531)]);},Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x7bf)]=function(){const _0xca30ed=_0x2d1202,_0x33309f=this['_mainSprite']['bitmap'];_0x33309f&&(this[_0xca30ed(0x834)]=new Bitmap(_0x33309f[_0xca30ed(0x72b)],_0x33309f[_0xca30ed(0x940)]));},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xbb6)]=Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x2b0)],Sprite_Enemy['prototype'][_0x2d1202(0x2b0)]=function(_0x21a22e){const _0x27b428=_0x2d1202;this[_0x27b428(0x42e)]&&(_0x27b428(0x377)!==_0x27b428(0x377)?this[_0x27b428(0x589)]():this[_0x27b428(0x42e)][_0x27b428(0x2b0)](_0x21a22e));},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x305)]=Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0xadf)],Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0xadf)]=function(){const _0x573323=_0x2d1202;this['allowCollapse']()?_0x573323(0x8b2)!==_0x573323(0x8b2)?this[_0x573323(0x304)](this[_0x573323(0x919)]):VisuMZ[_0x573323(0xa3c)][_0x573323(0x305)]['call'](this):(this['_appeared']=!this[_0x573323(0x7b8)]['isHidden'](),!this['_appeared']&&(_0x573323(0x3e0)===_0x573323(0x3e0)?this[_0x573323(0xad4)]=0x0:this[_0x573323(0xa35)]['setFrame'](0x0,0x0,0x0,0x0)));},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x37d)]=Sprite_Enemy['prototype'][_0x2d1202(0x2f0)],Sprite_Enemy['prototype'][_0x2d1202(0x2f0)]=function(){const _0x41e624=_0x2d1202;if(this[_0x41e624(0x84e)]())VisuMZ['BattleCore']['Sprite_Enemy_updateCollapse']['call'](this);},Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x378)]=function(){const _0x4d17ef=_0x2d1202;Sprite_Battler['prototype'][_0x4d17ef(0x378)][_0x4d17ef(0x86c)](this);const _0x30837e=this[_0x4d17ef(0x63a)]()||this;if(!_0x30837e)return;!_0x30837e['bitmap']&&(_0x30837e[_0x4d17ef(0x834)]=new Bitmap(this[_0x4d17ef(0x72b)],this[_0x4d17ef(0x940)])),this[_0x4d17ef(0xa9c)]==='bossCollapse'?this[_0x4d17ef(0x42e)][_0x4d17ef(0xa1b)](0x0,0x0,this['_mainSprite'][_0x4d17ef(0x72b)],this[_0x4d17ef(0x532)]):_0x30837e[_0x4d17ef(0xa1b)](0x0,0x0,_0x30837e[_0x4d17ef(0x834)][_0x4d17ef(0x72b)],this[_0x4d17ef(0x834)][_0x4d17ef(0x940)]);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x76e)]=Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0xab5)],Sprite_Enemy['prototype'][_0x2d1202(0xab5)]=function(){const _0x36fe12=_0x2d1202;if(this[_0x36fe12(0x84e)]())VisuMZ[_0x36fe12(0xa3c)][_0x36fe12(0x76e)]['call'](this);},Sprite_Enemy['prototype'][_0x2d1202(0x35c)]=function(){const _0x1ddb33=_0x2d1202;return Sprite_Battler[_0x1ddb33(0x8ec)]['isMoving'][_0x1ddb33(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x1ea)]=Sprite_Enemy[_0x2d1202(0x8ec)]['updateStateSprite'],Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x30f)]=function(){const _0x5cc38a=_0x2d1202;VisuMZ[_0x5cc38a(0xa3c)]['Sprite_Enemy_updateStateSprite'][_0x5cc38a(0x86c)](this),this[_0x5cc38a(0x7b1)]();},Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x7b1)]=function(){const _0x489a1a=_0x2d1202,_0x5adf13=VisuMZ['BattleCore'][_0x489a1a(0x6a1)][_0x489a1a(0x540)];if(_0x5adf13['NameAttachStateIcon']&&!_0x5adf13[_0x489a1a(0xb6d)]){if(_0x489a1a(0x5b6)===_0x489a1a(0x5b6)){this['_stateIconSprite']['opacity']=0x0;return;}else{if(!_0x3b03b9[_0x489a1a(0xa3c)]['JS'][_0x8a0163]['call'](this,this[_0x489a1a(0x98f)],_0x41b9b8))return![];}}this['_stateIconSprite']['x']=0x0,this['_stateIconSprite']['x']+=this[_0x489a1a(0x329)][_0x489a1a(0x7ed)](),this[_0x489a1a(0x38f)]['y']=-this[_0x489a1a(0x834)][_0x489a1a(0x940)]-this[_0x489a1a(0x38f)][_0x489a1a(0x940)],this['_stateIconSprite']['y']+=this['_battler']['battleUIOffsetY'](),this[_0x489a1a(0x38f)][_0x489a1a(0x1de)]['x']=0x1/(this[_0x489a1a(0x1de)]['x']||0.001),this[_0x489a1a(0x38f)][_0x489a1a(0x1de)]['y']=0x1/(this[_0x489a1a(0x1de)]['y']||0.001);if(this[_0x489a1a(0xb7b)]()){if(_0x489a1a(0x767)!=='LivMH')this['_svBattlerSprite']['_stateSprite']['scale']['x']=-0x1/(this[_0x489a1a(0x1de)]['x']||0.001),this[_0x489a1a(0x746)][_0x489a1a(0x891)][_0x489a1a(0x1de)]['y']=0x1/(this[_0x489a1a(0x1de)]['y']||0.001);else{const _0x4208bf=_0x5b9ed1[_0x489a1a(0x8ec)][_0x489a1a(0x9e9)][_0x489a1a(0x86c)](arguments,0x1),_0x71859f={'name':_0x1db9cc,'params':_0x4208bf},_0x13b3e8=this['_methods'][_0x489a1a(0x64c)](_0x298e31=>_0x298e31[_0x489a1a(0x476)])[_0x489a1a(0x783)](_0x489a1a(0x8e9));_0x13b3e8>=0x0?this[_0x489a1a(0x400)][_0x489a1a(0x62f)](_0x13b3e8,0x0,_0x71859f):this[_0x489a1a(0x400)][_0x489a1a(0x5c8)](_0x71859f);}}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x5f0)]=Sprite_Enemy[_0x2d1202(0x8ec)]['setBattler'],Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x53a)]=function(_0x24b2a9){const _0xbd0470=_0x2d1202;VisuMZ[_0xbd0470(0xa3c)][_0xbd0470(0x5f0)]['call'](this,_0x24b2a9),this[_0xbd0470(0x2dc)](_0x24b2a9);},Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x2dc)]=function(_0x2e72dd){const _0x573800=_0x2d1202;!this[_0x573800(0x746)]&&('tPpou'===_0x573800(0x5f4)?(this[_0x573800(0x746)]=new Sprite_SvEnemy(_0x2e72dd),this['attachSpritesToDistortionSprite']()):_0x3f2bb5[_0x573800(0x36f)]()['damage'][_0x573800(0x428)]>0x0?this[_0x573800(0x7a1)]():this[_0x573800(0xa73)]('skill')),this['_svBattlerSprite'][_0x573800(0x53a)](_0x2e72dd);},Sprite_Enemy['prototype'][_0x2d1202(0xb7b)]=function(){const _0x36dfa5=_0x2d1202;return this[_0x36dfa5(0x7b8)]&&this['_enemy'][_0x36dfa5(0xb7b)]();},Sprite_Enemy[_0x2d1202(0x8ec)]['allowCollapse']=function(){const _0x1b8f57=_0x2d1202;if(this[_0x1b8f57(0xb7b)]())return this['_enemy']['allowCollapse']();else{if('baNRc'!==_0x1b8f57(0x3a1))return!![];else{const _0x54df9b=this[_0x1b8f57(0x8cd)](),_0x43c024=_0x99f3cc[_0x1b8f57(0xa3c)][_0x1b8f57(0x6a1)]['PartyCmd']['CmdIconAutoBattle'],_0x5f3f09=_0x54df9b===_0x1b8f57(0x69d)?_0x59e0cb[_0x1b8f57(0x1ba)]:_0x1b8f57(0x577)[_0x1b8f57(0x995)](_0x43c024,_0x61e139[_0x1b8f57(0x1ba)]),_0x194e8a=this['isAutoBattleCommandEnabled']();this[_0x1b8f57(0x814)](_0x5f3f09,'autoBattle',_0x194e8a);}}},Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x589)]=function(){const _0x25f752=_0x2d1202;this['hasSvBattler']()&&this[_0x25f752(0x746)][_0x25f752(0x589)]();},Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x3e1)]=function(_0x4b2232){const _0x5ebd9c=_0x2d1202;if(this[_0x5ebd9c(0xb7b)]())this['_svBattlerSprite'][_0x5ebd9c(0x3e1)](_0x4b2232);},Sprite_Enemy[_0x2d1202(0x8ec)][_0x2d1202(0x3c1)]=function(_0x5ca61f){const _0x4508ba=_0x2d1202;if(this[_0x4508ba(0xb7b)]())this['_svBattlerSprite']['forceWeaponAnimation'](_0x5ca61f);},Sprite_Enemy['prototype'][_0x2d1202(0x271)]=function(){const _0x28c0cc=_0x2d1202,_0x57f299=VisuMZ[_0x28c0cc(0xa3c)][_0x28c0cc(0x6a1)][_0x28c0cc(0xb3f)],_0xd72638=_0x57f299[_0x28c0cc(0xa9b)],_0x16a25a=_0x57f299['StepDistanceY'],_0x20fe97=_0x57f299[_0x28c0cc(0xacb)];this[_0x28c0cc(0x434)](_0xd72638,_0x16a25a,_0x20fe97);};function Sprite_SvEnemy(){const _0x38231a=_0x2d1202;this[_0x38231a(0x3dd)](...arguments);}Sprite_SvEnemy[_0x2d1202(0x8ec)]=Object[_0x2d1202(0xa15)](Sprite_Actor[_0x2d1202(0x8ec)]),Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x276)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)]=function(_0x5682a0){const _0x17e385=_0x2d1202;Sprite_Actor[_0x17e385(0x8ec)]['initialize'][_0x17e385(0x86c)](this,_0x5682a0),this[_0x17e385(0x1de)]['x']=-0x1,this[_0x17e385(0x891)][_0x17e385(0x1de)]['x']=-0x1;},Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x993)]=function(){},Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0xbb8)]=function(){},Sprite_SvEnemy['prototype'][_0x2d1202(0x3ff)]=function(_0x39c7dd){},Sprite_SvEnemy['prototype'][_0x2d1202(0x503)]=function(){},Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0xa8b)]=function(){},Sprite_SvEnemy[_0x2d1202(0x8ec)]['updateStateSprite']=function(){const _0x39e71f=_0x2d1202;this['_stateSprite'][_0x39e71f(0x3ef)]=![];},Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x714)]=function(){const _0x322ab6=_0x2d1202;Sprite_Battler[_0x322ab6(0x8ec)][_0x322ab6(0x714)][_0x322ab6(0x86c)](this);const _0x1b6bde=this['_actor'][_0x322ab6(0x867)]();if(this[_0x322ab6(0x696)]!==_0x1b6bde){if(_0x322ab6(0x7c8)!=='bgwtm')this[_0x322ab6(0x696)]=_0x1b6bde,this['_mainSprite'][_0x322ab6(0x834)]=ImageManager['loadSvActor'](_0x1b6bde);else{const _0x2428e6=[_0x322ab6(0x44b),'PostApplyAsUserJS',_0x322ab6(0x7f6),'PostDamageAsUserJS',_0x322ab6(0x356),_0x322ab6(0x55f),_0x322ab6(0x1bf),'PostDamageAsTargetJS',_0x322ab6(0x8f8),_0x322ab6(0xafa),_0x322ab6(0x340),_0x322ab6(0x828),_0x322ab6(0xbaa),_0x322ab6(0x4c2),_0x322ab6(0x75f),_0x322ab6(0x1f5),_0x322ab6(0x8cc),_0x322ab6(0x6f3),'EscapeSuccessJS',_0x322ab6(0x6cf),_0x322ab6(0x3d3),_0x322ab6(0x364),_0x322ab6(0x86a),_0x322ab6(0x5e8),'PreRegenerateJS',_0x322ab6(0xa7a)];for(const _0x2ab16d of _0x2428e6){_0x27b49a[_0x322ab6(0xa3c)][_0x322ab6(0x24b)](_0x2e8707,_0x2ab16d);}}}this[_0x322ab6(0x42e)]&&this[_0x322ab6(0x42e)][_0x322ab6(0x834)]&&this[_0x322ab6(0x329)]&&(this['_mainSprite']['bitmap'][_0x322ab6(0x3a4)]!==this['_battler'][_0x322ab6(0x79b)]()&&(this[_0x322ab6(0x42e)][_0x322ab6(0x834)][_0x322ab6(0x3a4)]=this[_0x322ab6(0x329)][_0x322ab6(0x79b)]()));},Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x370)]=function(){},Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x434)]=function(_0x3d3ed8,_0x440993,_0x472b41){const _0x1cac74=_0x2d1202;if(this[_0x1cac74(0x553)])this[_0x1cac74(0x553)][_0x1cac74(0x434)](_0x3d3ed8,_0x440993,_0x472b41);},Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x589)]=function(){const _0x1c55b7=_0x2d1202,_0x559067=this[_0x1c55b7(0x98f)];if(_0x559067){const _0x373c7a=_0x559067[_0x1c55b7(0x336)]();if(_0x559067[_0x1c55b7(0x78d)]()||_0x559067['isActing']()){if(_0x1c55b7(0x9d9)===_0x1c55b7(0x9d5)){const _0x5de2b9=this[_0x1c55b7(0xb87)](_0x4fe85b),_0x4077ff=this['commandName'](_0x3661a7),_0x3e56ba=this[_0x1c55b7(0x446)](_0x4077ff)['width'];this['changePaintOpacity'](this[_0x1c55b7(0x240)](_0x4cd171));const _0x4b74f9=this[_0x1c55b7(0x763)]();if(_0x4b74f9===_0x1c55b7(0x9d8))this['drawTextEx'](_0x4077ff,_0x5de2b9['x']+_0x5de2b9[_0x1c55b7(0x72b)]-_0x3e56ba,_0x5de2b9['y'],_0x3e56ba);else{if(_0x4b74f9===_0x1c55b7(0x42b)){const _0xe2fa1d=_0x5de2b9['x']+_0x32edf3[_0x1c55b7(0x914)]((_0x5de2b9[_0x1c55b7(0x72b)]-_0x3e56ba)/0x2);this[_0x1c55b7(0xb6a)](_0x4077ff,_0xe2fa1d,_0x5de2b9['y'],_0x3e56ba);}else this['drawTextEx'](_0x4077ff,_0x5de2b9['x'],_0x5de2b9['y'],_0x3e56ba);}}else this['startMotion']('walk');}else{if(_0x373c7a===0x3)this[_0x1c55b7(0x2df)](_0x1c55b7(0x3b9));else{if(_0x373c7a===0x2)this[_0x1c55b7(0x2df)](_0x1c55b7(0x92d));else{if(_0x559067['isChanting']())this[_0x1c55b7(0x2df)](_0x1c55b7(0x9a8));else{if(_0x559067[_0x1c55b7(0xa6e)]()||_0x559067[_0x1c55b7(0x6e8)]())this['startMotion'](_0x1c55b7(0x992));else{if(_0x373c7a===0x1)_0x1c55b7(0x215)!==_0x1c55b7(0x215)?(_0x4da8f5[_0x1c55b7(0x8ec)][_0x1c55b7(0x606)][_0x1c55b7(0x86c)](this),this[_0x1c55b7(0x73a)][_0x1c55b7(0x703)]=_0x3c5404['BattleCore'][_0x1c55b7(0x6a1)][_0x1c55b7(0x540)][_0x1c55b7(0xb80)]):this[_0x1c55b7(0x2df)](_0x1c55b7(0x243));else{if(_0x559067[_0x1c55b7(0xa1c)]())_0x1c55b7(0x2ca)==='gUJUF'?(_0x51a74c[_0x1c55b7(0xa3c)]['Game_Interpreter_terminate'][_0x1c55b7(0x86c)](this),this[_0x1c55b7(0x4ab)]&&(this[_0x1c55b7(0x4ab)]=_0x570f78,_0x39a7a0['_scene'][_0x1c55b7(0x4c0)]())):this[_0x1c55b7(0x2df)](_0x1c55b7(0x958));else _0x559067[_0x1c55b7(0x923)]()?_0x1c55b7(0x4ec)===_0x1c55b7(0x4ec)?this[_0x1c55b7(0x2df)]('walk'):_0x5833c4+=(_0x27a707[_0x1c55b7(0xad8)]()?-0x1:0x1)*_0x38ad2e[_0x1c55b7(0x81d)]()/0x2:this[_0x1c55b7(0x2df)](_0x559067[_0x1c55b7(0x211)]()[_0x1c55b7(0x506)]||'walk');}}}}}}}},Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x745)]=function(){const _0x140ab4=_0x2d1202;if(this['parent'])return this[_0x140ab4(0x553)][_0x140ab4(0x735)]===0x0&&this[_0x140ab4(0x553)][_0x140ab4(0x654)]===0x0;else{if(_0x140ab4(0x9dc)===_0x140ab4(0x76b)){const _0x143ba0=_0x2e1c48[_0x140ab4(0x647)]('['+_0x3ad03a['$1'][_0x140ab4(0xaa0)](/\d+/g)+']');for(const _0x58c602 of _0x143ba0){if(!_0xd9dc6e[_0x140ab4(0x57c)](_0x58c602))return![];}return!![];}else return!![];}},Sprite_SvEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x815)]=function(){},VisuMZ[_0x2d1202(0xa3c)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation['prototype'][_0x2d1202(0xbd3)],Sprite_Animation[_0x2d1202(0x8ec)][_0x2d1202(0xbd3)]=function(_0x5689bb){const _0x3b77c6=_0x2d1202;if(_0x5689bb[_0x3b77c6(0x5a3)]){if(_0x3b77c6(0xb58)!==_0x3b77c6(0xb58))_0xdb1b2e=this[_0x3b77c6(0x211)]()[_0x3b77c6(0x651)]||0x0;else return this['targetDistortionSpritePosition'](_0x5689bb);}else return VisuMZ['BattleCore'][_0x3b77c6(0x293)][_0x3b77c6(0x86c)](this,_0x5689bb);},Sprite_Animation[_0x2d1202(0x8ec)][_0x2d1202(0x38b)]=function(_0x5a7c4a){const _0x55f387=_0x2d1202;let _0x43dc20=_0x5a7c4a['x'],_0x482c1c=_0x5a7c4a['y'],_0x48b2e4=_0x5a7c4a['height'],_0xaabca3=_0x5a7c4a[_0x55f387(0x5a3)]['scale']['y'];_0x5a7c4a['x']=_0x5a7c4a['_baseX']+_0x5a7c4a[_0x55f387(0x915)](),_0x5a7c4a['y']=_0x5a7c4a[_0x55f387(0x75a)]+_0x5a7c4a[_0x55f387(0xb5b)](),_0x5a7c4a[_0x55f387(0x940)]*=_0xaabca3;let _0x5996ad=VisuMZ[_0x55f387(0xa3c)][_0x55f387(0x293)][_0x55f387(0x86c)](this,_0x5a7c4a);return _0x5a7c4a['x']=_0x43dc20,_0x5a7c4a['y']=_0x482c1c,_0x5a7c4a[_0x55f387(0x940)]=_0x48b2e4,_0x5996ad;},Sprite_Damage['prototype'][_0x2d1202(0x90f)]=function(_0x2d8b0b){const _0x1bd580=_0x2d1202,_0x1df360=_0x2d8b0b['getNextDamagePopup']()||_0x2d8b0b['result']();if(_0x1df360[_0x1bd580(0x23c)]||_0x1df360[_0x1bd580(0xb70)])this[_0x1bd580(0x6a7)]=0x0,this[_0x1bd580(0x60d)]();else{if(_0x1df360[_0x1bd580(0xa40)])this[_0x1bd580(0x6a7)]=_0x1df360[_0x1bd580(0x206)]>=0x0?0x0:0x1,this['createDigits'](_0x1df360[_0x1bd580(0x206)]);else _0x2d8b0b[_0x1bd580(0xb23)]()&&_0x1df360['mpDamage']!==0x0&&(this[_0x1bd580(0x6a7)]=_0x1df360[_0x1bd580(0xae9)]>=0x0?0x2:0x3,this[_0x1bd580(0x9aa)](_0x1df360['mpDamage']));}_0x1df360[_0x1bd580(0x737)]&&this['setupCriticalEffect']();},Sprite_Damage[_0x2d1202(0x8ec)][_0x2d1202(0x882)]=function(_0x20a3da){},Sprite_Damage[_0x2d1202(0x8ec)][_0x2d1202(0x9aa)]=function(_0x14e32b){const _0x4b1f48=_0x2d1202;let _0x1b0c91=this[_0x4b1f48(0x628)](_0x14e32b);const _0x31f42d=this[_0x4b1f48(0x703)](),_0x396538=Math['floor'](_0x31f42d*0.75);for(let _0x1f8a24=0x0;_0x1f8a24<_0x1b0c91[_0x4b1f48(0x1d7)];_0x1f8a24++){const _0x4ee0a7=this[_0x4b1f48(0x725)](_0x396538,_0x31f42d);_0x4ee0a7[_0x4b1f48(0x834)][_0x4b1f48(0xb51)](_0x1b0c91[_0x1f8a24],0x0,0x0,_0x396538,_0x31f42d,'center'),_0x4ee0a7['x']=(_0x1f8a24-(_0x1b0c91[_0x4b1f48(0x1d7)]-0x1)/0x2)*_0x396538,_0x4ee0a7['dy']=-_0x1f8a24;}},Sprite_Damage[_0x2d1202(0x8ec)][_0x2d1202(0x628)]=function(_0x2f1250){const _0x57ef8b=_0x2d1202;let _0x559639=Math[_0x57ef8b(0x4d4)](_0x2f1250)[_0x57ef8b(0x247)]();this[_0x57ef8b(0x368)]()&&(_0x559639=VisuMZ[_0x57ef8b(0x341)](_0x559639));const _0x3d4764=VisuMZ[_0x57ef8b(0xa3c)]['Settings'][_0x57ef8b(0x916)];let _0x726c0e='',_0x1bd6bb='';switch(this[_0x57ef8b(0x6a7)]){case 0x0:_0x726c0e=_0x3d4764['hpDamageFmt']||_0x57ef8b(0x4ac),_0x1bd6bb=TextManager['hp'];if(_0x2f1250===0x0)_0x726c0e='%1';break;case 0x1:_0x726c0e=_0x3d4764['hpHealingFmt']||_0x57ef8b(0x957),_0x1bd6bb=TextManager['hp'];break;case 0x2:_0x726c0e=_0x3d4764['mpDamageFmt']||'-%1\x20MP',_0x1bd6bb=TextManager['mp'];break;case 0x3:_0x726c0e=_0x3d4764[_0x57ef8b(0x605)]||'+%1\x20MP',_0x1bd6bb=TextManager['mp'];break;}return _0x726c0e['format'](_0x559639,_0x1bd6bb)[_0x57ef8b(0x43b)]();},Sprite_Damage['prototype'][_0x2d1202(0x368)]=function(){const _0x42a92a=_0x2d1202;return Imported[_0x42a92a(0x9ef)]?_0x42a92a(0xad1)===_0x42a92a(0xbb7)?_0x258444[_0x42a92a(0xa3c)][_0x42a92a(0x6a1)][_0x42a92a(0x540)][_0x42a92a(0x8ea)]?this['_battler'][_0x42a92a(0xa44)]():_0x10dc1a[_0x42a92a(0xb69)][_0x42a92a(0x28d)]&&_0x415070[_0x42a92a(0xb69)][_0x42a92a(0x28d)][_0x42a92a(0xa7c)]&&_0xbcc82e[_0x42a92a(0xb69)]['_enemyWindow'][_0x42a92a(0x2a1)][_0x42a92a(0x7c6)](this[_0x42a92a(0x329)]):VisuMZ[_0x42a92a(0x421)][_0x42a92a(0x6a1)]['QoL'][_0x42a92a(0xb9c)]:![];},Sprite_Damage['prototype'][_0x2d1202(0x849)]=function(){const _0xf46d89=_0x2d1202,_0x5200cb=VisuMZ['BattleCore'][_0xf46d89(0x6a1)][_0xf46d89(0x916)];this[_0xf46d89(0x4de)]=_0x5200cb[_0xf46d89(0x667)]['slice'](0x0),this[_0xf46d89(0x9f9)]=_0x5200cb[_0xf46d89(0x59b)];},Sprite_Damage[_0x2d1202(0x8ec)][_0x2d1202(0x86f)]=function(_0xc6250d,_0x376e07){const _0x595303=_0x2d1202;this['_flashColor']=_0x376e07[_0x595303(0x835)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x595303(0x1c7)](this[_0x595303(0x4de)]),this[_0x595303(0x9f9)]=_0x376e07[_0x595303(0x337)]||0x0;const _0x228afd=this['fontSize'](),_0x6cd0fc=Math[_0x595303(0x914)](_0x228afd*0x1e),_0x84ca55=this[_0x595303(0x725)](_0x6cd0fc,_0x228afd);_0x84ca55['bitmap']['textColor']=ColorManager[_0x595303(0x23b)](_0x376e07[_0x595303(0x5fc)]),_0x84ca55[_0x595303(0x834)][_0x595303(0xb51)](_0xc6250d,0x0,0x0,_0x6cd0fc,_0x228afd,_0x595303(0x42b)),_0x84ca55['dy']=0x0;},Sprite_Damage[_0x2d1202(0x8ec)][_0x2d1202(0x3ad)]=function(_0x5ec760,_0x233a7a,_0x6c5995){const _0x3a5f9f=_0x2d1202,_0x545ec1=Math[_0x3a5f9f(0x717)](this['fontSize'](),ImageManager[_0x3a5f9f(0x420)]),_0x4130a4=Math[_0x3a5f9f(0x914)](_0x545ec1*0x1e),_0x49e722=this[_0x3a5f9f(0x725)](_0x4130a4,_0x545ec1),_0x41e040=ImageManager['iconWidth']/0x2,_0x51be42=_0x49e722['bitmap'][_0x3a5f9f(0x2fb)](_0x233a7a+'\x20');_0x49e722[_0x3a5f9f(0x834)]['textColor']=ColorManager[_0x3a5f9f(0x23b)](_0x6c5995[_0x3a5f9f(0x5fc)]),_0x49e722[_0x3a5f9f(0x834)]['drawText'](_0x233a7a,_0x41e040,0x0,_0x4130a4-_0x41e040,_0x545ec1,'center');const _0x15bc09=Math[_0x3a5f9f(0x4b4)]((_0x545ec1-ImageManager[_0x3a5f9f(0x420)])/0x2),_0x1ade02=_0x4130a4/0x2-ImageManager[_0x3a5f9f(0x629)]-_0x51be42/0x2+_0x41e040/0x2,_0x4fcbb9=ImageManager['loadSystem'](_0x3a5f9f(0xb0f)),_0x2cd64c=ImageManager[_0x3a5f9f(0x629)],_0x379882=ImageManager['iconHeight'],_0x3bc93a=_0x5ec760%0x10*_0x2cd64c,_0xdc2faa=Math[_0x3a5f9f(0x914)](_0x5ec760/0x10)*_0x379882;_0x49e722[_0x3a5f9f(0x834)][_0x3a5f9f(0x5e4)](_0x4fcbb9,_0x3bc93a,_0xdc2faa,_0x2cd64c,_0x379882,_0x1ade02,_0x15bc09),this[_0x3a5f9f(0x4de)]=_0x6c5995[_0x3a5f9f(0x835)]||[0x0,0x0,0x0,0x0],this[_0x3a5f9f(0x4de)]=JsonEx[_0x3a5f9f(0x1c7)](this[_0x3a5f9f(0x4de)]),this[_0x3a5f9f(0x9f9)]=_0x6c5995['flashDuration']||0x0,_0x49e722['dy']=0x0;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x242)]=Sprite_StateIcon[_0x2d1202(0x8ec)][_0x2d1202(0x378)],Sprite_StateIcon[_0x2d1202(0x8ec)][_0x2d1202(0x378)]=function(){const _0x3f34b6=_0x2d1202;VisuMZ[_0x3f34b6(0xa3c)][_0x3f34b6(0x242)][_0x3f34b6(0x86c)](this),this[_0x3f34b6(0xad4)]=this[_0x3f34b6(0x98c)]>0x0?0xff:0x0;},VisuMZ['BattleCore'][_0x2d1202(0x77c)]=Sprite_Weapon[_0x2d1202(0x8ec)]['loadBitmap'],Sprite_Weapon[_0x2d1202(0x8ec)]['loadBitmap']=function(){const _0x11cd32=_0x2d1202;VisuMZ[_0x11cd32(0xa3c)][_0x11cd32(0x77c)][_0x11cd32(0x86c)](this);if(this[_0x11cd32(0x834)]){if(_0x11cd32(0x284)==='yQunt')this[_0x11cd32(0x834)][_0x11cd32(0x3a4)]=VisuMZ[_0x11cd32(0xa3c)]['Settings'][_0x11cd32(0x97d)][_0x11cd32(0x474)];else{this[_0x11cd32(0xbb3)]=_0x534ba3['MOTIONS'][_0x11cd32(0x3b9)];return;}}};function Sprite_HpGauge(){const _0x4f00ae=_0x2d1202;this[_0x4f00ae(0x3dd)](...arguments);}function _0x2828(){const _0x33aa09=['EasingType','skillTypes','ActSeq_BattleLog_Refresh','Destination','ElementStatusCore','clone','createEnemyNameContainer','putActiveBattlerOnTop','VoDLK','attackMotions','PARTY','vWWXZ','_emptyBitmap','zeyje','ActSeq_Motion_PerformAction','_requestRefresh','tZBoK','updateCustomActionSequence','callOkHandler','isAlive','ActSeq_Animation_AttackAnimation2','Targets2','ceil','SZdGy','ActSeq_Zoom_WaitForZoom','gjtlL','drawItemStatusXPStyle','battleOpacity','hitFlat','ARRAYJSON','applyImmortal','param','repositionEnemiesByResolution','attackStatesRate','BattleCmdList','VarianceFormulaJS','clearElementChanges','ActSeq_Mechanics_CtbSpeed','TqQnz','jLrSM','clearMotion','registerDefeatedEnemy','SwitchCritical','sUhnT','CastAnimation','maxItems','exit','ActionSequence','clearResult','isChangingOpacity','MAXMP','_escapeRatio','ActionEffect','criticalDmgRate','4iCeWmb','freezeFrame','WaitCount1','%1Apply%2JS','lineHeight','playCancel','CreateActionSequenceTargets','ShowPortraits','ARRAYFUNC','PnPYP','finalizeScale','drawText','createUIContainer','partyCommandWindowRectBorderStyle','DEjny','IPgnS','VisuMZ_4_CombatLog','Scene_ItemBase_applyItem','neBCr','Window_Options_statusText','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','extraPositionY','xevGA','updateMotionCount','changeCtbChargeTime','filter','_growX','updateTargetPosition','_skewEasing','setImmortal','DEF','GrtCS','ArPenRate','nxfja','ShowHide','_scene','drawTextEx','priority','addShowHpGaugeCommand','NameLegacy','SUdlc','setupBattlebackBattleCore','evaded','oynnY','Sprite_Battler_isMoving','becomeSTBExploited','counterAttack','clamp','1:1','_battlerContainer','AddOption','thiGh','ParseClassNotetags','hasSvBattler','isBorderStylePortraitShown','head','hasBeenDefeatedBefore','setHandler','NameFontSize','border','isCharging','requestMotionRefresh','ConfigManager_applyData','ActSeq_Motion_WaitMotionFrame','_item','itemLineRect','addSkillCommands','createAttachmentSprites','addCombatLogCommand','XFHmK','performCollapse','PostDamage%1JS','_shake','Game_Action_isForFriend','isActor','<CENTER>%1','Window_BattleLog_performCollapse','UBxaV','_targetGrowY','ipiZP','attackAnimationId1','eEBgN','expRate','ActSeq_Mechanics_BtbGain','getWtypeIdWithName','tone','DigitGroupingDamageSprites','dataId','drawLineText','setHelpWindowItem','ActionStart','drawSingleSkillCost','gfFtk','placeGauge','createBattleFieldBattleCore','show','statusWindowRectBorderStyle','isCTB','BackColor','setBackgroundType','PreStartBattleJS','_borderPortraitSprite','updateAttachmentSprites','MitTS','Game_Battler_clearMotion','ShowReflect','XkLCV','urrgt','AutoBattleCancel','_motion','commandOptions','commandNameWindowDrawText','Sprite_Enemy_setHue','UdnNK','moveToStartPosition','HomePosJS','cTKVe','sort','makeTargets','PortraitScaleBorderStyle','States','atbInterrupt','isFloating','STYPES','processForcedAction','StCdt','Window_BattleLog_performMagicEvasion','BattleManager_endAction','BaseTroopIDs','faceWidth','Window_BattleLog_displayTpDamage','createMainSprite','FullActions','isActionSelectionValid','process_VisuMZ_BattleCore_CreateRegExp','duration','UBxEs','tpbActorSwitchConditionsMet','Game_Troop_expTotal','StatusWindowAttachmentFront','isAnyoneSkewing','targetSpritePosition','SvBattlerMass-%1-%2','BattleLayout','battlerShadowScaleY','sDZAT','zQpSL','refreshCursor','Window_ActorCommand_setup','battleStatusWindowAnimationContainer','battleLayoutStyle','Scene_Battle_logWindowRect','ActSeq_Mechanics_PtbFullHalfAction','_tempEquipCheck','ActSeq_Movement_Spin','_indent','kKcLD','XpTJE','autoBattle','makeActions','_skillIDs','jPWSb','alive\x20battlers\x20not\x20user','PreDamageAsTargetJS','stepFlinch','missle','HGfvJ','AS\x20TARGET','2584430ySMGdw','Game_Action_itemHit','_actions','makeDeepCopy','ewPli','DamageFlat','svBattlerShadowVisible','WKvzw','setBattlerBattleCore','CmdStyle','Game_Party_removeActor','zhbDe','changeAtbChargeTime','selectNextActor','string','PrgmV','drawIcon','NUM','Game_Action_clear','length','EqPEQ','_deathStateApplied','Window_BattleLog_performReflection','setEventCallback','zmqIW','spriteId','scale','battleEnd','_backAttachmentSprite','SvBattlerSolo-%1-%2','Sprite_Battler_setHome','isOptionsCommandAdded','Victory','ActSeq_BattleLog_AddText','updatePosition','_cacheTextWidth','_interpreter','BattleManager_startBattle','Sprite_Enemy_updateStateSprite','user','Game_Action_itemEffectAddNormalState','weapons','%1EndActionJS','getHalfActionsPTB','processRefresh','CLWlL','ShowFailure','isImmortal','checkTpbInputClose','PostEndBattleJS','displayMiss','bLkol','_cancelButton','zWlcE','Scene_Battle_selectNextCommand','frameVisible','auto','isSideView','createAllWindows','ActSeq_Impact_ColorBreak','%1EndTurnJS','RcUJK','CmdIconEscape','boxWidth','_skewY','_targetGrowX','hpDamage','setupZoomBlurImpactFilter','Scene_Battle_windowAreaHeight','createActionSequenceProjectile','activate','compareBattlerSprites','softDamageCap','isPartyTpbInputtable','updateEffectContainers','uYnZD','_statusWindow','svBattlerData','VisuMZ_2_BattleSystemFTB','displayRemovedStates','playEnemyAttack','zCTur','isAutoBattleCommandAdded','isTpbCharged','maxCols','setHome','isOkEnabled','MpGaugeOffsetX','_partyCommandWindow','PICbh','Game_Interpreter_updateWaitMode','Sprite_Battler_damageOffsetX','qcHic','createDamageContainer','WaitComplete','getBattlePortraitOffsetX','State-%1-%2','alignBattleCoreDamageSprite','_weaponImageId','isBattleSys','battleSys','subject','fDejQ','VisuMZ_2_HorrorEffects','battler','AqePJ','front\x20base','Targets','current\x20target','OnNOh','xUHQI','isSkipPartyCommandWindow','sYnPY','_endBattle','encounterList','WaitForNewLine','fzvMk','_battleLayoutStyle','createActorCommandWindow','getColor','missed','ChangeOrderBy','description','windowAreaHeight','isCommandEnabled','bkokC','Sprite_StateIcon_updateFrame','abnormal','selectPreviousCommand','BattleManager_cancelActorInput','Name','toString','toUpperCase','canAttack','AS\x20USER','createJS','svBattlerAnchorX','MIejS','updateStatusWindowPosition','iconIndex','TDiDA','wait','drawItemStatus','forceEscapeSprite','revertTpbCachedActor','stepBack','endBattle','charged','alterChange','isSideButtonLayout','_lineHeight','equipSlots','isConfused','updateBattlebackBitmap','applyGlobalCommonEventNotetags','Akoyz','createDamageSprite','thrust','makeBattleCommand','dead\x20enemies','StatusWindowAttachmentBackOffsetY','AutoBattle','Window_SkillList_maxCols','isDeathStateAffected','createKeyJS','createStateIconSprite','damage','ActSeq_Projectile_Picture','allBattleMembers','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','createHpGaugeSprite','allowRandomSpeed','EwdAr','stepForward','Game_BattlerBase_canGuard','WogId','dHjiS','displayItemMessage','constructor','_angleDuration','gqnzY','KrMzs','BattleManager_startTurn','BattleManager_onEscapeFailure','CastPhysical','_createEffectsContainer','wDjGA','isTriggered','BvCon','updateAction','SideviewSelect','_index','yQunt','BattleStartEvent','arPenFlat','_actorWindow','isTpbMainPhase','ActSeq_Mechanics_AnalyzeWeakness','Scene_Battle_onActorOk','FVTTD','WeaponTypeID','_enemyWindow','removeAnimation','currentClass','updateSpin','ActSeq_Target_CurrentIndex','isCertainHit','Sprite_Animation_targetSpritePosition','autoBattleAtStart','needsSelection','Scene_Battle_createAllWindows','VisuMZ_2_BattleSystemPTB','dead\x20friends','ArRedFlat','loadWindowskin','RjfHS','VisuMZ_2_BattleSystemATB','BARE\x20HANDS','onGrowEnd','onSelectAction','MTccD','_enemies','_commonEventQueue','DefaultHardCap','Sprite_Enemy_update','ATK','extraHeight','setHorrorEffectSettings','updateVisibility','Scene_Battle_itemWindowRect','waitForAnimation','svAnchorY','XcbQA','GIUTG','adjustPosition','isFightCommandEnabled','setHue','_canLose','Window_BattleLog_refresh','performAction','updateHelp','preemptive','LastSelected','VisuMZ_2_BattleSystemCTB','setCursorRect','Sprite_Actor_initMembers','deadMembers','CurrentTurn','ActionCount','refresh','waitForMovement','ActionCenteredName','glitch','Formula','Game_Battler_startTpbTurn','applyHardDamageCap','ActSeq_Movement_Opacity','sToYy','collapseType','EfdLY','TpbGaugeOffsetY','7UfVYeP','YPfHA','ActSeq_Projectile_Icon','Window_BattleLog_displayMiss','OrQmY','opOxT','performCastAnimation','PostApplyJS','MpNNC','isJumping','setHelpWindow','TpbActiveChangeEnabled','alive\x20battlers\x20not\x20target','RjoSs','updateScale','Mute','MkfUT','log','oCERr','setSvBattlerSprite','_cursorArea','damageRate','startMotion','isSkillItemWindowsMiddle','ShowCounter','_regionBattleback1','Window_BattleLog_performEvasion','%1Damage%2JS','syISb','GUARD','Sprite_Battleback_adjustPosition','PqhbY','_damageContainer','WaitForSpin','ShowFacesListStyle','ActSeq_Movement_MoveToPoint','_weather','createAutoBattleWindow','isMVAnimation','updateCollapse','startTpbTurn','isBreakStunned','startBattle','MnefS','battleback2Name','_totalValue','canAddSkillCommand','DefaultStyle','optDisplayTp','loadEnemy','measureTextWidth','lUUOG','split','_commonEventIDs','fight','pop','_floatHeight','_battleCoreAddedElements','Window_BattleLog_displayEvasion','addChild','Sprite_Enemy_initVisibility','JLNsp','invokeAction','MP_Rate','startInput','DamageDisplay','getBattlePortraitOffsetY','Scene_Map_initializeAfter','friendsUnit','_lastPluginCommandInterpreter','updateStateSprite','updatePointAnimations','traitObjects','oGgId','performActionEndMembers','XPActorDefaultHeight','ScaleY','autoBattleWindowRect','IILBW','KEnPj','MotionIdle','getDamageStyle','ArPenFlat','join','temnA','updateHpGaugePosition','GuardFormulaJS','isBattleMember','_damages','addEscapeCommand','regenerateAll','options','pages','TVaMq','_animationContainer','BLayE','_battler','applyGlobal','setFullActionsPTB','_currentAngle','kmjnU','setActiveWeaponSlot','displayReflectionPlayBack','walk','YwFat','canUseItemCommand','ActSeq_Motion_ClearFreezeFrame','setupBattleCoreData','SEdRR','stateMotionIndex','flashDuration','uRgtR','autoBattleStyle','ckGBR','CriticalDmgRate','ChantStyle','skillWindowRect','ActionAnimation','_ptbActionCost','PreEndActionJS','GroupDigits','zqsEJ','SxvHB','CriticalHitRate','setupMotionBlurImpactFilter','isSceneBattle','xRuaf','createBattleUIOffsetY','ActiveTpbOptionsMessage','addAutoBattleCommand','die','battlelog','damageOffsetY','code','updateStart','setBattlerFlip','skills','movement','lWsNT','rAAxZ','svBattlerAnchorY','PreApplyAsTargetJS','Sprite_Actor_update','magicReflection','setupDamagePopup','JS\x20%1APPLY\x20%2','ActSeq_Mechanics_EtbAction','isMoving','HelpEscape','Game_Actor_makeActionList','ActSeq_Animation_CastAnimation','ChargeRate','changeAtbCastTime','drawItem','motionType','PostStartTurnJS','_motionCount','CmdIconAutoBattle','yGmsI','useDigitGrouping','isTurnBased','HpGaugeOffsetY','SvMotionIdleMass-%1-%2','ShowActorGauge','lqQeE','isSceneChanging','item','retreat','performCounter','applySoftDamageCap','PopupShiftX','ZyFKN','battleSkew','default','zMCIT','updateFrame','_callSceneOptions','StartTurnShow','PgKAW','makeDamageValue','Sprite_Enemy_updateCollapse','isSkill','all\x20targets','Skills','onRegeneratePlayStateAnimation','darFU','ARRAYNUM','uGgbM','_createClientArea','987252LyhVic','gzopx','battleMove','ActSeq_Horror_TVRemove','qvDPt','targetDistortionSpritePosition','tpbCommandFight','nAfQA','mUaSa','_stateIconSprite','QjdDm','makeSuccess','reverse','statusText','waitForEffect','criticalDmgFlat','_actionInputIndex','dtMNR','messageSpeed','setText','HelpItem','CriticalHitFlat','adjustPosition_1for1','damageContainer','onDatabaseLoaded','ActionItemMsg','OfBPA','LWEnO','tIEkz','skewBattler','smooth','requestRefresh','NameOffsetX','ActSeq_Mechanics_BoostPointsStoreData','noSimilarSTypes','zBdiu','obhvT','isAutoBattleCommandEnabled','resizeWindowBorderStyle','setupIconTextPopup','toUseBoostPoints','ActSeq_BattleLog_WaitForNewLine','Window_BattleLog_performSubstitute','getItemDamageAmountLabelBattleCore','battleMembers','setBattlePortrait','Scene_Battle_partyCommandWindowRect','Game_Enemy_setup','_pattern','getHardDamageCap','CombatLogIcon','dead','clearFreezeMotion','makeSpeed','ActSeq_Mechanics_EnemyEscape','Wave','VisuMZ_1_MainMenuCore','lukEffectRate','_opacityDuration','forceWeaponAnimation','autoMeleeSingleTargetActionSet','setActiveWeaponSet','actorId','YNLVl','JumpToLabel','battlerSprites','_floatEasing','rEFOM','ActSeq_Mechanics_AddBuffDebuff','cameraClamp','NMUfJ','_animationSprites','_flipScaleX','AttachStateOffsetY','updateBattlerContainer','DefaultDamageStyle','_spriteset','PreStartTurnJS','MBLLT','escape','turnCount','_armorPenetration','autoBattleStart','Sprite_SvEnemy','apply','changeTurnOrderByCTB','_skewDuration','initialize','dLcmB','angle','aDvJP','forceMotion','_forcedBattlers','createEnemies','visibilityState','AMivS','isAnyoneMoving','createActorCommandWindowBattleCore','damageOffsetX','HJGPF','battleback1Name','some','currentExt','Sprite_Actor_setActorHome','_freezeMotionData','visible','start','BzLCy','process_VisuMZ_BattleCore_PluginParams','dead\x20actors','tlPEp','kLncf','LjGEm','Window_BattleLog_popupDamage','iSurm','ActSeq_Element_AddElements','ActSeq_BattleLog_PushBaseLine','drawItemImage','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','Scene_Battle_startPartyCommandSelection','tyrNq','setActorHome','_methods','xXcby','process_VisuMZ_BattleCore_DamageStyles','_subject','Game_Battler_makeSpeed','rowSpacing','skewDuration','onEncounterBattleCore','POQfZ','Game_Troop_setup','JUeQI','DJWJo','Game_System_initialize','command301','Buffs','animationNextDelay','HitRate','HOgiV','EmergeText','Parse_Notetags_Action','createContents','getAttackMotion','okButtonText','_executedValue','requestFauxAnimation','compareEnemySprite','victory','cancel','mainFontSize','CounterPlayback','_svBattlerData','KgLMT','iconHeight','CoreEngine','eVkHd','Actor-%1-%2','battleCamera','rcNJw','removeChild','ParseSkillNotetags','type','weaponImageId','LpZPZ','center','EEVCM','AsUser','_mainSprite','hardDamageCap','onBattleStartBattleCore','Fsisy','kbkaz','ConvertParams','startMove','initMembers','skillItemWindowRectBorderStyle','float','battleCameraData','actor%1-portrait','_targetIndex','trim','resetResultSwitches','Scene_Battle_onEnemyCancel','ZIgUt','gaugeLineHeight','ForceExploited','KXSAv','MeleeDistance','updateBattlebackBitmap2','updateOpacity','MOAnx','textSizeEx','isEscapeCommandEnabled','createHelpWindowBattleCore','HitFlat','VisuMZ_2_DragonbonesUnion','PreApplyAsUserJS','updateActors','_shadowScaleY','validTargets','SceneManager_isSceneChanging','mhp','DUmOn','OiGPh','Game_Action_needsSelection','_windowLayer','DigitGrouping','onJumpEnd','MDF','targetActionSet','lejKk','lztpX','yliSN','Window_BattleLog_popBaseLine','PreRegenerateJS','debuffAdd','filterArea','SkillItemStandardCols','moveBattlerDistance','alive\x20actors\x20not\x20target','BattleEndEvent','battleProjectiles','pointX','Vbkfl','waitForNewLine','isBTB','singleSkill','clearDamagePopup','_targetSkewX','aCNpx','_handlers','BattleManager_updatePhase','ActSeq_Mechanics_StbExtraAction','_battleCoreBattleStartEvent','rdvuR','message4','ZyVFM','SmoothImage','substitute','name','_duration','ShowCritical','ActSeq_Target_NextTarget','applyItem','ParseActorNotetags','FMEqF','Setting','getAttackMotionSlot','waitForFloat','RegExp','battleCommandIcon','AsTarget','ActSeq_Mechanics_RemoveBuffDebuff','pXldz','isSkewing','_active','QXpwG','oBgNW','spinBattler','CalcEscapeRatioJS','setupRgbSplitImpactFilter','changePaintOpacity','ResetOffset','ActSeq_BattleLog_UI','stbGainInstant','setupMotion','Game_Action_makeTargets','removeBuffsAuto','frameCount','performAttackSlot','QISms','ParseWeaponNotetags','PerformAction','isAnyProjectilePresent','shadow','Window_BattleLog_performActionEnd','ActSeq_Camera_FocusPoint','IMAxr','isBattleRefreshRequested','_skewX','getInputButtonString','_angleWholeDuration','processBattleCoreJS','NhpDX','clearActiveWeaponSet','isPTB','checkTpbInputOpen','vZxhF','ActSeq_Mechanics_OtbOrder','YQWWu','startEnemySelection','commandNameWindowCenter','_preBattleCommonEvent','-%1','ChqaQ','startActorSelection','_createCursorArea','isFrameVisible','BlmrC','spell','ActSeq_Impact_ShockwaveCenterTargets','round','SBeUo','alterPriority','Game_Action_isForOpponent','isBattlerGrounded','Scene_Battle_onActorCancel','updateAttachedSprites','VariableDmg','pushBaseLine','WaitForEffect','createBorderStylePortraitSprite','MessageWait','battleCoreResumeLaunchBattle','Window_ItemList_maxCols','PostStartBattleJS','repositionCancelButtonBorderStyle','notFocusValid','_battleCoreForcedElements','_jumpMaxHeight','updateMain','HelpAutoBattle','ActSeq_ChangeAngle','process_VisuMZ_BattleCore_TraitObject_Notetags','jump','createEnemyNames','BattleManager_endBattle','transform','ActSeq_Impact_ShockwaveEachTargets','createCommandVisibleJS','Spriteset_Battle_createLowerLayer','command119','ARRAYSTR','abs','SKILLS','Style','setValue','isStateResist','gainHalfActionsPTB','Scale','MotionFrameWait','startTurn','jUggT','_flashColor','ReflectPlayback','CriticalHitRateJS','addWeaponSwapCommand','applyData','ednIw','NgpHY','onFloatEnd','setVisibleUI','SwitchMissEvade','ScaleX','ActSeq_Movement_WaitForMovement','isPlaytest','_tpbState','TMedR','addText','VisuMZ_2_BattleSystemETB','isPhysical','WaitForScale','olQYL','rYZLl','ShowRemovedState','jtRit','moveToStartPositionBattleCore','updatePhase','Game_BattlerBase_isStateResist','getBattlePortraitFilename','ActSeq_Motion_RefreshMotion','VisuMZ_1_SkillsStatesCore','OffsetAdjust','onBattleStart','callOptions','ActSeq_Movement_WaitForScale','BattleManager_onEncounter','Sprite_Battler_updatePosition','getDualWieldTimes','Override','updateShadow','battleDisplayText','HP_Flat','motionIdle','GWgbg','updateCommandNameWindow','hasSkill','DuNOw','createAttachedSprites','adjustFlippedBattlefield','battleFloat','_shadowScaleX','AgKIh','isActiveTpb','refreshRequest','Parse_Notetags_TraitObjects','WaitForSkew','WaitForAngle','EYArQ','faceRect','updateBorderStyle','lPSLm','isChanting','QlKOg','startAttackWeaponAnimation','Mechanics','ylvEa','bitmapWidth','createActors','registerCommand','_cursorSprite','ShowAddedDebuff','alive\x20actors\x20not\x20user','_borderPortraitTargetX','isDuringNonLoopingMotion','ext','adjustWeaponSpriteOffset','JS\x20BATTLE\x20DEFEAT','Scene_Map_updateCallMenu','removeDamageSprite','checkAutoCustomActionSequenceNotetagEffect','VBfpg','isBattleFlipped','min','qxQvX','Window_BattleStatus_drawItemImage','_targetSkewY','_effectDuration','AlphaFilter','WaitForJump','kKvYF','TVtOS','AeHWq','startOpacity','ActionEnd','setBattler','updateShadowBattleCore','addChildToBack','ActSeq_Movement_WaitForJump','PYRxO','attackSkillId','Enemy','drawSkillCost','ParseItemNotetags','VariableID','Game_Action_evalDamageFormula','_currentActor','loadPicture','isETB','left','sideview_ui','getItemDamageAmountTextOriginal','BattleManager_processDefeat','TpGaugeOffsetY','DamageStyles','process_VisuMZ_BattleCore_jsFunctions','setBattleCameraPoint','JkUbj','ActSeq_Element_NullElements','aAvEA','parent','WtypeId','iterateBattler','performActionMotions','addSkillTypeCommand','CastCertain','maxLines','UFBBV','LUK','addBuff','COMBATLOG','custom','PostApplyAsTargetJS','makeTargetSelectionMoreVisible','process_VisuMZ_BattleCore_PreBattleCommonEvent','Scene_Map_launchBattle','BQvkg','WaitForMovement','TLIlO','Strength','performSTBExploiter','onAngleEnd','changeBattlerOpacity','Game_Interpreter_command301','isAnyoneJumping','_createDamageContainer','AGI','nextActiveWeaponSlot','AttackAnimation','createDistortionSprite','AllowCollapse','clearFreezeMotionForWeapons','drawItemBackground','clearActiveWeaponSlot','clearBattlerMotionTrailData','animationShouldMirror','\x5cI[%1]%2','ytzew','Game_Action_itemEffectAddAttackState','YSbJU','ActSeq_Mechanics_Collapse','value','WaitForOpacity','dragonbonesData','prev\x20target','Window_BattleEnemy_show','ShuffleArray','finishActionSet','commandStyleCheck','trueRandomTarget','AutoBattleRect','replace','helpAreaBottom','ActSeq_Movement_WaitForFloat','refreshMotion','removedBuffs','Game_BattlerBase_die','_padding','WXGlg','currentValue','performMagicEvasion','autoSelectLastSelected','StatusWindowAttachmentBackOffsetX','getBattlePortrait','WaitForAnimation','JYcMH','BattleManager_startAction','MIN_SAFE_INTEGER','evalDamageFormula','unchanged','EJRVD','Scene_Options_maxCommands','CriticalDuration','HqYth','BOuaO','_autoBattleWindow','HMFiH','XPSpriteYLocation','ActSeq_Angle_WaitForAngle','ruKlM','_distortionSprite','Scene_Battle_createPartyCommandWindow','roMNJ','StyleOFF','qUQaI','CTSza','hitRate','isCustomBattleScope','ConvertActionSequenceTarget','inputtingAction','SkipPartyCmd','AutoBattleMsg','actionEffect','MpGaugeOffsetY','MOTIONS','PRE-','xwshJ','ShowEnemyGauge','#ffffff','KLcdc','AGoFy','senPX','isMeleeMultiTargetAction','zFpWu','ActSeq_Mechanics_HpMpTp','Window_BattleLog_performActionStart','updateRefresh','Rate','placeActorName','evade','gPtoG','updateGrow','opgXS','canEscape','JS\x20%1START\x20ACTION','commandName','usePremadeActionSequence','push','drawGauge','Window_BattleLog_displayMpDamage','dXrjg','battleZoom','children','ShowPopup','canBattlerMove','_logWindow','PostDamageAsUserJS','updateForceAction','_text','bitmapHeight','OepvV','innerWidth','actions','Opacity','CommandWidth','NameOffsetY','dQbsa','_tpbNeedsPartyCommand','random','ActSeq_Target_RandTarget','Mirror','anchor','CriticalHitMultiplier','makeTargetsBattleCore','ouCJE','blt','drawItemImageXPStyle','WHBst','isAlwaysVisible','PostEndTurnJS','ctyGl','createCommandNameWindow','DisplayAction','DistanceAdjust','Slot','isFlipped','displayMpDamage','Sprite_Enemy_setBattler','isLearnedSkill','magicSkills','IconStypeMagic','tPpou','PrioritySortActors','dxbuA','yZAzU','Window_BattleEnemy_initialize','prepareBorderActor','HQOFz','CDkSC','textColor','updateShadowScale','note','jFFKl','ActSeq_Motion_MotionType','charging','CheckMapBattleEventValid','StateIconOffsetY','JLgWc','mpHealingFmt','resetFontSettings','actorCommandAutoBattle','displaySubstitute','YMiJB','makeData','wugSj','isPreviousSceneBattleTransitionable','createMiss','vTnwo','itemEffectAddAttackState','Window_BattleLog_performAction','FwQIy','attackAnimationIdSlot','cAXLZ','yIgOK','commandSymbol','pbsBG','commandFight','SPThS','gvEoE','QcAqD','isAppeared','performRecovery','_additionalSprites','bdtqv','dimColor2','FlinchDistanceY','POST-','isForFriendBattleCore','isBusy','_dimmerSprite','ncyCo','isCancelled','enemyNames','createString','iconWidth','DefaultSoftScaler','CmdIconItem','statusTextAutoBattleStyle','_targetOpacity','Game_BattlerBase_canAttack','splice','AutoMeleeSolo','ActSeq_Horror_NoiseCreate','rHxgi','removeAnimationFromContainer','initBattleCore','cameraDuration','isAnyoneFloating','okulT','_battlerHue','performMiss','mainSprite','cancelButtonText','addPartyCommand','WEFGI','_isBattlerFlipped','_phase','setLastPluginCommandInterpreter','JS\x20%1END\x20BATTLE','Window_BattleLog_displayCurrentState','jHIrX','updateStyleOpacity','statusWindowRectXPStyle','_helpWindow','parse','setBattleSkew','_growWholeDuration','drawEnemyName','HelpSkillType','map','return\x200','JzAFo','battleSpin','updateSkew','wtypeId','wuSAi','refreshBattlerMotions','_offsetY','qMvlo','createTroopNote','startSpin','WBBlW','jcDKh','addLoadListener','processAnimationRequests','Game_Battler_onBattleStart','GXjHp','_targetFloatHeight','ActSeq_Mechanics_StbRemoveExcessActions','nameY','isMeleeSingleTargetAction','ActSeq_Movement_HomeReset','fFPkS','ElBEr','hFbGA','Game_BattlerBase_refresh','CriticalColor','mainSpriteHeight','NMgxm','MescE','IconStypeNorm','Game_Party_addActor','_preemptive','open','displayCritical','uakbO','vWzCi','canGuardBattleCore','Scene_Battle_start','displayChangedBuffs','_tpbSceneChangeCacheActor','_enemyId','wkTHc','HpGauge','HFSgM','bmhNt','ConfigManager_makeData','pcJWs','Direction','Game_BattlerBase_eraseState','mItpY','piQIg','displayFailure','portrait','PGcSO','setSkill','ShowHpDmg','DTB','commandAutoBattle','zeuSC','FksXr','ActSeq_Projectile_Animation','blockWidth','partyCommandWindowRect','AdjustRect','regionId','_hpGaugeSprite','loadSystem','JS\x20%1END\x20TURN','startJump','jYbRd','AUTO\x20BATTLE','ActSeq_DB_DragonbonesTimeScale','_battlerName','TrHQd','showAnimation','Game_Interpreter_PluginCommand','PRatO','_updateFilterArea','OuKct','text','update','addImmortal','changeBattlebacks','Settings','FqjUU','process_VisuMZ_BattleCore_Failsafes','updateWeather','displayEvasion','AllowRandomSpeed','_colorType','growBattler','rZtqb','Defeat','JS\x20%1START\x20TURN','makeActionListAutoAttack','isQueueOptionsMenu','Targets1','popBaseLine','createWeather','dnzfF','weatherType','isTeamBased','MaxLines','_enemySprites','isForOpponentBattleCore','_actorCommandWindow','Game_BattlerBase_initMembers','isHidden','command236','IQWfd','performReflection','alive\x20opponents\x20not\x20target','LGWSg','PopupDuration','ActSeq_Weapon_ClearActiveWeapon','Intensity','DZdDp','SyEfH','xaybU','battleJump','EscapeSuccessJS','ArRedRate','Window_BattleLog_displayCritical','_floatWholeDuration','revealNewWeaknesses','StateIconOffsetX','ShowMissEvasion','StatusWindowSkinFilename','KlbxD','EscapeFailureJS','itemRect','processRandomizedData','Game_Action_apply','bYVTd','casting','commandEscape','onMoveEnd','svAnchorX','Window_BattleLog_pushBaseLine','drawItemImagePortraitStyle','actorCommandSingleSkill','AfUik','buffAdd','addAutoBattleCommands','VMOxA','HVlxz','ActSeq_Mechanics_VariablePopup','ForceDeath','_stypeIDs','JiHmz','getNextSubject','_jumpHeight','ActSeq_Horror_TVCreate','ShowAddedState','isGuardWaiting','alive\x20opponents','XPActorCommandLines','alterBreakShield','setSTBExploited','launchBattle','BekhZ','getMenuImage','7774614FUFvEm','yEUBT','isBattleCoreTargetScope','BattleDefeatJS','_growDuration','pattern','Game_Battler_performDamage','Game_Battler_clearDamagePopup','addedBuffs','delay','StatusWindowAttachmentFrontOffsetX','onAllActionsEnd','anchorX','Game_Interpreter_terminate','ActSeq_Mechanics_StbExploit','VisuMZ_2_BattleSystemSTB','MAT','canGuard','evalDamageFormulaBattleCore','fontSize','BattleManager_startInput','BjFkG','displayCurrentState','autoSelect','RCNeE','umpSo','_defeatedEnemies','ActSeq_Movement_WaitForSkew','Sprite_Battler_initMembers','CLLzt','text\x20target','WaitCount2','skew','isFriendly','top','isSTB','updateBitmap','UNTITLED','VisuMZ_1_ElementStatusCore','max','angleDuration','FollowTurn','Angle','Index','Boirv','ActSeq_Animation_ActionAnimation','drawBackgroundRect','formula','vJBAG','motionSpeed','WaitForZoom','QeCEk','drawActorFace','createChildSprite','placeTimeGauge','updateBattlebackBitmap1','SkillsStatesCore','LapzR','createAnimationContainer','width','weaponTypes','#%1','createSeparateDamagePopups','mXGBX','effect','mainSpriteScaleX','PartyCmd','EqqDJ','Game_Action_applyGlobal','_offsetX','maxBattleMembers','critical','ActSeq_Movement_Float','_visualHpGauge_JustDied','contents','Scene_Battle_updateBattleProcess','destroyDamageSprite','_immortal','ActSeq_Mechanics_CustomDmgFormula','BmhJa','rqldL','ActSeq_Movement_MoveBy','SoXqA','switchToWeaponType','fittingHeight','inHomePosition','_svBattlerSprite','Game_Temp_requestAnimation','adjustPosition_ScaleDown','onEnemyOk','cancelTargetSelectionVisibility','applyCritical','JS\x20%1START\x20BATTLE','addDamageSprite','swing','createInnerPortrait','SGHOo','_inputting','removeHorrorEffect','battleAngle','changeInputWindow','zBJYx','BattleManager_isTpbMainPhase','RllmX','addOptionsCommand','sZmvN','_baseY','autoBattleUseSkills','_uiContainer','VisuMZ_3_ActSeqImpact','onEnemyCancel','PreEndBattleJS','sKnsS','iQYAz','loadSvActor','itemTextAlign','setupShockwaveImpactFilter','_skewWholeDuration','animationWait','KazLO','isTpb','COnlX','setWaitMode','qdLvs','members','gLfNO','Sprite_Enemy_updateBossCollapse','ActSeq_BattleLog_DisplayAction','CalcEscapeRaiseJS','requestDragonbonesAnimation','YSkqv','xSfzU','isForFriend','isAnyoneChangingOpacity','hide','StartTurnMsg','currentSymbol','isNextSceneBattleTransitionable','ActSeq_Zoom_Scale','FaceDirection','Sprite_Weapon_loadBitmap','BCOXn','oUPjL','Tawdk','clearBattleCoreData','ActSeq_Movement_Skew','placeStateIcon','indexOf','TPB','vsMkG','arRedRate','NextTurn','StatusWindowSkinHide','status','_dragonbonesSpriteContainer','ActSeq_Movement_FaceDirection','SAmug','isInputting','performMoveToPoint','effects','setHalfActionsPTB','addSingleSkillCommands','viStL','ZmxtU','glCKj','xIoOI','innerHeight','ActSeq_Impact_MotionBlurTarget','VariableHeal','GeFfB','forceAction','battlerSmoothImage','autoSelectPriority','removeStatesAuto','adjustPosition_ScaleUp','dyEaf','McsyH','performAttack','clearWeaponAnimation','Scene_Battle_skillWindowRect','updateFloat','uzAAV','isDead','Game_Map_battleback1Name','VisuMZ_2_BattleSystemOTB','ActSeq_Skew_Reset','QEltk','BattleLogRectJS','epNVe','FwUJZ','HRHMk','stop','updateShadowVisibility','updateStateSpriteBattleCore','_growEasing','AnchorX','kOtcR','Window_BattleLog_clear','isAttack','addItemCommand','_enemy','JSON','battleUIOffsetY','clearRect','miEUw','setupFont','parseForcedGameTroopSettingsBattleCore','createEmptyBitmap','opacityStart','battleEffect','alive\x20enemies\x20not\x20user','Item-%1-%2','recoverAll','Game_Battler_forceAction','includes','PopupShiftY','EJuDr','VkwpK','alive\x20enemies\x20not\x20target','process_VisuMZ_BattleCore_BaseTroops','_tempBattler','_updateCursorFilterArea','itemEffectAddNormalState','showEnemyAttackAnimation','addFightCommand','floatBattler','sliceMax','tGlCQ','_borderPortraitDuration','WjeSB','turn','VisuMZ_3_BoostAction','onEncounter','message2','alterActionCostPTB','sortDamageSprites','Game_Battler_performMiss','selectNextCommand','YixEb','ActSeq_Mechanics_Multipliers','Game_Map_setupBattleback','updateAngleCalculations','lrYYt','canMove','_linkedSprite','createPartyCommandWindow','WHulb','alterCost','targetObjects','list','PreApply%1JS','SyKkY','wKUee','battleUIOffsetX','PrioritySortActive','WaZrO','ForceRandom','checkShowHideSkillNotetags','version','JxSSZ','ZUmTP','Shadow','PreDamageAsUserJS','CommandVisible','ActSeq_Horror_NoiseRemove','JnCKE','startPartyCommandSelection','missile','icon','JS\x20ESCAPE\x20SUCCESS','itemHit','makeActionList','wOHFq','initBattlePortrait','NzUAG','deathStateId','Width','zQcJI','ActSeq_Set_FinishAction','cDlZe','JNzDJ','_animation','RWTHx','frontviewSpriteY','_activeWeaponSlot','DualWield','HpGaugeOffsetX','setupChild','_enemyIDs','setupHpGaugeSprite','ActSeq_Angle_Reset','TjpkS','addCommand','updateFlip','WEAPON\x20SWAP','_multipliers','zGsnH','CmdTextAlign','executeDamage','updatePadding','addActor','mainSpriteWidth','wholeActionSet','Scene_Battle_commandFight','performJump','uiMenuStyle','Sprite_Battler_setBattler','_target','endAction','Sprite_Battler_damageOffsetY','SkillItemBorderCols','isTickBased','PostEndActionJS','physical','YjbTi','getCommonEventIdWithName','CriticalDmgFlat','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','Battleback','battlerShadowScaleX','isMagicSkill','_angleRevertOnFinish','actor','tpnuo','bitmap','flashColor','animationId','bgType','isATB','_regionBattleback2','isDamagePopupRequested','makeAutoBattleActions','stateRate','ActSeq_Mechanics_RemoveState','fillRect','_list','setupActionSet','EIcCd','preparePartyRefresh','BattleManager_onEscapeSuccess','partyCommandWindowRectXPStyle','isBattlerFlipped','VyOMR','randomInt','addSingleSkillCommand','setupCriticalEffect','NPagE','rqhZZ','onEscapeSuccess','drawItemStyleIcon','allowCollapse','ActSeq_Mechanics_Immortal','setupBattleback','Game_Battler_performEvasion','isDTB','message1','resetBreakShield','actorCommandEscape','EmfUU','addCustomCommands','getItemDamageAmountLabelOriginal','KxBou','guardSkillId','SARzs','KLwkf','FoQDL','enemyId','Spriteset_Battle_createBattleField','Qalzk','rxSUZ','ActSeq_Mechanics_BoostPointsChange','onEscapeFailure','_weaponSprite','terminate','TP_Flat','svBattlerName','_flinched','anchorY','PreEndTurnJS','ARRAYSTRUCT','call','applyBattleCoreJS','Duration','setupTextPopup','getNextSubjectFromPool','centerFrontViewSprite','requestAnimation','battleAnimation','_speed','filters','Mpbnt','_lastRegenFrameCount','qKUbf','ActorCmd','BbOJt','JRVWM','Sprite_Enemy_createStateIconSprite','TpbGaugeOffsetX','initElementStatusCore','setBattleZoom','getEnemyIdWithName','_battlePortrait','setup','RSmNu','isBuffAffected','ActSeq_BattleLog_PopBaseLine','waitCount','ParseEnemyNotetags','NBafJ','pDlwq','softDamageCapRate','battleCommandName','startGrow','_enemyNameContainer','_forcedBattleLayout','ActionSkillMsg1','turnOrderChangeOTB','_stateSprite','canAlterActionCostPTB','VisuMZ_3_ActSeqCamera','getDefeatedEnemies','padding','qNtte','crGDb','isIncludedInEnemyWindow','displayReflection','cameraOffsetDuration','Nuefj','MwhmE','rAELz','AutoBattleOK','startFloat','attack','PfyNQ','jiSVb','PostApply%1JS','_opacityWholeDuration','sxdlt','_homeY','NewPopupBottom','SkewX','etukV','rBlzK','applyAngleChange','ShowMpDmg','yikuy','chantStyle','dhzNT','_wtypeIDs','imHFS','aHfpM','isSpriteVisible','ForceExploiter','criticalHitFlat','ActSeq_Animation_WaitForAnimation','_floatDuration','Scene_Battle_startActorCommandSelection','TargetLocation','reduce','setBattleAngle','Game_Battler_onTurnEnd','OcWcn','ITEM','startAction','ActSeq_Skew_WaitForSkew','FrontViewSelect','isAnimationShownOnBattlePortrait','Pre','calcWindowHeight','okTargetSelectionVisibility','IXscq','Window_BattleLog_performDamage','Window_BattleLog_performCounter','CmdIconFight','coreEngineRepositionEnemies','stypeId','BattleVictoryJS','commandStyle','ActSeq_Mechanics_BreakShieldChange','isWaiting','endAnimation','VUIWY','concat','JS\x20ESCAPE\x20FAILURE','_tempActor','PdmHO','isAtbCastingState','EscapeSuccess','StatusWindowAttachmentBack','AknDG','updateCallMenu','isMagical','isSpinning','currentAction','processBorderActor','ParseArmorNotetags','Height','165979gPSyWO','isFastForward','applyArmorModifiers','toLowerCase','ActSeq_Camera_WaitForCamera','HelpFight','ShowWeapon','_customDamageFormula','actionSplicePoint','NameAlwaysSelectOnly','BattleManager_inputtingAction','prototype','aerIj','index','performTpbActiveCheckSwitch','battleCoreTpbMainPhase','Window_ActorCommand_initialize','NyENy','collapse','createBattleField','cQxTH','JS\x20%1REGENERATE','updateBattleProcess','PreStartActionJS','_effectsContainer','isOpen','isPreviousScene','BattleManager_processVictory','origin','alive\x20friends','uiInputPosition','mpfbY','inputting','Post','_opacityEasing','isShownOnBattlePortrait','gcLKT','createStateSprite','addGeneralOptions','UHiIj','iqZHO','CsxJX','finishActorInput','applyForcedGameTroopSettingsBattleCore','initMembersBattleCore','WIXcN','setupBattleCore','kaWSk','ActSeq_Horror_Clear','isBypassDamageCap','_targets','floor','extraPositionX','Damage','ivYIb','freezeMotion','_frontAttachmentSprite','popupDamage','pointY','battleSpriteSkew','bottom','linkSprite','_appeared','ActSeq_Element_ForceElements','AutoMeleeAoE','isVisualHpGaugeDisplayed','isUndecided','Scene_Battle_stop','_attackAnimationId','value1','_baseLineStack','Turns','ShowCurrentState','Sprite_Battler_updateMain','JS\x20%1DAMAGE\x20%2','visualHpGauge','sleep','windowPadding','NEheB','stkjE','logWindowRect','clear','unACd','_allTargets','skill','LBLUY','bind','ezUVH','performEvasion','isRightInputMode','PHGLK','Sprite_Actor_setBattler','aCNuS','mTNtA','NjXVt','height','EDlEM','itkKm','displayBuffs','compatibilityVisible','displayCounter','_actorSprites','sYRfe','applyDamageCaps','displayAction','_angleEasing','_updateCursorArea','prepareCustomActionSequence','displayAddedStates','isHiddenSkill','lLKKL','isNonSubmenuCancel','commandNameWindowDrawBackground','Game_Action_executeDamage','_targetAngle','hDZLw','Exploiter','_growY','+%1','dying','backColor','BEnVE','iJlLR','unshift','clearForcedGameTroopSettingsBattleCore','Spriteset_Battle_updateActors','showNormalAnimation','isClicked','isActing','selectNextCommandTpb','TcAWz','actorCommandCancelTPB','updateBorderSprite','drawItemStatusListStyle','Scene_Battle_createActorCommandWindow','setAttack','setBattlerMotionTrailData','showHelpWindow','pFtxp','_jumpDuration','ActSeq_Element_Clear','sliceMin','iUJlU','TextColor','ScaleUp','DXyKU','aliveMembers','isAnimationPlaying','processDefeat','SBhit','StepDistanceY','ActSeq_Horror_GlitchCreate','ActSeq_Animation_ShowAnimation','PQSLf','displayHpDamage','Spriteset_Battle_update','Actor','applyFreezeMotionFrames','JS\x20BATTLE\x20VICTORY','VisuMZ_3_WeaknessDisplay','817156XZWTek','updateStateIconSprite','pow','gainFullActionsPTB','wFPKu','snapForBackground','loadBitmap','iVTBj','focus','PreDamageJS','Window_BattleLog_update','_iconIndex','CommandAddAutoBattle','statusWindowRect','_actor','moOnC','process_VisuMZ_BattleCore_Notetags','guard','createShadowSprite','Scene_Battle_startEnemySelection','format','Game_Action_isForRandom','command3011','iIeWG','APtWq','_baseX','ActSeq_Mechanics_PtbAlterCost','sortEnemies','Interrupt','SkillItemMiddleLayout','Sprite_Actor_updateFrame','FaceAway','pOtBY','PostDamageJS','useItem','autoMeleeMultiTargetActionSet','performDamage','CastMagical','_checkOn','chant','byjrG','createDigits','Sprite_Actor_updateBitmap','BTArB','Sprite_Battler_startMove','FlinchDuration','BattleManager_initMembers','svShadow','attachSpritesToDistortionSprite','setCustomDamageFormula','KOVZo','ShowRemovedBuff','forceSelect','remove','move','onTurnEnd','result','isNextScene','PopupOffsetY','drain','ParseAllNotetags','moveBattlerToPoint','updateCancel','Parse_Notetags_Targets','sUFSZ','performSubstitute','gradientFillRect','alive\x20friends\x20not\x20target','_motionType','getNextDamagePopup','setBattlerFacePoint','shift','startSkew','isOptionsCommandEnabled','processActorCommandCancelTPB','OffsetX','opponentsUnit','Text','createPartyCommandWindowBattleCore','Linear','applyTargetFilters','JvCjY','ActSeq_Mechanics_FtbAction','vrkJl','VttPF','_animationCount','SoVGb','right','EYkAY','basicGaugesY','ActSeq_BattleLog_Clear','mZeMB','EnableSoftCap','fPKQn','processVictory','DQrXr','MANUAL','isForRandom','scope','startActorCommandSelection','SkewY','base','noise','tXtQe','slice','EuHfR','onActorOk','boxHeight','Window_BattleLog_performRecovery','animation','VisuMZ_0_CoreEngine','UIpvj','Amp','eTrzA','PopupPosition','regenerateAllBattleCore','setActionState','createBattleUIOffsetX','displayActionResults','HalfActions','_flashDuration','createAnimationSprite','setMoveEasingType','ApplyImmortal','performMoveToTargets','_jumpWholeDuration','ShowPortraitsBorderStyle','AAaLD','_battleField','Game_Enemy_transform','loop','VisuMZ_2_WeaponSwapSystem','qKuVw','IdJKa','getSkillIdWithName','lineRect','ActSeq_Target_PrevTarget','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','createHelpWindow','_commandNameWindow','alive\x20actors','checkCacheKey','updateInterpreter','Game_Interpreter_command283','yMnek','speed','UKZSc','addChildAt','create','_enemyID','Scene_Map_initialize','actorCommandWindowRect','SDubU','isAnyoneGrowing','setFrame','isDying','OffsetY','performWeaponAnimation','AnimationID','getLastPluginCommandInterpreter','WaitForCamera','processPostBattleCommonEvents','AnchorY','canInput','ActSeq_Movement_FaceTarget','ActionSkillMsg2','WPKIA','swapEnemyIDs','isAffectedByBreakShield','WaitForProjectile','_waitMode','addTextToCombatLog','Window_BattleLog_performMiss','updateEventMain','TpGaugeOffsetX','Scene_Battle_updateStatusWindowPosition','addedDebuffs','HoAKr','BoostPoints','Scene_Battle_helpWindowRect','_shadowSprite','setBattleCameraOffset','WoDmO','Game_Actor_equips','iconText','ConvertCount','Window_BattleLog_displayFailure','BattleCore','battleGrow','parameters','ActSeq_Movement_WaitForOpacity','hpAffected','showPortraits','performActionStart','ActSeq_Mechanics_PtbConvert','isSelected','ActSeq_Weapon_SetActiveWeapon','KrpUW','JGwYa','undecided','isAlwaysHidden','itemWindowRect','_lastEnemy','applyEasing','Scene_Battle_createHelpWindow','PreDamage%1JS','hTfWX','addBattleCoreAutoBattleStyleCommand','drawItemImageListStyle','FlashColor','removeImmortal','gainCurrentActionsETB','VisuMZ_3_SideviewBattleUI','gainMp','rMcEz','cancelActorInput','ActSeq_Impact_ZoomBlurTargetCenter','redraw','nssxM','gfhKr','_branch','displayTpDamage','itemHeight','updatePositionBattleCore','ParseStateNotetags','xQoVl','cHSzj','20KcmBZZ','loadBattleback1','iLrty','_battleCoreNoElement','NKTRO','timeScale','maxCommands','ywNFX','BTestBypass','oODwh','isGuard','_surprise','SELhT','AddHpGaugeOption','4052176ZztLwv','requestMotion','_action','performFlinch','makeCommandList','SvWeaponSolo-%1-%2','loadBattleback2','ESCAPE','PostRegenerateJS','helpAreaHeight','active','hODQo','BravePoints','sqRWY','AyzIa','WaitCount','_lines','battleCorePreBattleCommonEvent','_autoBattle','mmp','contentsOpacity','WkFqG','isForOne','ActSeq_Movement_Jump','VJtPP','updateShadowPosition','QintN','addAnimationSpriteToContainer','buffRemove','FocusY','refreshActorPortrait','ActSeq_Mechanics_ArmorPenetration','2734230kBiREW','_battleCoreBattleResumeAfter','startDamagePopup','zPYIg','close','Game_Map_encounterList','hANMj','Game_Actor_setup','isForRandomBattleCore','StepDistanceX','_effectType','createTargetsJS','VisuMZ_2_BattleSystemBTB','isFTB','match','isOnCurrentMap','_damagePopupArray','updateJump','MotionSpeed','LjFCb','ipOEx','_itemWindow','cnvZz','AutoBattleBgType','isForOpponent','weatherPower','addBattleCoreAutoBattleStartupCommand','ActSeq_Motion_FreezeMotionFrame','rMFeO','_actionBattlers','ActSeq_Mechanics_CtbOrder','resizeWindowXPStyle','drawItemStyleIconText','isBattleTest','statusWindowRectDefaultStyle','updateBossCollapse','uodcI','canAttackBattleCore','VNsOA','callUpdateHelp','dBghG','getStypeIdWithName','Actions','_cache','ActSeq_Impact_ShockwavePoint','onOpacityEnd','ATTACK','StatusWindowAttachmentFrontOffsetY','performActionEnd','GTvTh','MAXHP','ActSeq_Impact_MotionBlurScreen','command301_PreBattleEvent','callNextMethod','PortraitScale','Frame','DCyct','StepDuration','Scene_Battle_selectPreviousCommand','Game_BattlerBase_addNewState','BattleLog','skillItemWindowRectMiddle','UGMaF','Wfspc','getChildIndex','customDamageFormula','opacity','KiTWp','AngiA','actionBattleCoreJS','isEnemy','front\x20center','Game_Battler_regenerateAll','reserveCommonEvent','ActSeq_Mechanics_AddState','equips','addGuardCommand','initVisibility','_skillWindow','isOTB','alive\x20enemies','Exploited','enemy','DistanceY','onActorCancel','NkHTz','refreshStatusWindow','mpDamage','destroy','MotionType','Scene_Boot_onDatabaseLoaded','repeatTargets','clearBattleRefreshRequest','requestPointAnimation','battleCommands','Scene_Battle_onEnemyOk','criticalHitRate','BattleManager_makeActionOrders','isAnyoneSpinning','ARRAYEVAL','IaRmi','addState','jumpBattler','hVcsF','PostStartActionJS','ActSeq_Set_WholeActionSet','updateLink','createLowerLayer','QammE','SvMotionIdleSolo-%1-%2','isPartyCommandWindowDisabled','Sprite_Actor_moveToStartPosition','needsSelectionBattleCore','startWeaponAnimation','VisuMZ_4_BreakShields','adjustPosition_ScaleToFit','alive\x20battlers','XGeAZ','_homeX','qEGPT','_motionSpeed','ActSeq_Impact_MotionTrailRemove','makeTargetSprites','Scene_Battle_startActorSelection','UgAty','IconSet'];_0x2828=function(){return _0x33aa09;};return _0x2828();}Sprite_HpGauge[_0x2d1202(0x8ec)]=Object[_0x2d1202(0xa15)](Sprite_Gauge['prototype']),Sprite_HpGauge['prototype'][_0x2d1202(0x276)]=Sprite_HpGauge,Sprite_HpGauge[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)]=function(){const _0x5e1756=_0x2d1202;Sprite_Gauge[_0x5e1756(0x8ec)]['initialize'][_0x5e1756(0x86c)](this);},Sprite_HpGauge['prototype']['gaugeX']=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x2d1202(0xa5a)]=function(){const _0xaaab=_0x2d1202;this[_0xaaab(0x834)][_0xaaab(0x932)]();const _0x2eceb4=this[_0xaaab(0x58e)]();!isNaN(_0x2eceb4)&&this[_0xaaab(0x5c9)]();};function Sprite_EnemyName(){const _0x190664=_0x2d1202;this[_0x190664(0x3dd)](...arguments);}Sprite_EnemyName[_0x2d1202(0x8ec)]=Object[_0x2d1202(0xa15)](Sprite_Name[_0x2d1202(0x8ec)]),Sprite_EnemyName[_0x2d1202(0x8ec)]['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)]=function(){const _0xeaa643=_0x2d1202;Sprite_Name[_0xeaa643(0x8ec)][_0xeaa643(0x3dd)][_0xeaa643(0x86c)](this),this[_0xeaa643(0x50b)]();},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x435)]=function(){const _0x3353d0=_0x2d1202;Sprite_Name[_0x3353d0(0x8ec)][_0x3353d0(0x435)][_0x3353d0(0x86c)](this),this[_0x3353d0(0xad4)]=0x0,this['_linkedSprite']=null,this[_0x3353d0(0x5e0)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName['prototype'][_0x2d1202(0x50b)]=function(){const _0x11cb1f=_0x2d1202;VisuMZ[_0x11cb1f(0xa3c)][_0x11cb1f(0x6a1)][_0x11cb1f(0x540)]['NameAttachStateIcon']&&(this[_0x11cb1f(0x38f)]=new Sprite_StateIcon(),this[_0x11cb1f(0x304)](this['_stateIconSprite']));},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x51e)]=function(){const _0x473172=_0x2d1202;return Graphics[_0x473172(0x203)];},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x5d4)]=function(){const _0xe1ef8c=_0x2d1202;return this[_0xe1ef8c(0x25a)]=this['_lineHeight']||Window_Base['prototype'][_0xe1ef8c(0xb4a)]()||0x24,this[_0xe1ef8c(0x25a)]*0x4;},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x703)]=function(){const _0x36775e=_0x2d1202;return VisuMZ['BattleCore']['Settings'][_0x36775e(0x540)][_0x36775e(0xb80)]||$gameSystem[_0x36775e(0x41c)]();},Sprite_EnemyName[_0x2d1202(0x8ec)]['linkSprite']=function(_0xabe9ea){const _0x46c3de=_0x2d1202;this[_0x46c3de(0x7e4)]=_0xabe9ea;},Sprite_EnemyName[_0x2d1202(0x8ec)]['update']=function(){const _0x19e036=_0x2d1202;Sprite_Name['prototype'][_0x19e036(0x69e)][_0x19e036(0x86c)](this),this[_0x19e036(0xafc)](),this[_0x19e036(0x1e6)](),this[_0x19e036(0x4ba)](),this[_0x19e036(0x444)]();},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0xa5a)]=function(){const _0x556c9b=_0x2d1202;this['_cacheTextWidth']=undefined;const _0x3981d2=this['name'](),_0x3de454=this[_0x556c9b(0x51e)](),_0x27bc2a=Window_Base[_0x556c9b(0x8ec)][_0x556c9b(0xb4a)]();this['setupFont'](),this[_0x556c9b(0x834)]['clear'](),this[_0x556c9b(0x834)][_0x556c9b(0xb51)](_0x3981d2,0x0,0x0,_0x3de454,_0x27bc2a,'center');},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0xafc)]=function(){const _0x5d9f71=_0x2d1202;if(!this['_linkedSprite'])return;this[_0x5d9f71(0x329)]!==this[_0x5d9f71(0x7e4)]['_battler']&&this[_0x5d9f71(0x882)](this['_linkedSprite']['_battler']);},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x1e6)]=function(){const _0x398545=_0x2d1202;if(!this[_0x398545(0x7e4)])return;this[_0x398545(0x25a)]=this['_lineHeight']||Window_Base['prototype'][_0x398545(0xb4a)](),this['x']=this[_0x398545(0x7e4)][_0x398545(0x99a)],this['y']=this[_0x398545(0x7e4)]['_baseY']-this[_0x398545(0x25a)]*0.5;const _0x283f74=VisuMZ[_0x398545(0xa3c)][_0x398545(0x6a1)][_0x398545(0x540)];this['x']+=_0x283f74[_0x398545(0x3a6)]||0x0,this['y']+=_0x283f74[_0x398545(0x5da)]||0x0;},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x4ba)]=function(){const _0x1753aa=_0x2d1202;this[_0x1753aa(0x982)]();},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x982)]=function(){const _0x2aaf9f=_0x2d1202;if(!this[_0x2aaf9f(0x38f)])return;if(this[_0x2aaf9f(0x329)]!==this[_0x2aaf9f(0x38f)][_0x2aaf9f(0x329)]){if(_0x2aaf9f(0xb1b)!=='vWWXZ')return _0x59107b[_0x2aaf9f(0x973)]()[_0x2aaf9f(0xb5f)](_0x2979e1=>_0x2979e1!==_0x483172);else this[_0x2aaf9f(0x38f)][_0x2aaf9f(0x882)](this[_0x2aaf9f(0x329)]);}const _0x4f27ed=this['textWidth']();this['_lineHeight']=this[_0x2aaf9f(0x25a)]||Window_Base[_0x2aaf9f(0x8ec)]['lineHeight'](),this[_0x2aaf9f(0x38f)]['x']=Math[_0x2aaf9f(0x4b4)]((_0x4f27ed+ImageManager[_0x2aaf9f(0x629)])/0x2)+0x8,this[_0x2aaf9f(0x38f)]['y']=this[_0x2aaf9f(0x25a)]/0x2;const _0x378d6b=VisuMZ[_0x2aaf9f(0xa3c)][_0x2aaf9f(0x6a1)][_0x2aaf9f(0x540)];this[_0x2aaf9f(0x38f)]['x']+=_0x378d6b['AttachStateOffsetX']||0x0,this[_0x2aaf9f(0x38f)]['y']+=_0x378d6b[_0x2aaf9f(0x3cf)]||0x0;},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x444)]=function(){const _0x10003e=_0x2d1202,_0x137586=this[_0x10003e(0x3e4)]();if(_0x137586&&this[_0x10003e(0xad4)]<0xff)this[_0x10003e(0xad4)]+=0x10;else{if(!_0x137586&&this[_0x10003e(0xad4)]>0x0){if('SELhT'===_0x10003e(0xa70))this[_0x10003e(0xad4)]-=0x10;else return 0x0;}}},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x3e4)]=function(){const _0x1d64fc=_0x2d1202;if(this[_0x1d64fc(0xa49)]()){if('Yjxhv'===_0x1d64fc(0x2e8))_0x11c55c+=_0x20f854(_0x49f94b['$1']);else return![];}else{if(!this[_0x1d64fc(0x329)])return![];else{if(this[_0x1d64fc(0x329)][_0x1d64fc(0x7a6)]())return![];else{if(!this['_battler'][_0x1d64fc(0x61b)]()){if('zmqIW'!==_0x1d64fc(0x1dc)){if(this['allowCollapse']())_0xb5491b[_0x1d64fc(0xa3c)][_0x1d64fc(0x76e)][_0x1d64fc(0x86c)](this);}else return![];}else{if(this[_0x1d64fc(0x944)]()){if(_0x1d64fc(0x664)!=='gTaja')return!![];else this[_0x1d64fc(0x834)][_0x1d64fc(0x3a4)]=_0x92e57a['BattleCore'][_0x1d64fc(0x6a1)][_0x1d64fc(0x97d)][_0x1d64fc(0x474)];}else{if(this[_0x1d64fc(0x5e7)]()){if(_0x1d64fc(0x792)!==_0x1d64fc(0x594))return!![];else this[_0x1d64fc(0xae0)][_0x1d64fc(0xa96)](),this['_itemWindow'][_0x1d64fc(0xa96)]();}else{if(this[_0x1d64fc(0x898)]())return!![];else{if(this[_0x1d64fc(0xad4)]>0x0)return![];}}}}}}}},Sprite_EnemyName['prototype'][_0x2d1202(0xa49)]=function(){const _0x3d6690=_0x2d1202;return VisuMZ[_0x3d6690(0xa3c)][_0x3d6690(0x6a1)][_0x3d6690(0x540)]['NameAlwaysHidden'];},Sprite_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x944)]=function(){return![];},Sprite_EnemyName['prototype'][_0x2d1202(0x5e7)]=function(){const _0xc9aba9=_0x2d1202;return VisuMZ['BattleCore'][_0xc9aba9(0x6a1)][_0xc9aba9(0x540)]['NameAlwaysVisible'];},Sprite_EnemyName['prototype']['isIncludedInEnemyWindow']=function(){const _0x2a5729=_0x2d1202;return VisuMZ[_0x2a5729(0xa3c)][_0x2a5729(0x6a1)]['Enemy'][_0x2a5729(0x8ea)]?this['_battler']['isSelected']():SceneManager['_scene'][_0x2a5729(0x28d)]&&SceneManager[_0x2a5729(0xb69)][_0x2a5729(0x28d)][_0x2a5729(0xa7c)]&&SceneManager[_0x2a5729(0xb69)][_0x2a5729(0x28d)][_0x2a5729(0x2a1)][_0x2a5729(0x7c6)](this[_0x2a5729(0x329)]);},Sprite_EnemyName[_0x2d1202(0x8ec)]['textWidth']=function(){const _0x4ef275=_0x2d1202;if(!this['_battler'])return 0x0;if(this[_0x4ef275(0x1e7)])return this[_0x4ef275(0x1e7)];const _0x5648ec=this[_0x4ef275(0x476)]();return this[_0x4ef275(0x7bd)](),this['_cacheTextWidth']=this['bitmap'][_0x4ef275(0x2fb)](_0x5648ec)||0x1,this[_0x4ef275(0x1e7)];},VisuMZ['BattleCore'][_0x2d1202(0x2e7)]=Sprite_Battleback[_0x2d1202(0x8ec)]['adjustPosition'],Sprite_Battleback['prototype'][_0x2d1202(0x2ae)]=function(){const _0x4daef2=_0x2d1202,_0xcd1d1b=VisuMZ[_0x4daef2(0xa3c)][_0x4daef2(0x6a1)][_0x4daef2(0x82e)];if(!_0xcd1d1b){if('QHEXF'==='BJZVW')_0x3833ec=_0x346ceb[_0x4daef2(0xa28)](_0xc36c2a),_0x641145[_0x4daef2(0xa3c)]['Game_Enemy_setup'][_0x4daef2(0x86c)](this,_0x4c84e8,_0x11ddc5,_0x4805ee),_0x2b1434[_0x4daef2(0x716)]&&this['initElementStatusCore'](),this[_0x4daef2(0x780)](),this[_0x4daef2(0x334)](),_0x5beceb[_0x4daef2(0x716)]&&this[_0x4daef2(0x7c4)]();else return VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition'][_0x4daef2(0x86c)](this);}const _0x1bab4b=String(_0xcd1d1b[_0x4daef2(0x2f8)])||'MZ';switch(_0x1bab4b){case'MZ':VisuMZ[_0x4daef2(0xa3c)][_0x4daef2(0x2e7)][_0x4daef2(0x86c)](this);break;case _0x4daef2(0xb76):this[_0x4daef2(0x39c)]();break;case'ScaleToFit':this[_0x4daef2(0xb05)]();break;case'ScaleDown':this[_0x4daef2(0x748)]();break;case _0x4daef2(0x971):this[_0x4daef2(0x79e)]();break;}},Sprite_Battleback[_0x2d1202(0x8ec)][_0x2d1202(0x39c)]=function(){const _0x116536=_0x2d1202;this[_0x116536(0x72b)]=Graphics[_0x116536(0x72b)],this[_0x116536(0x940)]=Graphics[_0x116536(0x940)];const _0x5123b2=0x1;this[_0x116536(0x1de)]['x']=_0x5123b2,this[_0x116536(0x1de)]['y']=_0x5123b2,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x2d1202(0x8ec)][_0x2d1202(0xb05)]=function(){const _0x1733f4=_0x2d1202;this[_0x1733f4(0x72b)]=Graphics[_0x1733f4(0x72b)],this[_0x1733f4(0x940)]=Graphics[_0x1733f4(0x940)];const _0x3c7928=this[_0x1733f4(0x72b)]/this[_0x1733f4(0x834)][_0x1733f4(0x72b)],_0x194176=this[_0x1733f4(0x940)]/this[_0x1733f4(0x834)][_0x1733f4(0x940)],_0x21bc37=Math[_0x1733f4(0x717)](_0x3c7928,_0x194176);this['scale']['x']=_0x21bc37,this['scale']['y']=_0x21bc37,this['x']=(Graphics[_0x1733f4(0x72b)]-this[_0x1733f4(0x72b)])/0x2,this['y']=Graphics[_0x1733f4(0x940)]-this[_0x1733f4(0x940)];},Sprite_Battleback[_0x2d1202(0x8ec)][_0x2d1202(0x748)]=function(){const _0x300a7a=_0x2d1202;this[_0x300a7a(0x72b)]=Graphics[_0x300a7a(0x72b)],this[_0x300a7a(0x940)]=Graphics[_0x300a7a(0x940)];const _0x493cf8=Math[_0x300a7a(0x52e)](0x1,this[_0x300a7a(0x72b)]/this[_0x300a7a(0x834)][_0x300a7a(0x72b)]),_0x3f7cf8=Math[_0x300a7a(0x52e)](0x1,this['height']/this[_0x300a7a(0x834)][_0x300a7a(0x940)]),_0x30c335=Math[_0x300a7a(0x717)](_0x493cf8,_0x3f7cf8);this[_0x300a7a(0x1de)]['x']=_0x30c335,this[_0x300a7a(0x1de)]['y']=_0x30c335,this['x']=(Graphics[_0x300a7a(0x72b)]-this['width'])/0x2,this['y']=Graphics[_0x300a7a(0x940)]-this[_0x300a7a(0x940)];},Sprite_Battleback[_0x2d1202(0x8ec)][_0x2d1202(0x79e)]=function(){const _0x5b17cc=_0x2d1202;this[_0x5b17cc(0x72b)]=Graphics[_0x5b17cc(0x72b)],this['height']=Graphics[_0x5b17cc(0x940)];const _0x26e71b=Math['max'](0x1,this[_0x5b17cc(0x72b)]/this[_0x5b17cc(0x834)][_0x5b17cc(0x72b)]),_0x4cd048=Math['max'](0x1,this[_0x5b17cc(0x940)]/this[_0x5b17cc(0x834)][_0x5b17cc(0x940)]),_0x2a04b7=Math['max'](_0x26e71b,_0x4cd048);this[_0x5b17cc(0x1de)]['x']=_0x2a04b7,this['scale']['y']=_0x2a04b7,this['x']=(Graphics[_0x5b17cc(0x72b)]-this[_0x5b17cc(0x72b)])/0x2,this['y']=Graphics['height']-this[_0x5b17cc(0x940)];},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x5ee)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle['prototype']['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x40f)]=function(){return 0x0;},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x4d1)]=Spriteset_Battle['prototype'][_0x2d1202(0xafd)],Spriteset_Battle[_0x2d1202(0x8ec)]['createLowerLayer']=function(){const _0x2d6e67=_0x2d1202;VisuMZ[_0x2d6e67(0xa3c)][_0x2d6e67(0x4d1)][_0x2d6e67(0x86c)](this),this[_0x2d6e67(0x6b0)](),this[_0x2d6e67(0xb52)](),this[_0x2d6e67(0x4cc)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x97c)]=Spriteset_Battle[_0x2d1202(0x8ec)]['update'],Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x69e)]=function(){const _0xbb70be=_0x2d1202;VisuMZ[_0xbb70be(0xa3c)][_0xbb70be(0x97c)][_0xbb70be(0x86c)](this),this['updateWeather']();},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x6b0)]=function(){const _0x1749dd=_0x2d1202;this[_0x1749dd(0x2ed)]=new Weather(),this[_0x1749dd(0xa01)][_0x1749dd(0x304)](this[_0x1749dd(0x2ed)]);},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x6a4)]=function(){const _0x1135bd=_0x2d1202;this[_0x1135bd(0x2ed)]['type']=$gameScreen[_0x1135bd(0x6b2)](),this[_0x1135bd(0x2ed)]['power']=$gameScreen[_0x1135bd(0xaab)]();},Game_Interpreter[_0x2d1202(0x8ec)][_0x2d1202(0x6ba)]=function(_0x123c43){const _0x3fb6c9=_0x2d1202;$gameScreen['changeWeather'](_0x123c43[0x0],_0x123c43[0x1],_0x123c43[0x2]);if(_0x123c43[0x3])this[_0x3fb6c9(0x251)](_0x123c43[0x2]);return!![];},VisuMZ[_0x2d1202(0xa3c)]['Game_Interpreter_command283']=Game_Interpreter[_0x2d1202(0x8ec)]['command283'],Game_Interpreter[_0x2d1202(0x8ec)]['command283']=function(_0xfe82a2){const _0x16e52f=_0x2d1202;return SceneManager[_0x16e52f(0x346)]()?(SceneManager['_scene'][_0x16e52f(0x3d2)][_0x16e52f(0x6a0)](_0xfe82a2[0x0],_0xfe82a2[0x1]),!![]):VisuMZ[_0x16e52f(0xa3c)][_0x16e52f(0xa10)][_0x16e52f(0x86c)](this,_0xfe82a2);},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x25d)]=function(_0x11fdc1,_0x20f68d){const _0x529122=_0x2d1202;_0x11fdc1[_0x529122(0x834)]=_0x20f68d;},Spriteset_Battle[_0x2d1202(0x8ec)]['changeBattlebacks']=function(_0xdfe4a1,_0x1234e9){const _0x9799a9=_0x2d1202;_0xdfe4a1=_0xdfe4a1||'',_0x1234e9=_0x1234e9||'';_0xdfe4a1===''&&_0x1234e9===''&&(_0xdfe4a1=this['_back1Sprite'][_0x9799a9(0x3ea)](),_0x1234e9=this['_back2Sprite'][_0x9799a9(0x2f5)]());const _0x1fb993=ImageManager[_0x9799a9(0xa65)](_0xdfe4a1),_0x52f9a3=ImageManager[_0x9799a9(0xa78)](_0x1234e9);_0x1fb993[_0x9799a9(0x65a)](this[_0x9799a9(0x727)]['bind'](this,this['_back1Sprite'],this['_back2Sprite'],_0x1fb993,_0x52f9a3));},Spriteset_Battle[_0x2d1202(0x8ec)]['updateBattlebackBitmap1']=function(_0x450ec0,_0x3974f7,_0x442b27,_0x46634e){const _0x43bc21=_0x2d1202;_0x46634e[_0x43bc21(0x65a)](this['updateBattlebackBitmap2'][_0x43bc21(0x937)](this,_0x450ec0,_0x3974f7,_0x442b27,_0x46634e));},Spriteset_Battle['prototype'][_0x2d1202(0x443)]=function(_0x2fe20f,_0x21d12d,_0x42825b,_0x5616f1){const _0x440816=_0x2d1202;_0x2fe20f[_0x440816(0x834)]=_0x42825b,_0x21d12d['bitmap']=_0x5616f1,_0x2fe20f['adjustPosition'](),_0x21d12d[_0x440816(0x2ae)]();},VisuMZ['BattleCore'][_0x2d1202(0x85f)]=Spriteset_Battle[_0x2d1202(0x8ec)]['createBattleField'],Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x8f4)]=function(){const _0x3a062e=_0x2d1202;VisuMZ[_0x3a062e(0xa3c)][_0x3a062e(0x85f)][_0x3a062e(0x86c)](this),this[_0x3a062e(0xba4)]();},Spriteset_Battle[_0x2d1202(0x8ec)]['createBattleFieldBattleCore']=function(){const _0x2ec5c7=_0x2d1202;this['createBattleFieldContainer'](),this[_0x2ec5c7(0x72a)](),this[_0x2ec5c7(0x221)](),this[_0x2ec5c7(0x50c)]();},Spriteset_Battle['prototype']['createBattleFieldContainer']=function(){const _0x4e9bba=_0x2d1202;this[_0x4e9bba(0xb77)]=new Sprite(),this['_battleField']['addChild'](this[_0x4e9bba(0xb77)]);},Spriteset_Battle[_0x2d1202(0x8ec)]['createAnimationContainer']=function(){const _0x352b72=_0x2d1202;this['_animationContainer']=new Sprite(),this[_0x352b72(0xa01)][_0x352b72(0x304)](this[_0x352b72(0x327)]);},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x221)]=function(){const _0x5779d3=_0x2d1202;this[_0x5779d3(0x2e9)]=new Sprite(),this[_0x5779d3(0x2e9)]['x']=this[_0x5779d3(0xa01)]['x'],this[_0x5779d3(0x2e9)]['y']=this[_0x5779d3(0xa01)]['y'],this['addChild'](this[_0x5779d3(0x2e9)]);},Spriteset_Battle['prototype']['adjustFlippedBattlefield']=function(){const _0x32107f=_0x2d1202;if(!this[_0x32107f(0x5ee)]())return;this['_battlerContainer'][_0x32107f(0x1de)]['x']=-0x1,this[_0x32107f(0xb77)]['x']=this[_0x32107f(0xa01)][_0x32107f(0x72b)],this['_animationContainer'][_0x32107f(0x1de)]['x']=-0x1,this[_0x32107f(0x327)]['x']=this[_0x32107f(0xa01)][_0x32107f(0x72b)],this['_damageContainer'][_0x32107f(0x1de)]['x']=-0x1,this[_0x32107f(0x2e9)]['x']=this[_0x32107f(0xa01)]['x']+this[_0x32107f(0xa01)][_0x32107f(0x72b)];},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x3e3)]=function(){const _0x478428=_0x2d1202;if(Imported[_0x478428(0x9ef)]&&this[_0x478428(0x8ca)]()){if('oeKuv'==='uLWbA')return!_0x4dde2d[_0x478428(0x1fd)]()&&this['_battler']&&this[_0x478428(0x329)][_0x478428(0xb90)]();else this[_0x478428(0xb30)]();}const _0x29ac97=$gameTroop[_0x478428(0x76c)](),_0xb0fa7f=[];for(const _0x237d8a of _0x29ac97){_0xb0fa7f[_0x478428(0x5c8)](new Sprite_Enemy(_0x237d8a));}_0xb0fa7f['sort'](this[_0x478428(0x419)][_0x478428(0x937)](this));for(const _0x1a5f8f of _0xb0fa7f){if('OirlQ'!==_0x478428(0x632))this[_0x478428(0xb77)]['addChild'](_0x1a5f8f);else{if(_0x5d32d7[_0x478428(0x5fe)][_0x478428(0xaa0)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x1e110f=_0x1f3973(_0x2e0438['$1'])['split'](/[\r\n]+/)['remove'](''),_0x48e982=this[_0x478428(0x6d1)](_0x1e110f);_0x285ee4=this[_0x478428(0x880)](_0x48e982)||_0x1aa1fe,_0x137795=_0x296d48[_0x478428(0xa28)](_0x19af8b);}}}this[_0x478428(0x6b5)]=_0xb0fa7f;},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x51f)]=function(){const _0x395cf1=_0x2d1202;this[_0x395cf1(0x946)]=[];for(let _0x4c69c2=0x0;_0x4c69c2<$gameParty['maxBattleMembers']();_0x4c69c2++){if(_0x395cf1(0x6de)===_0x395cf1(0x4f4))return _0x13d05b[_0x395cf1(0x1ed)]()[_0x395cf1(0x1d7)]||0x1;else{const _0x216938=$gameParty[_0x395cf1(0x3b2)]()[_0x4c69c2],_0x8b4754=new Sprite_Actor();_0x8b4754[_0x395cf1(0x4f5)](_0x216938),_0x8b4754['setBattler'](_0x216938),_0x8b4754[_0x395cf1(0x69e)](),this[_0x395cf1(0x946)][_0x395cf1(0x5c8)](_0x8b4754),this[_0x395cf1(0xb77)][_0x395cf1(0x304)](_0x8b4754);}}},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x9fa)]=function(_0x3e92f8,_0x344863,_0x14e6e6,_0x66be45){const _0x5dbbb8=_0x2d1202,_0x536db0=this[_0x5dbbb8(0x2ef)](_0x344863),_0x55ce2d=new(_0x536db0?Sprite_AnimationMV:Sprite_Animation)(),_0x3cc3c3=this[_0x5dbbb8(0xb0c)](_0x3e92f8);if(this[_0x5dbbb8(0x576)](_0x3e92f8[0x0])){if(_0x5dbbb8(0xaf6)==='IaRmi')_0x14e6e6=!_0x14e6e6;else return null;}_0x55ce2d[_0x5dbbb8(0x7e8)]=_0x3e92f8,_0x55ce2d[_0x5dbbb8(0x882)](_0x3cc3c3,_0x344863,_0x14e6e6,_0x66be45),this[_0x5dbbb8(0xa8d)](_0x55ce2d);},Spriteset_Battle['prototype'][_0x2d1202(0xa8d)]=function(_0x52e818){const _0x54fbb2=_0x2d1202;if(this[_0x54fbb2(0x8c2)](_0x52e818)){if(_0x54fbb2(0x618)!==_0x54fbb2(0x618))return _0x6ba56d;else this[_0x54fbb2(0xbdb)]()[_0x54fbb2(0x304)](_0x52e818);}else this['_animationContainer']['addChild'](_0x52e818);this[_0x54fbb2(0x3cd)]['push'](_0x52e818);},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x8c2)]=function(_0x35377b){const _0x3aba78=_0x2d1202;if(!_0x35377b)return![];if(!_0x35377b[_0x3aba78(0x809)])return![];if(_0x35377b[_0x3aba78(0x809)]['displayType']!==0x0)return![];if(!_0x35377b['targetObjects'][0x0])return![];if(!_0x35377b[_0x3aba78(0x7e8)][0x0][_0x3aba78(0xb90)]())return![];if($gameSystem[_0x3aba78(0x1fd)]())return![];if(!this[_0x3aba78(0xbdb)]())return![];return Window_BattleStatus[_0x3aba78(0x8ec)]['battleLayoutStyle']()===_0x3aba78(0x682);},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xbdb)]=function(){const _0x546e90=_0x2d1202;if(!SceneManager['_scene'])return;if(!SceneManager[_0x546e90(0xb69)]['_statusWindow'])return;if(!SceneManager[_0x546e90(0xb69)]['_statusWindow'][_0x546e90(0x8f9)])return;return SceneManager['_scene']['_statusWindow']['_effectsContainer'];},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x28e)]=function(_0x563aa5){const _0x54d652=_0x2d1202;this[_0x54d652(0x633)](_0x563aa5);for(const _0x3a2eb3 of _0x563aa5[_0x54d652(0x7e8)]){_0x3a2eb3[_0x54d652(0x8d0)]&&_0x3a2eb3['endAnimation']();}_0x563aa5[_0x54d652(0xaea)]();},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x633)]=function(_0x117ac0){const _0x4c47ad=_0x2d1202;this[_0x4c47ad(0x3cd)][_0x4c47ad(0x9b6)](_0x117ac0),this['isAnimationShownOnBattlePortrait'](_0x117ac0)?this[_0x4c47ad(0xbdb)]()[_0x4c47ad(0x426)](_0x117ac0):this[_0x4c47ad(0x327)][_0x4c47ad(0x426)](_0x117ac0);},VisuMZ[_0x2d1202(0xa3c)]['Spriteset_Battle_updateActors']=Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x44c)],Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x44c)]=function(){const _0x2267f9=_0x2d1202;VisuMZ[_0x2267f9(0xa3c)][_0x2267f9(0x95e)]['call'](this),this[_0x2267f9(0x3d0)]();},Spriteset_Battle['prototype'][_0x2d1202(0x3d0)]=function(){const _0x55b06b=_0x2d1202;this[_0x55b06b(0xb77)]['children'][_0x55b06b(0xbbb)](this[_0x55b06b(0x20b)]['bind'](this)),this[_0x55b06b(0xb17)]();},Spriteset_Battle['prototype']['compareBattlerSprites']=function(_0x27c961,_0x21d790){const _0x2c205b=_0x2d1202;if(VisuMZ[_0x2c205b(0xa3c)][_0x2c205b(0x6a1)][_0x2c205b(0x97d)][_0x2c205b(0x5f5)]){if(_0x27c961['_battler']&&_0x21d790[_0x2c205b(0x329)]){if(_0x27c961[_0x2c205b(0x329)][_0x2c205b(0xb90)]()&&_0x21d790[_0x2c205b(0x329)]['isEnemy']())return 0x1;else{if(_0x21d790['_battler'][_0x2c205b(0xb90)]()&&_0x27c961[_0x2c205b(0x329)][_0x2c205b(0xad8)]())return-0x1;}}}if(_0x27c961[_0x2c205b(0x75a)]!==_0x21d790[_0x2c205b(0x75a)])return _0x27c961[_0x2c205b(0x75a)]-_0x21d790[_0x2c205b(0x75a)];else{if(_0x2c205b(0xa62)!==_0x2c205b(0xa62)){const _0xbc9348=this[_0x2c205b(0x624)]['bitmap'],_0x51c274=this[_0x2c205b(0x72b)]-0x8,_0x436668=this['height'],_0x2bc7c1=this[_0x2c205b(0x895)],_0x8477f7=_0x295465['dimColor1'](),_0x47f278=_0x24a791[_0x2c205b(0x61f)]();this[_0x2c205b(0x624)]['x']=0x4,_0xbc9348['resize'](_0x51c274,_0x436668),_0xbc9348[_0x2c205b(0x9c3)](0x0,0x0,_0x51c274,_0x2bc7c1,_0x47f278,_0x8477f7,!![]),_0xbc9348['fillRect'](0x0,_0x2bc7c1,_0x51c274,_0x436668-_0x2bc7c1*0x2,_0x8477f7),_0xbc9348[_0x2c205b(0x9c3)](0x0,_0x436668-_0x2bc7c1,_0x51c274,_0x2bc7c1,_0x8477f7,_0x47f278,!![]),this['_dimmerSprite'][_0x2c205b(0xa1b)](0x0,0x0,_0x51c274,_0x436668);}else return _0x21d790[_0x2c205b(0x1dd)]-_0x27c961[_0x2c205b(0x1dd)];}},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xb17)]=function(){const _0x4d8024=_0x2d1202;if(!VisuMZ[_0x4d8024(0xa3c)][_0x4d8024(0x6a1)]['Actor'][_0x4d8024(0x7ee)])return;const _0x4611f5=BattleManager[_0x4d8024(0x403)];if(_0x4611f5){if('qvDPt'!==_0x4d8024(0x38a))return this['isForOpponentBattleCore']();else{if(_0x4611f5[_0x4d8024(0xb90)]()&&!$gameSystem['isSideView']())return;const _0x1c3b23=_0x4611f5[_0x4d8024(0x22c)]();if(_0x1c3b23&&_0x4611f5[_0x4d8024(0xb90)]())this[_0x4d8024(0xb77)][_0x4d8024(0x304)](_0x1c3b23);}}},Spriteset_Battle['prototype']['processEscape']=function(){const _0x3ed36c=_0x2d1202;for(const _0x506571 of $gameParty[_0x3ed36c(0x973)]()){if(_0x3ed36c(0x1d8)==='gdUOw'){const _0x583668=this['commandName'](_0x2ee984);if(_0x583668[_0x3ed36c(0xaa0)](/\\I\[(\d+)\]/i)){const _0x3dc0df=this[_0x3ed36c(0xb87)](_0x7b66c5),_0x14fb3a=this[_0x3ed36c(0x446)](_0x583668)[_0x3ed36c(0x72b)];return _0x14fb3a<=_0x3dc0df[_0x3ed36c(0x72b)]?'iconText':_0x3ed36c(0x7fc);}}else{if(!_0x506571)continue;if(!_0x506571['battler']())continue;_0x506571['battler']()[_0x3ed36c(0x253)]=!![],_0x506571[_0x3ed36c(0x22c)]()[_0x3ed36c(0x370)]();}}},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xb52)]=function(){const _0x52df14=_0x2d1202;this[_0x52df14(0x75c)]=new Sprite(),this['_battleField']['addChild'](this[_0x52df14(0x75c)]);},Spriteset_Battle['prototype']['createEnemyNames']=function(){const _0x368311=_0x2d1202;if(VisuMZ['BattleCore'][_0x368311(0x6a1)]['Enemy'][_0x368311(0xb6d)])return;this[_0x368311(0x88d)]=new Sprite(),this[_0x368311(0x75c)][_0x368311(0x304)](this[_0x368311(0x88d)]);for(const _0x4ecd4c of this['_enemySprites']){if(_0x368311(0xbc3)!==_0x368311(0x401)){const _0x5dca6f=new Sprite_EnemyName();this[_0x368311(0x88d)]['addChild'](_0x5dca6f),_0x5dca6f[_0x368311(0x91e)](_0x4ecd4c);}else{if(!this[_0x368311(0x672)]())return![];return _0x3762b6[_0x368311(0xa3c)][_0x368311(0x272)]['call'](this);}}},Spriteset_Battle['prototype']['isBusy']=function(){return![];},Spriteset_Battle[_0x2d1202(0x8ec)]['isAnyoneFloating']=function(){const _0x3bd436=_0x2d1202;return this['battlerSprites']()[_0x3bd436(0x3eb)](_0x553dae=>_0x553dae[_0x3bd436(0xbc0)]());},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0x56b)]=function(){const _0x332807=_0x2d1202;return this['battlerSprites']()[_0x332807(0x3eb)](_0x5a3f55=>_0x5a3f55['isJumping']());},Spriteset_Battle['prototype'][_0x2d1202(0xa1a)]=function(){const _0x1decdd=_0x2d1202;return this[_0x1decdd(0x3c7)]()['some'](_0x306d35=>_0x306d35['isGrowing']());},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xbd2)]=function(){const _0x925569=_0x2d1202;return this[_0x925569(0x3c7)]()[_0x925569(0x3eb)](_0x29c1ab=>_0x29c1ab[_0x925569(0x485)]());},Spriteset_Battle[_0x2d1202(0x8ec)][_0x2d1202(0xaf4)]=function(){const _0x3b5878=_0x2d1202;return this[_0x3b5878(0x3c7)]()[_0x3b5878(0x3eb)](_0x32338d=>_0x32338d[_0x3b5878(0x8dc)]());},Spriteset_Battle['prototype']['isAnyoneChangingOpacity']=function(){const _0x1284c0=_0x2d1202;return this[_0x1284c0(0x3c7)]()[_0x1284c0(0x3eb)](_0x3e9cc9=>_0x3e9cc9[_0x1284c0(0xb41)]());},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x4c1)]=Window_ItemList[_0x2d1202(0x8ec)][_0x2d1202(0x218)],Window_ItemList[_0x2d1202(0x8ec)]['maxCols']=function(){const _0x3d4081=_0x2d1202;return SceneManager[_0x3d4081(0x346)]()?SceneManager[_0x3d4081(0xb69)][_0x3d4081(0xbdc)]()===_0x3d4081(0xb81)?VisuMZ[_0x3d4081(0xa3c)][_0x3d4081(0x6a1)][_0x3d4081(0xbd5)][_0x3d4081(0x826)]:VisuMZ[_0x3d4081(0xa3c)][_0x3d4081(0x6a1)][_0x3d4081(0xbd5)][_0x3d4081(0x460)]:VisuMZ[_0x3d4081(0xa3c)]['Window_ItemList_maxCols']['call'](this);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x266)]=Window_SkillList[_0x2d1202(0x8ec)][_0x2d1202(0x218)],Window_SkillList['prototype'][_0x2d1202(0x218)]=function(){const _0x3dc4f6=_0x2d1202;if(SceneManager[_0x3dc4f6(0x346)]()){if(_0x3dc4f6(0x614)!==_0x3dc4f6(0x614))this[_0x3dc4f6(0xbdb)]()[_0x3dc4f6(0x426)](_0x43a9ba);else return SceneManager[_0x3dc4f6(0xb69)][_0x3dc4f6(0xbdc)]()===_0x3dc4f6(0xb81)?VisuMZ[_0x3dc4f6(0xa3c)][_0x3dc4f6(0x6a1)][_0x3dc4f6(0xbd5)]['SkillItemBorderCols']:VisuMZ[_0x3dc4f6(0xa3c)][_0x3dc4f6(0x6a1)]['BattleLayout'][_0x3dc4f6(0x460)];}else return VisuMZ[_0x3dc4f6(0xa3c)][_0x3dc4f6(0x266)][_0x3dc4f6(0x86c)](this);},VisuMZ[_0x2d1202(0xa3c)]['Window_Options_addGeneralOptions']=Window_Options['prototype'][_0x2d1202(0x907)],Window_Options[_0x2d1202(0x8ec)][_0x2d1202(0x907)]=function(){const _0x298619=_0x2d1202;VisuMZ[_0x298619(0xa3c)]['Window_Options_addGeneralOptions']['call'](this),this[_0x298619(0x6dd)](),this[_0x298619(0xb6c)]();},Window_Options[_0x2d1202(0x8ec)][_0x2d1202(0x6dd)]=function(){const _0x40931b=_0x2d1202;VisuMZ[_0x40931b(0xa3c)][_0x40931b(0x6a1)][_0x40931b(0x265)]['AddOption']&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x40931b(0xa50)]());},Window_Options[_0x2d1202(0x8ec)][_0x2d1202(0xb6c)]=function(){const _0xfd069d=_0x2d1202;if(!VisuMZ[_0xfd069d(0xa3c)]['Settings'][_0xfd069d(0x678)]['AddHpGaugeOption'])return;const _0x39223d=TextManager[_0xfd069d(0x92c)],_0x4f36f3='visualHpGauge';this[_0xfd069d(0x814)](_0x39223d,_0x4f36f3);},Window_Options[_0x2d1202(0x8ec)][_0x2d1202(0xaac)]=function(){const _0x32f4d3=_0x2d1202,_0x4239e6=TextManager[_0x32f4d3(0x3d8)],_0x34e774='autoBattleAtStart';this[_0x32f4d3(0x814)](_0x4239e6,_0x34e774);},Window_Options['prototype'][_0x2d1202(0xa50)]=function(){const _0x2d22f5=_0x2d1202,_0x139a4a=TextManager[_0x2d22f5(0x339)],_0x5392b6='autoBattleUseSkills';this[_0x2d22f5(0x814)](_0x139a4a,_0x5392b6);},VisuMZ[_0x2d1202(0xa3c)]['Window_Options_statusText']=Window_Options[_0x2d1202(0x8ec)][_0x2d1202(0x393)],Window_Options[_0x2d1202(0x8ec)][_0x2d1202(0x393)]=function(_0x370a36){const _0x2759a2=_0x2d1202,_0x1457e6=this[_0x2759a2(0x615)](_0x370a36);if(_0x1457e6==='autoBattleUseSkills'){if('iYYZp'==='UJwFT')_0x2f7fee[_0x2759a2(0xa3c)][_0x2759a2(0x967)][_0x2759a2(0x86c)](this),this[_0x2759a2(0x3e7)]();else return this['statusTextAutoBattleStyle']();}else return VisuMZ[_0x2759a2(0xa3c)][_0x2759a2(0xb59)][_0x2759a2(0x86c)](this,_0x370a36);},Window_Options['prototype'][_0x2d1202(0x62c)]=function(){const _0x246864=_0x2d1202,_0x3f1e79=VisuMZ[_0x246864(0xa3c)][_0x246864(0x6a1)][_0x246864(0x265)],_0x30808d=this['getConfigValue'](_0x246864(0x75b));return _0x30808d?_0x3f1e79['StyleON']:_0x3f1e79[_0x246864(0x5a6)];},Window_ShopStatus[_0x2d1202(0x8ec)][_0x2d1202(0x3b1)]=function(){const _0x66cc92=_0x2d1202,_0xf4f1b1=DataManager[_0x66cc92(0x31a)](this[_0x66cc92(0xb86)]),_0x65a04e=VisuMZ[_0x66cc92(0x54d)][_0xf4f1b1];if(!_0x65a04e)return this[_0x66cc92(0x858)]();const _0x4cef86='DamageType%1'[_0x66cc92(0x995)](this[_0x66cc92(0xb86)][_0x66cc92(0x26a)][_0x66cc92(0x428)]),_0x3e8350=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x66cc92(0xb86)][_0x66cc92(0x26a)]['type']];return _0x65a04e[_0x4cef86][_0x66cc92(0x995)](_0x3e8350);},Window_ShopStatus['prototype']['getItemDamageAmountTextBattleCore']=function(){const _0x3c6586=_0x2d1202,_0x2fbd8e=DataManager[_0x3c6586(0x31a)](this[_0x3c6586(0xb86)]),_0x58a2d0=VisuMZ[_0x3c6586(0x54d)][_0x2fbd8e];if(!_0x58a2d0)return this[_0x3c6586(0x54a)]();return _0x58a2d0[_0x3c6586(0x30a)]['call'](this);},VisuMZ[_0x2d1202(0xa3c)]['Window_PartyCommand_initialize']=Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)],Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)]=function(_0x30cd29){const _0x3a8688=_0x2d1202;VisuMZ[_0x3a8688(0xa3c)]['Window_PartyCommand_initialize'][_0x3a8688(0x86c)](this,_0x30cd29),this['createCommandNameWindow'](_0x30cd29);},Window_PartyCommand[_0x2d1202(0x8ec)]['createCommandNameWindow']=function(_0x71f7e1){const _0x34ebf5=_0x2d1202,_0x527b79=new Rectangle(0x0,0x0,_0x71f7e1[_0x34ebf5(0x72b)],_0x71f7e1[_0x34ebf5(0x940)]);this[_0x34ebf5(0xa0c)]=new Window_Base(_0x527b79),this['_commandNameWindow']['opacity']=0x0,this[_0x34ebf5(0x304)](this['_commandNameWindow']),this[_0x34ebf5(0x508)]();},Window_PartyCommand['prototype'][_0x2d1202(0xab9)]=function(){const _0x2424fe=_0x2d1202;Window_Command[_0x2424fe(0x8ec)][_0x2424fe(0xab9)][_0x2424fe(0x86c)](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();},Window_PartyCommand['prototype']['updateCommandNameWindow']=function(){const _0x33a32e=_0x2d1202,_0x5d04ce=this[_0x33a32e(0xa0c)];_0x5d04ce['contents'][_0x33a32e(0x932)]();const _0x93ff7d=this[_0x33a32e(0x583)](this[_0x33a32e(0x8ee)]());if(_0x93ff7d===_0x33a32e(0x7fc)&&this['maxItems']()>0x0){const _0x541128=this[_0x33a32e(0xb87)](this['index']());let _0x406387=this['commandName'](this[_0x33a32e(0x8ee)]());_0x406387=_0x406387[_0x33a32e(0x586)](/\\I\[(\d+)\]/gi,''),_0x5d04ce[_0x33a32e(0x606)](),this[_0x33a32e(0x951)](_0x406387,_0x541128),this[_0x33a32e(0xbb5)](_0x406387,_0x541128),this[_0x33a32e(0x4aa)](_0x406387,_0x541128);}},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x951)]=function(_0x32e4d8,_0x5d3052){},Window_PartyCommand['prototype'][_0x2d1202(0xbb5)]=function(_0x36a82f,_0x574a3f){const _0x3fa49d=_0x2d1202,_0x674bb1=this[_0x3fa49d(0xa0c)];_0x674bb1[_0x3fa49d(0xb51)](_0x36a82f,0x0,_0x574a3f['y'],_0x674bb1[_0x3fa49d(0x5d6)],_0x3fa49d(0x42b));},Window_PartyCommand[_0x2d1202(0x8ec)]['commandNameWindowCenter']=function(_0xfb531c,_0x1682b1){const _0x392c8b=_0x2d1202,_0x556940=this[_0x392c8b(0xa0c)],_0x49cbb4=$gameSystem[_0x392c8b(0x92e)](),_0x6bfa60=_0x1682b1['x']+Math[_0x392c8b(0x914)](_0x1682b1[_0x392c8b(0x72b)]/0x2)+_0x49cbb4;_0x556940['x']=_0x556940['width']/-0x2+_0x6bfa60,_0x556940['y']=Math[_0x392c8b(0x914)](_0x1682b1[_0x392c8b(0x940)]/0x2);},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0xa76)]=function(){const _0x1f242a=_0x2d1202;this[_0x1f242a(0x7d0)](),this[_0x1f242a(0x34a)](),this[_0x1f242a(0x857)](),this[_0x1f242a(0x758)](),this[_0x1f242a(0x322)]();},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x7d0)]=function(){const _0x2ab6fc=_0x2d1202,_0x3be380=this[_0x2ab6fc(0x8cd)](),_0x5bfe2a=VisuMZ[_0x2ab6fc(0xa3c)]['Settings'][_0x2ab6fc(0x732)][_0x2ab6fc(0x8c9)],_0x394603=_0x3be380===_0x2ab6fc(0x69d)?TextManager['fight']:_0x2ab6fc(0x577)[_0x2ab6fc(0x995)](_0x5bfe2a,TextManager[_0x2ab6fc(0x2ff)]),_0x36fd6e=this[_0x2ab6fc(0x2af)]();this['addCommand'](_0x394603,_0x2ab6fc(0x2ff),_0x36fd6e);},Window_PartyCommand[_0x2d1202(0x8ec)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x34a)]=function(){const _0x1dd178=_0x2d1202;if(!this[_0x1dd178(0x216)]())return;const _0x32ae53=this[_0x1dd178(0x8cd)](),_0x83d8cb=VisuMZ[_0x1dd178(0xa3c)][_0x1dd178(0x6a1)][_0x1dd178(0x732)][_0x1dd178(0x366)],_0x5cb744=_0x32ae53==='text'?TextManager[_0x1dd178(0x1ba)]:'\x5cI[%1]%2'[_0x1dd178(0x995)](_0x83d8cb,TextManager[_0x1dd178(0x1ba)]),_0x2ad565=this[_0x1dd178(0x3ab)]();this[_0x1dd178(0x814)](_0x5cb744,_0x1dd178(0x1ba),_0x2ad565);},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x216)]=function(){const _0x5d822d=_0x2d1202;return VisuMZ[_0x5d822d(0xa3c)][_0x5d822d(0x6a1)][_0x5d822d(0x732)][_0x5d822d(0x98d)];},Window_PartyCommand[_0x2d1202(0x8ec)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x857)]=function(){},Window_PartyCommand[_0x2d1202(0x8ec)]['addOptionsCommand']=function(){const _0x3f44d5=_0x2d1202;if(!this[_0x3f44d5(0x1e3)]())return;const _0x418845=this[_0x3f44d5(0x8cd)](),_0x55affa=VisuMZ[_0x3f44d5(0xa3c)][_0x3f44d5(0x6a1)]['PartyCmd']['CmdIconOptions'],_0x2bb680=_0x418845===_0x3f44d5(0x69d)?TextManager[_0x3f44d5(0x324)]:'\x5cI[%1]%2'[_0x3f44d5(0x995)](_0x55affa,TextManager[_0x3f44d5(0x324)]),_0x127b63=this[_0x3f44d5(0x9ca)]();this[_0x3f44d5(0x814)](_0x2bb680,_0x3f44d5(0x324),_0x127b63);},Window_PartyCommand['prototype'][_0x2d1202(0x1e3)]=function(){const _0x2d5935=_0x2d1202;return VisuMZ[_0x2d5935(0xa3c)][_0x2d5935(0x6a1)]['PartyCmd']['CommandAddOptions'];},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x9ca)]=function(){return!![];},Window_PartyCommand[_0x2d1202(0x8ec)]['addEscapeCommand']=function(){const _0x2b918d=_0x2d1202,_0xef998a=this[_0x2b918d(0x8cd)](),_0xdb64ce=VisuMZ['BattleCore'][_0x2b918d(0x6a1)][_0x2b918d(0x732)][_0x2b918d(0x202)],_0x578cbe=_0xef998a===_0x2b918d(0x69d)?TextManager[_0x2b918d(0x3d5)]:'\x5cI[%1]%2'[_0x2b918d(0x995)](_0xdb64ce,TextManager[_0x2b918d(0x3d5)]),_0x234559=this[_0x2b918d(0x447)]();this[_0x2b918d(0x814)](_0x578cbe,'escape',_0x234559);},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x447)]=function(){return BattleManager['canEscape']();},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x763)]=function(){const _0xa58d97=_0x2d1202;return VisuMZ[_0xa58d97(0xa3c)][_0xa58d97(0x6a1)][_0xa58d97(0x732)][_0xa58d97(0x819)];},Window_PartyCommand['prototype']['drawItem']=function(_0x27af1e){const _0x3b815f=_0x2d1202,_0x3817a6=this['commandStyleCheck'](_0x27af1e);if(_0x3817a6===_0x3b815f(0xa39)){if(_0x3b815f(0x552)===_0x3b815f(0xa6d))return _0x2a1c6e[_0x3b815f(0xa3c)]['Settings'][_0x3b815f(0xace)][_0x3b815f(0x7ab)][_0x3b815f(0x86c)](this);else this[_0x3b815f(0xab2)](_0x27af1e);}else _0x3817a6===_0x3b815f(0x7fc)?this[_0x3b815f(0x84d)](_0x27af1e):_0x3b815f(0x84a)==='NPagE'?Window_Command[_0x3b815f(0x8ec)]['drawItem']['call'](this,_0x27af1e):_0x2e8bda+=_0x5af98b;},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x8cd)]=function(){const _0x5c853e=_0x2d1202;return VisuMZ[_0x5c853e(0xa3c)][_0x5c853e(0x6a1)][_0x5c853e(0x732)][_0x5c853e(0x1cd)];},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x583)]=function(_0x329d6e){const _0x16e93e=_0x2d1202;if(_0x329d6e<0x0)return _0x16e93e(0x69d);const _0x5ee8d9=this[_0x16e93e(0x8cd)]();if(_0x5ee8d9!==_0x16e93e(0x1fc)){if(_0x16e93e(0xac3)==='GTvTh')return _0x5ee8d9;else _0x5e8d9a=_0x6edd5c[this[_0x16e93e(0x98f)][_0x16e93e(0x85a)]()];}else{if(this[_0x16e93e(0xb3d)]()>0x0){if(_0x16e93e(0x53e)===_0x16e93e(0x53e)){const _0x415a91=this[_0x16e93e(0x5c6)](_0x329d6e);if(_0x415a91['match'](/\\I\[(\d+)\]/i)){if(_0x16e93e(0x637)!==_0x16e93e(0x6bb)){const _0x6b7329=this[_0x16e93e(0xb87)](_0x329d6e),_0x505bba=this[_0x16e93e(0x446)](_0x415a91)[_0x16e93e(0x72b)];if(_0x505bba<=_0x6b7329[_0x16e93e(0x72b)]){if('bLkol'!==_0x16e93e(0x1f7))this[_0x16e93e(0xb30)]();else return _0x16e93e(0xa39);}else{if('qSpzP'==='qSpzP')return _0x16e93e(0x7fc);else _0x1cd0d9['prototype'][_0x16e93e(0x435)]['call'](this),this[_0x16e93e(0x7b8)]=null,this[_0x16e93e(0x91f)]=![],this[_0x16e93e(0x696)]='',this[_0x16e93e(0x638)]=0x0,this[_0x16e93e(0xa9c)]=null,this[_0x16e93e(0x532)]=0x0,this[_0x16e93e(0xb8e)]=0x0,this['createMainSprite'](),this['createStateIconSprite']();}}else _0x3d427c=(_0x4fe77f+_0x51e5d7)/0x2;}}else{if(!this[_0x16e93e(0x7e4)])return;this[_0x16e93e(0x25a)]=this[_0x16e93e(0x25a)]||_0x53d554[_0x16e93e(0x8ec)][_0x16e93e(0xb4a)](),this['x']=this[_0x16e93e(0x7e4)][_0x16e93e(0x99a)],this['y']=this[_0x16e93e(0x7e4)][_0x16e93e(0x75a)]-this[_0x16e93e(0x25a)]*0.5;const _0x4999a2=_0x5dfc85[_0x16e93e(0xa3c)][_0x16e93e(0x6a1)][_0x16e93e(0x540)];this['x']+=_0x4999a2[_0x16e93e(0x3a6)]||0x0,this['y']+=_0x4999a2[_0x16e93e(0x5da)]||0x0;}}}return _0x16e93e(0x69d);},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0xab2)]=function(_0x3f8a36){const _0x5ab037=_0x2d1202,_0x443cde=this[_0x5ab037(0xb87)](_0x3f8a36),_0x4833db=this['commandName'](_0x3f8a36),_0xf62ac9=this[_0x5ab037(0x446)](_0x4833db)[_0x5ab037(0x72b)];this[_0x5ab037(0x48c)](this[_0x5ab037(0x240)](_0x3f8a36));const _0x32afc4=this[_0x5ab037(0x763)]();if(_0x32afc4==='right')this[_0x5ab037(0xb6a)](_0x4833db,_0x443cde['x']+_0x443cde[_0x5ab037(0x72b)]-_0xf62ac9,_0x443cde['y'],_0xf62ac9);else{if(_0x32afc4===_0x5ab037(0x42b)){if('zhwFB'!=='zhwFB')_0x96610a[_0x5ab037(0xa3c)]['JS'][_0x454bfa][_0x5ab037(0x86c)](this,this[_0x5ab037(0x229)](),this[_0x5ab037(0x229)](),_0x3d311a,_0x47d456);else{const _0x9a17a9=_0x443cde['x']+Math[_0x5ab037(0x914)]((_0x443cde[_0x5ab037(0x72b)]-_0xf62ac9)/0x2);this[_0x5ab037(0xb6a)](_0x4833db,_0x9a17a9,_0x443cde['y'],_0xf62ac9);}}else this[_0x5ab037(0xb6a)](_0x4833db,_0x443cde['x'],_0x443cde['y'],_0xf62ac9);}},Window_PartyCommand['prototype'][_0x2d1202(0x84d)]=function(_0x2a132a){const _0x36e109=_0x2d1202;this['commandName'](_0x2a132a)[_0x36e109(0xaa0)](/\\I\[(\d+)\]/i);const _0x304a1a=Number(RegExp['$1'])||0x0,_0x135625=this['itemLineRect'](_0x2a132a),_0x5c9f2=_0x135625['x']+Math['floor']((_0x135625['width']-ImageManager[_0x36e109(0x629)])/0x2),_0x531dfc=_0x135625['y']+(_0x135625[_0x36e109(0x940)]-ImageManager[_0x36e109(0x420)])/0x2;this[_0x36e109(0x1d4)](_0x304a1a,_0x5c9f2,_0x531dfc);},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x776)]=function(){},Window_PartyCommand[_0x2d1202(0x8ec)][_0x2d1202(0x20a)]=function(){const _0x4dc8c5=_0x2d1202;Window_Command[_0x4dc8c5(0x8ec)][_0x4dc8c5(0x20a)][_0x4dc8c5(0x86c)](this);const _0x2673b7=this[_0x4dc8c5(0xbdc)]();_0x2673b7===_0x4dc8c5(0xb81)&&(_0x4dc8c5(0x8d5)!==_0x4dc8c5(0x459)?this[_0x4dc8c5(0x96a)]():this['initialize'](...arguments));},Window_PartyCommand['prototype'][_0x2d1202(0xbdc)]=function(){const _0xd6cc4b=_0x2d1202;if(this[_0xd6cc4b(0x239)])return this[_0xd6cc4b(0x239)];return this[_0xd6cc4b(0x239)]=SceneManager[_0xd6cc4b(0xb69)][_0xd6cc4b(0xbdc)](),this[_0xd6cc4b(0x239)];},Window_PartyCommand['prototype'][_0x2d1202(0x2b4)]=function(){const _0x4d924c=_0x2d1202,_0x1b61d8=VisuMZ[_0x4d924c(0xa3c)][_0x4d924c(0x6a1)]['PartyCmd'],_0x3df4fd=this['currentSymbol']();switch(_0x3df4fd){case _0x4d924c(0x2ff):this[_0x4d924c(0x646)][_0x4d924c(0x399)](_0x1b61d8[_0x4d924c(0x8e6)]);break;case _0x4d924c(0x1ba):this['_helpWindow'][_0x4d924c(0x399)](_0x1b61d8[_0x4d924c(0x4c8)]);break;case _0x4d924c(0x324):this[_0x4d924c(0x646)][_0x4d924c(0x399)](_0x1b61d8['HelpOptions']);break;case _0x4d924c(0x3d5):this[_0x4d924c(0x646)][_0x4d924c(0x399)](_0x1b61d8[_0x4d924c(0x35d)]);break;default:this['_helpWindow'][_0x4d924c(0x399)]('');break;}},VisuMZ[_0x2d1202(0xa3c)]['Window_ActorCommand_initialize']=Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)],Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)]=function(_0x3cd7ac){const _0x5b8fc8=_0x2d1202;VisuMZ[_0x5b8fc8(0xa3c)][_0x5b8fc8(0x8f1)]['call'](this,_0x3cd7ac),this[_0x5b8fc8(0x5ea)](_0x3cd7ac);},Window_ActorCommand[_0x2d1202(0x8ec)]['createCommandNameWindow']=function(_0x45ef0b){const _0x4eae50=_0x2d1202,_0x321cdf=new Rectangle(0x0,0x0,_0x45ef0b[_0x4eae50(0x72b)],_0x45ef0b['height']);this['_commandNameWindow']=new Window_Base(_0x321cdf),this[_0x4eae50(0xa0c)][_0x4eae50(0xad4)]=0x0,this['addChild'](this[_0x4eae50(0xa0c)]),this[_0x4eae50(0x508)]();},Window_ActorCommand['prototype'][_0x2d1202(0xab9)]=function(){const _0x357e6b=_0x2d1202;Window_Command[_0x357e6b(0x8ec)][_0x357e6b(0xab9)][_0x357e6b(0x86c)](this);if(this[_0x357e6b(0xa0c)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x2d1202(0x8ec)]['updateCommandNameWindow']=function(){const _0x5f47f5=_0x2d1202,_0x1344ab=this[_0x5f47f5(0xa0c)];_0x1344ab[_0x5f47f5(0x73a)][_0x5f47f5(0x932)]();const _0x4a304d=this[_0x5f47f5(0x583)](this[_0x5f47f5(0x8ee)]());if(_0x4a304d==='icon'&&this[_0x5f47f5(0xb3d)]()>0x0){const _0x23ad6c=this[_0x5f47f5(0xb87)](this[_0x5f47f5(0x8ee)]());let _0x4ee282=this['commandName'](this[_0x5f47f5(0x8ee)]());_0x4ee282=_0x4ee282[_0x5f47f5(0x586)](/\\I\[(\d+)\]/gi,''),_0x1344ab['resetFontSettings'](),this[_0x5f47f5(0x951)](_0x4ee282,_0x23ad6c),this['commandNameWindowDrawText'](_0x4ee282,_0x23ad6c),this[_0x5f47f5(0x4aa)](_0x4ee282,_0x23ad6c);}},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x951)]=function(_0x298bac,_0x256037){},Window_ActorCommand[_0x2d1202(0x8ec)]['commandNameWindowDrawText']=function(_0x537fb2,_0x179205){const _0x508dc0=_0x2d1202,_0x103624=this[_0x508dc0(0xa0c)];_0x103624[_0x508dc0(0xb51)](_0x537fb2,0x0,_0x179205['y'],_0x103624[_0x508dc0(0x5d6)],'center');},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x4aa)]=function(_0x50ec6e,_0x588c8f){const _0x4ab960=_0x2d1202,_0x265f43=this[_0x4ab960(0xa0c)],_0x145a2a=$gameSystem['windowPadding'](),_0x28df42=_0x588c8f['x']+Math['floor'](_0x588c8f[_0x4ab960(0x72b)]/0x2)+_0x145a2a;_0x265f43['x']=_0x265f43['width']/-0x2+_0x28df42,_0x265f43['y']=Math['floor'](_0x588c8f['height']/0x2);},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0xa76)]=function(){const _0x20aeb5=_0x2d1202;if(!this[_0x20aeb5(0x98f)])return;const _0x1c6cd9=this[_0x20aeb5(0x98f)][_0x20aeb5(0xaf0)]();for(const _0x62ec10 of _0x1c6cd9){this['makeBattleCommand'](_0x62ec10['toUpperCase']()[_0x20aeb5(0x43b)]());}},Window_ActorCommand[_0x2d1202(0x8ec)]['makeBattleCommand']=function(_0x430d32){const _0x19b647=_0x2d1202;if(_0x430d32===_0x19b647(0xac0)){if(_0x19b647(0x663)!==_0x19b647(0x273))this['addAttackCommand']();else{const _0x2f15f6=this[_0x19b647(0x3e2)][_0x19b647(0x9c8)](),_0x589133=_0x2f15f6[0x0];return _0x589133[_0x19b647(0x1c6)]=_0x589133[_0x19b647(0x1c6)]||[],_0x589133[_0x19b647(0x1c6)][0x0]=_0x2f15f6[0x1],_0x589133;}}[_0x19b647(0xbc1),_0x19b647(0x4d5)]['includes'](_0x430d32)&&('CQiHG'==='CQiHG'?this[_0x19b647(0xb88)]():this[_0x19b647(0x42e)][_0x19b647(0x2b0)](_0x527281));if(_0x430d32===_0x19b647(0x2e6)){if(_0x19b647(0x742)!==_0x19b647(0x742))return _0x19b647(0x7fc);else this[_0x19b647(0xade)]();}if(_0x430d32===_0x19b647(0x8be)){if('gPtoG'!==_0x19b647(0x5c1)){const _0x3df8eb=this['_enemy']['svBattlerData']();this[_0x19b647(0x834)]=new _0x47a108(_0x3df8eb['width'],_0x3df8eb[_0x19b647(0x940)]),this[_0x19b647(0x42e)]['bitmap']=new _0x2620c7(0x1,0x1);}else this[_0x19b647(0x7b7)]();}_0x430d32===_0x19b647(0xa79)&&('ZBPyi'!==_0x19b647(0x5f6)?this[_0x19b647(0x322)]():(_0x7605c4['prototype'][_0x19b647(0x3f0)][_0x19b647(0x86c)](this),this[_0x19b647(0x3d2)]&&this[_0x19b647(0x3d2)]['update'](),_0x3d0aa1[_0x19b647(0x675)]&&_0x47204a[_0x19b647(0x254)]()));if(_0x430d32===_0x19b647(0x694)){if(_0x19b647(0x79f)===_0x19b647(0x79f))this[_0x19b647(0x34a)]();else return _0x5d000a[_0x19b647(0x8ec)]['isMoving'][_0x19b647(0x86c)](this);}if(_0x430d32['match'](/STYPE: (\d+)/i)){if(_0x19b647(0xb5c)===_0x19b647(0x85d))_0x44ed32[_0x19b647(0xa3c)][_0x19b647(0x3ed)][_0x19b647(0x86c)](this,_0x1e6dbf);else{const _0x514224=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x514224);}}else{if(_0x430d32['match'](/STYPE: (.*)/i)){if(_0x19b647(0x7c9)!==_0x19b647(0x518)){const _0x19f1ec=DataManager[_0x19b647(0xabb)](RegExp['$1']);this['addSkillTypeCommand'](_0x19f1ec);}else return[_0x160bf0]['concat'](_0x565b84);}}if(_0x430d32==='ALL\x20SKILLS'){if(_0x19b647(0x9e0)===_0x19b647(0x9e0))this['addSingleSkillCommands']();else{if(_0x132f96[_0x19b647(0x428)]===0x0)this[_0x19b647(0xa73)](_0x19b647(0x261));else{if(_0x46abc9[_0x19b647(0x428)]===0x1)this[_0x19b647(0xa73)](_0x19b647(0x74e));else _0x3c1c1f[_0x19b647(0x428)]===0x2&&this[_0x19b647(0xa73)](_0x19b647(0x7fb));}}}if(_0x430d32['match'](/SKILL: (\d+)/i)){if(_0x19b647(0x998)!==_0x19b647(0x1b9)){const _0x41ad6e=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x41ad6e]);}else _0x3e78b4[_0x19b647(0xa3c)]['Scene_Battle_start'][_0x19b647(0x86c)](this);}else{if(_0x430d32[_0x19b647(0xaa0)](/SKILL: (.*)/i)){const _0x9815e0=DataManager[_0x19b647(0xa07)](RegExp['$1']);this[_0x19b647(0x848)]($dataSkills[_0x9815e0]);}}_0x430d32===_0x19b647(0xb1a)&&Imported['VisuMZ_2_PartySystem']&&(_0x19b647(0xad6)!==_0x19b647(0xad5)?this[_0x19b647(0x63c)]():(this[_0x19b647(0x950)]()?(this[_0x19b647(0x210)][_0x19b647(0xba5)](),this[_0x19b647(0x28d)][_0x19b647(0x776)](),this[_0x19b647(0x6b7)][_0x19b647(0x20a)]()):_0x581a43[_0x19b647(0xa3c)][_0x19b647(0x43d)][_0x19b647(0x86c)](this),this[_0x19b647(0x74a)]()));if([_0x19b647(0x55d),'COMBAT\x20LOG'][_0x19b647(0x7c6)](_0x430d32)&&Imported['VisuMZ_4_CombatLog']){if(_0x19b647(0x9c1)===_0x19b647(0xa7f))return _0x2c8c86['BattleCore'][_0x19b647(0x6a1)][_0x19b647(0x265)]['AutoBattleBgType'];else this[_0x19b647(0xb8a)]();}_0x430d32===_0x19b647(0x816)&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0x19b647(0x4e1)](!![]);},Window_ActorCommand[_0x2d1202(0x8ec)]['addAttackCommand']=function(){const _0x262c03=_0x2d1202,_0x36c2ac=$dataSkills[this['_actor'][_0x262c03(0x53f)]()];if(!_0x36c2ac)return;if(!this['canAddSkillCommand'](_0x36c2ac))return;const _0x46fcc6=this[_0x262c03(0x8cd)](),_0x14ec74=DataManager['battleCommandName'](_0x36c2ac),_0x371cf4=DataManager[_0x262c03(0x481)](_0x36c2ac),_0x24933e=_0x46fcc6===_0x262c03(0x69d)?_0x14ec74:'\x5cI[%1]%2'['format'](_0x371cf4,_0x14ec74);this[_0x262c03(0x814)](_0x24933e,_0x262c03(0x8a0),this['_actor'][_0x262c03(0x249)]());},Window_ActorCommand['prototype'][_0x2d1202(0xade)]=function(){const _0x307de8=_0x2d1202,_0x1877cf=$dataSkills[this[_0x307de8(0x98f)]['guardSkillId']()];if(!_0x1877cf)return;if(!this['canAddSkillCommand'](_0x1877cf))return;const _0xc36cc2=this[_0x307de8(0x8cd)](),_0x275baf=DataManager[_0x307de8(0x88b)](_0x1877cf),_0x493257=DataManager[_0x307de8(0x481)](_0x1877cf),_0x4c1dbc=_0xc36cc2===_0x307de8(0x69d)?_0x275baf:_0x307de8(0x577)[_0x307de8(0x995)](_0x493257,_0x275baf);this[_0x307de8(0x814)](_0x4c1dbc,_0x307de8(0x992),this[_0x307de8(0x98f)][_0x307de8(0x701)]());},Window_ActorCommand['prototype']['addItemCommand']=function(){const _0x28730e=_0x2d1202,_0x4e47d4=this[_0x28730e(0x8cd)](),_0x36f9e1=VisuMZ[_0x28730e(0xa3c)][_0x28730e(0x6a1)]['ActorCmd'][_0x28730e(0x62b)],_0xce4db1=_0x4e47d4===_0x28730e(0x69d)?TextManager[_0x28730e(0x36f)]:_0x28730e(0x577)[_0x28730e(0x995)](_0x36f9e1,TextManager['item']),_0x2d875b=this['isItemCommandEnabled']();this[_0x28730e(0x814)](_0xce4db1,_0x28730e(0x36f),_0x2d875b);},Window_ActorCommand[_0x2d1202(0x8ec)]['isItemCommandEnabled']=function(){const _0x19049f=_0x2d1202;return this[_0x19049f(0x98f)]&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0x2d1202(0x8ec)]['addSkillCommands']=function(){const _0x20e219=_0x2d1202,_0x1e6e12=this[_0x20e219(0x98f)][_0x20e219(0xb11)]();for(const _0x28a6f1 of _0x1e6e12){_0x20e219(0x425)===_0x20e219(0x425)?this[_0x20e219(0x557)](_0x28a6f1):(_0x1c2d2d[_0x20e219(0xa53)](),_0x1c5c7e['addState'](_0x38324b[_0x20e219(0x803)]()));}},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x557)]=function(_0x3c239d){const _0x448d79=_0x2d1202;let _0x3069d1=$dataSystem[_0x448d79(0xb11)][_0x3c239d];if(!_0x3069d1)return;let _0x3bf201=_0x3069d1;const _0x37f100=this[_0x448d79(0x8cd)]();if(_0x37f100==='text'){if('WjeSB'===_0x448d79(0x7d5))_0x3bf201=_0x3bf201[_0x448d79(0x586)](/\x1I\[(\d+)\]/gi,''),_0x3bf201=_0x3bf201[_0x448d79(0x586)](/\\I\[(\d+)\]/gi,'');else return![];}else{if(!_0x3069d1['match'](/\\I\[(\d+)\]/i)){if('AqZcs'!==_0x448d79(0x4f2)){const _0x297d90=Imported[_0x448d79(0x4fa)]?VisuMZ[_0x448d79(0x728)][_0x448d79(0x6a1)][_0x448d79(0x380)]:VisuMZ['BattleCore']['Settings']['ActorCmd'],_0x54dbec=$dataSystem[_0x448d79(0x5f2)]['includes'](_0x3c239d),_0x3f088c=_0x54dbec?_0x297d90['IconStypeMagic']:_0x297d90[_0x448d79(0x66b)];_0x3bf201=_0x448d79(0x577)[_0x448d79(0x995)](_0x3f088c,_0x3069d1);}else{if(this['enemy']()['note']['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return _0x2c9b6f['prototype'][_0x448d79(0x5cf)][_0x448d79(0x86c)](this);}}}this['addCommand'](_0x3bf201,_0x448d79(0x935),!![],_0x3c239d);},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x791)]=function(){const _0x28874a=_0x2d1202,_0x23ada8=this[_0x28874a(0x98f)][_0x28874a(0xb11)](),_0x57542b=this[_0x28874a(0x98f)][_0x28874a(0x351)]();for(const _0xcb50e1 of _0x57542b){if(!_0xcb50e1)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(_0x28874a(0x6ee)===_0x28874a(0x6ee)){if(this[_0x28874a(0x3a8)](_0xcb50e1))continue;if(this['isHiddenSkill'](_0xcb50e1))continue;}else this[_0x28874a(0x2df)]('dying');}else{if(!_0x23ada8[_0x28874a(0x7c6)](_0xcb50e1[_0x28874a(0x8cb)])){if('PsbNT'!==_0x28874a(0x5fb))continue;else this[_0x28874a(0x294)]=_0x1ecd17[_0x28874a(0x294)];}}this[_0x28874a(0x848)](_0xcb50e1);}},Window_ActorCommand[_0x2d1202(0x8ec)]['noSimilarSTypes']=function(_0x3abc70){const _0x2ac41b=_0x2d1202,_0x2d4bc3=this[_0x2ac41b(0x98f)][_0x2ac41b(0xb11)](),_0x42261f=_0x2d4bc3[_0x2ac41b(0xb5f)](_0x38e282=>DataManager['getSkillTypes'](_0x3abc70)[_0x2ac41b(0x7c6)](_0x38e282));return _0x42261f[_0x2ac41b(0x1d7)]<=0x0;},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x94e)]=function(_0x532387){const _0x692dce=_0x2d1202;if(!Window_SkillList[_0x692dce(0x8ec)]['checkShowHideBattleNotetags'][_0x692dce(0x86c)](this,_0x532387))return!![];if(!Window_SkillList[_0x692dce(0x8ec)]['checkShowHideSwitchNotetags'][_0x692dce(0x86c)](this,_0x532387))return!![];if(!Window_SkillList['prototype'][_0x692dce(0x7f1)]['call'](this,_0x532387))return!![];return![];},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x848)]=function(_0x10f34a){const _0x364aff=_0x2d1202;if(!_0x10f34a)return;if(!this[_0x364aff(0x2f7)](_0x10f34a))return;const _0xf6af93=this[_0x364aff(0x8cd)](),_0x229e45=DataManager[_0x364aff(0x88b)](_0x10f34a),_0x27b1eb=DataManager[_0x364aff(0x481)](_0x10f34a),_0x342d25=_0xf6af93==='text'?_0x229e45:_0x364aff(0x577)[_0x364aff(0x995)](_0x27b1eb,_0x229e45),_0x22b767=this[_0x364aff(0x98f)]['canUse'](_0x10f34a);this['addCommand'](_0x342d25,_0x364aff(0x469),_0x22b767,_0x10f34a['id']);},Window_ActorCommand[_0x2d1202(0x8ec)]['canAddSkillCommand']=function(_0x1a1884){const _0x518e84=_0x2d1202,_0x3875e4=_0x1a1884[_0x518e84(0x5fe)];if(_0x3875e4[_0x518e84(0xaa0)](/<COMMAND REQUIRE LEARN>/i)){if(_0x518e84(0x82a)==='dpsDJ'){const _0x2ca9cd=_0x4483fc[_0x518e84(0x4b4)](_0x420d11[_0x518e84(0x72b)]/0x2),_0x1192c1=_0x3c852d[_0x518e84(0x4b4)](_0x6a8082[_0x518e84(0x940)]/0x2);_0x7f962b[_0x518e84(0x54f)](_0x2ca9cd,_0x1192c1,_0x41a43f[_0x518e84(0x86e)],_0x495579[_0x518e84(0xb10)]);}else{if(!this[_0x518e84(0x98f)][_0x518e84(0x5f1)](_0x1a1884['id']))return![];}}if(_0x3875e4[_0x518e84(0xaa0)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x518e84(0xb09)!==_0x518e84(0x488)){if(!this[_0x518e84(0x98f)][_0x518e84(0x509)](_0x1a1884['id']))return![];}else{const _0x3ed06c=_0xa0e1ff['x']+_0x5d193c[_0x518e84(0x914)]((_0x40a8dc[_0x518e84(0x72b)]-_0x2e198f)/0x2);this[_0x518e84(0xb6a)](_0x37a6d3,_0x3ed06c,_0x1ec576['y'],_0x4a7808);}}const _0x216c38=VisuMZ['BattleCore'][_0x518e84(0x268)](_0x1a1884,_0x518e84(0x7f7));if(VisuMZ[_0x518e84(0xa3c)]['JS'][_0x216c38]){if(_0x518e84(0x680)!==_0x518e84(0x680))_0x107e23[_0x518e84(0xa3c)][_0x518e84(0xa2d)][_0x518e84(0x86c)](this,_0x17eb9d),this[_0x518e84(0xac7)]();else{if(!VisuMZ[_0x518e84(0xa3c)]['JS'][_0x216c38][_0x518e84(0x86c)](this,this[_0x518e84(0x98f)],_0x1a1884))return![];}}return VisuMZ[_0x518e84(0xa3c)]['CheckSkillCommandShowSwitches'](_0x1a1884);},VisuMZ[_0x2d1202(0xa3c)]['CheckSkillCommandShowSwitches']=function(_0x629192){const _0x1352ef=_0x2d1202,_0x25a76b=_0x629192[_0x1352ef(0x5fe)];if(_0x25a76b['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x18b198=JSON[_0x1352ef(0x647)]('['+RegExp['$1'][_0x1352ef(0xaa0)](/\d+/g)+']');for(const _0x28a15f of _0x18b198){if(!$gameSwitches['value'](_0x28a15f))return![];}return!![];}if(_0x25a76b[_0x1352ef(0xaa0)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x372d64=JSON[_0x1352ef(0x647)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x511958 of _0x372d64){if(!$gameSwitches['value'](_0x511958))return![];}return!![];}if(_0x25a76b[_0x1352ef(0xaa0)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('pkESG'===_0x1352ef(0x65d)){if(!_0x512fe2['isPhysical']())return![];if(!_0x2f85d3[_0x1352ef(0xa88)]())return![];if(!_0x1e2120[_0x1352ef(0xaaa)]())return![];return _0x55550a[_0x1352ef(0xa3c)][_0x1352ef(0x6a1)][_0x1352ef(0xb3f)][_0x1352ef(0x630)];}else{const _0x514327=JSON[_0x1352ef(0x647)]('['+RegExp['$1'][_0x1352ef(0xaa0)](/\d+/g)+']');for(const _0x33a466 of _0x514327){if(_0x1352ef(0x2d1)!==_0x1352ef(0x2d1)){const _0x35c285=_0x2a7714[_0x1352ef(0xa3c)]['Settings']['BattleLayout'];if(_0x35c285[_0x1352ef(0x8d8)]){const _0x3af536=new _0x30b85b();_0x3af536['bitmap']=_0x2615eb[_0x1352ef(0x690)](_0x35c285['StatusWindowAttachmentBack']),_0x3af536['x']=_0x35c285[_0x1352ef(0x591)]||0x0,_0x3af536['y']=_0x35c285[_0x1352ef(0x264)]||0x0,this[_0x1352ef(0x53c)](_0x3af536),this[_0x1352ef(0x1e0)]=_0x3af536;}if(_0x35c285[_0x1352ef(0xbd1)]){const _0x3e400a=new _0x5bb675();_0x3e400a['bitmap']=_0x562738['loadSystem'](_0x35c285[_0x1352ef(0xbd1)]),_0x3e400a['x']=_0x35c285[_0x1352ef(0x6fa)]||0x0,_0x3e400a['y']=_0x35c285[_0x1352ef(0xac1)]||0x0,this[_0x1352ef(0x304)](_0x3e400a),this[_0x1352ef(0x919)]=_0x3e400a;}}else{if($gameSwitches['value'](_0x33a466))return!![];}}return![];}}if(_0x25a76b[_0x1352ef(0xaa0)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4d4668=JSON[_0x1352ef(0x647)]('['+RegExp['$1'][_0x1352ef(0xaa0)](/\d+/g)+']');for(const _0x19ae72 of _0x4d4668){if(_0x1352ef(0x7e6)===_0x1352ef(0x909))return _0x29e9f9[_0x1352ef(0xa3c)][_0x1352ef(0x6a1)][_0x1352ef(0x540)][_0x1352ef(0x474)];else{if(!$gameSwitches[_0x1352ef(0x57c)](_0x19ae72))return!![];}}return![];}if(_0x25a76b[_0x1352ef(0xaa0)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5dc897=JSON['parse']('['+RegExp['$1'][_0x1352ef(0xaa0)](/\d+/g)+']');for(const _0x35dc9e of _0x5dc897){if(!$gameSwitches[_0x1352ef(0x57c)](_0x35dc9e))return!![];}return![];}if(_0x25a76b[_0x1352ef(0xaa0)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('ZyadW'==='CXiNr')return!this[_0x1352ef(0x369)]()&&!this[_0x1352ef(0x827)]();else{const _0x59e58d=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x5eae13 of _0x59e58d){if($gameSwitches[_0x1352ef(0x57c)](_0x5eae13))return![];}return!![];}}return!![];},Window_ActorCommand['prototype'][_0x2d1202(0x322)]=function(){const _0x564119=_0x2d1202,_0x3e6378=this[_0x564119(0x8cd)](),_0x279293=VisuMZ[_0x564119(0xa3c)][_0x564119(0x6a1)][_0x564119(0x732)][_0x564119(0x202)],_0x5746ba=_0x3e6378===_0x564119(0x69d)?TextManager['escape']:_0x564119(0x577)[_0x564119(0x995)](_0x279293,TextManager['escape']),_0x41747a=this[_0x564119(0x447)]();this[_0x564119(0x814)](_0x5746ba,_0x564119(0x3d5),_0x41747a);},Window_ActorCommand['prototype'][_0x2d1202(0x447)]=function(){const _0x19f963=_0x2d1202;return BattleManager[_0x19f963(0x5c4)]();},Window_ActorCommand['prototype'][_0x2d1202(0x34a)]=function(){const _0x4c818f=_0x2d1202,_0xd4767=this['commandStyle'](),_0x590a69=VisuMZ['BattleCore']['Settings'][_0x4c818f(0x732)][_0x4c818f(0x366)],_0x55aec6=_0xd4767===_0x4c818f(0x69d)?TextManager['autoBattle']:_0x4c818f(0x577)['format'](_0x590a69,TextManager[_0x4c818f(0x1ba)]),_0x2ece18=this[_0x4c818f(0x3ab)]();this[_0x4c818f(0x814)](_0x55aec6,_0x4c818f(0x1ba),_0x2ece18);},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x3ab)]=function(){return!![];},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x763)]=function(){const _0x4705ab=_0x2d1202;return VisuMZ[_0x4705ab(0xa3c)]['Settings'][_0x4705ab(0x879)][_0x4705ab(0x819)];},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x362)]=function(_0xcef27){const _0x25d804=_0x2d1202,_0x2d0ace=this[_0x25d804(0x583)](_0xcef27);if(_0x2d0ace===_0x25d804(0xa39)){if(_0x25d804(0x609)===_0x25d804(0x609))this['drawItemStyleIconText'](_0xcef27);else{const _0x18967c=_0x422dfd[_0x25d804(0x396)];_0x4ef9bc[_0x25d804(0x1c6)][_0x18967c]=new _0x43b4a2(_0x46cd61);}}else{if(_0x2d0ace===_0x25d804(0x7fc))this['drawItemStyleIcon'](_0xcef27);else{if(_0x25d804(0x808)!==_0x25d804(0x808))for(const _0xd00dd4 of _0x17a36b){for(const _0x2502c0 of _0x292bc4){const _0x231591=_0x5c48e2[0x0]['format'](_0x2502c0[0x0],_0xd00dd4[0x0]),_0x232bb9=_0x42ed6a[0x1][_0x25d804(0x995)](_0x2502c0[0x1],_0xd00dd4[0x1])[_0x25d804(0x43b)](),_0x5a292a=new _0x34a04e(_0x4bb55c['format'](_0x232bb9),'i');_0xc05bbc[_0x231591]=_0x5a292a;}}else Window_Command[_0x25d804(0x8ec)][_0x25d804(0x362)][_0x25d804(0x86c)](this,_0xcef27);}}this[_0x25d804(0xba1)](_0xcef27);},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x8cd)]=function(){const _0x34f797=_0x2d1202;return VisuMZ[_0x34f797(0xa3c)]['Settings']['ActorCmd'][_0x34f797(0x1cd)];},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x583)]=function(_0x1888f0){const _0x4b1834=_0x2d1202;if(_0x1888f0<0x0)return _0x4b1834(0x69d);const _0x2a1a33=this[_0x4b1834(0x8cd)]();if(_0x2a1a33!==_0x4b1834(0x1fc))return _0x2a1a33;else{if(this[_0x4b1834(0xb3d)]()>0x0){if(_0x4b1834(0x785)==='YillB')return _0x36e6d1[_0x4b1834(0xa3c)][_0x4b1834(0x6a1)][_0x4b1834(0x916)][_0x4b1834(0xb33)][_0x4b1834(0x86c)](this,_0x1f43cf,_0x3640d7);else{const _0x1a4fcd=this[_0x4b1834(0x5c6)](_0x1888f0);if(_0x1a4fcd[_0x4b1834(0xaa0)](/\\I\[(\d+)\]/i)){if(_0x4b1834(0x471)!==_0x4b1834(0x59f)){const _0x39ca5f=this['itemLineRect'](_0x1888f0),_0x53bd79=this[_0x4b1834(0x446)](_0x1a4fcd)[_0x4b1834(0x72b)];if(_0x53bd79<=_0x39ca5f[_0x4b1834(0x72b)]){if('JGwYa'!==_0x4b1834(0xa47)){if(_0xcefdfb[_0x4b1834(0xa3c)]['Settings'][_0x4b1834(0xace)]['BattleLogRectJS'])return _0x89ff94['BattleCore']['Settings']['BattleLog']['BattleLogRectJS'][_0x4b1834(0x86c)](this);return _0x3cb025[_0x4b1834(0xa3c)][_0x4b1834(0xbdd)][_0x4b1834(0x86c)](this);}else return _0x4b1834(0xa39);}else return _0x4b1834(0x7fc);}else this['push'](_0x4b1834(0x4ed),_0x4b1834(0xb91)['format'](_0x138de3[_0x4b1834(0x504)](_0x9df531)));}}}}return _0x4b1834(0x69d);},Window_ActorCommand['prototype'][_0x2d1202(0xab2)]=function(_0x22606c){const _0x397602=_0x2d1202,_0x1d6d81=this[_0x397602(0xb87)](_0x22606c),_0x5130c5=this[_0x397602(0x5c6)](_0x22606c),_0x1f1e4f=this[_0x397602(0x446)](_0x5130c5)[_0x397602(0x72b)];this['changePaintOpacity'](this[_0x397602(0x240)](_0x22606c));const _0x382cc3=this[_0x397602(0x763)]();if(_0x382cc3==='right')this[_0x397602(0xb6a)](_0x5130c5,_0x1d6d81['x']+_0x1d6d81[_0x397602(0x72b)]-_0x1f1e4f,_0x1d6d81['y'],_0x1f1e4f);else{if(_0x382cc3==='center'){if(_0x397602(0x990)===_0x397602(0x990)){const _0xc8c613=_0x1d6d81['x']+Math[_0x397602(0x914)]((_0x1d6d81[_0x397602(0x72b)]-_0x1f1e4f)/0x2);this['drawTextEx'](_0x5130c5,_0xc8c613,_0x1d6d81['y'],_0x1f1e4f);}else this[_0x397602(0x75b)]=![];}else _0x397602(0xb95)===_0x397602(0xb95)?this['drawTextEx'](_0x5130c5,_0x1d6d81['x'],_0x1d6d81['y'],_0x1f1e4f):_0x5b9a05=_0x2f43c0[_0x397602(0x8ba)]((_0x49077c,_0x4cf6de)=>_0x49077c*(0x1-_0x4cf6de),_0x596d31);}},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x84d)]=function(_0x2380e3){const _0x2a35e7=_0x2d1202;this['commandName'](_0x2380e3)[_0x2a35e7(0xaa0)](/\\I\[(\d+)\]/i);const _0x4dc55e=Number(RegExp['$1'])||0x0,_0x559ca1=this[_0x2a35e7(0xb87)](_0x2380e3),_0x4ae66d=_0x559ca1['x']+Math[_0x2a35e7(0x914)]((_0x559ca1[_0x2a35e7(0x72b)]-ImageManager[_0x2a35e7(0x629)])/0x2),_0x29efbe=_0x559ca1['y']+(_0x559ca1['height']-ImageManager[_0x2a35e7(0x420)])/0x2;this[_0x2a35e7(0x1d4)](_0x4dc55e,_0x4ae66d,_0x29efbe);},Window_ActorCommand['prototype'][_0x2d1202(0xba1)]=function(_0x432a09){const _0x3a94e4=_0x2d1202;if(!(VisuMZ['BattleCore'][_0x3a94e4(0x6a1)]['ActorCmd']['ShowCosts']??!![]))return;const _0x5240a8=this[_0x3a94e4(0x615)](_0x432a09);if(![_0x3a94e4(0x8a0),_0x3a94e4(0x992),_0x3a94e4(0x469)][_0x3a94e4(0x7c6)](_0x5240a8))return;const _0x44a09f=this[_0x3a94e4(0xb87)](_0x432a09);let _0x550951=null;if(_0x5240a8===_0x3a94e4(0x8a0))_0x3a94e4(0x9f0)!==_0x3a94e4(0x665)?_0x550951=$dataSkills[this[_0x3a94e4(0x98f)][_0x3a94e4(0x53f)]()]:(this[_0x3a94e4(0x950)]()?(this['_statusWindow'][_0x3a94e4(0xba5)](),this[_0x3a94e4(0x287)][_0x3a94e4(0x776)](),this[_0x3a94e4(0x6b7)]['activate']()):_0x537a04['BattleCore'][_0x3a94e4(0x4b9)][_0x3a94e4(0x86c)](this),this[_0x3a94e4(0x74a)]());else{if(_0x5240a8===_0x3a94e4(0x992)){if('cRtks'==='cRtks')_0x550951=$dataSkills[this[_0x3a94e4(0x98f)][_0x3a94e4(0x85a)]()];else{this[_0x3a94e4(0x22c)]()[_0x3a94e4(0x589)](),this['clearFreezeMotion']();return;}}else _0x550951=$dataSkills[this[_0x3a94e4(0x83f)][_0x432a09][_0x3a94e4(0x526)]];}this[_0x3a94e4(0x541)](this[_0x3a94e4(0x98f)],_0x550951,_0x44a09f['x'],_0x44a09f['y'],_0x44a09f[_0x3a94e4(0x72b)]);},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x541)]=function(_0x2d142e,_0x2cc5cd,_0x2e6ca9,_0x1d4415,_0x1615c5){const _0x133f6b=_0x2d1202;if(!_0x2cc5cd)return;Imported['VisuMZ_1_SkillsStatesCore']?Window_Command['prototype'][_0x133f6b(0x541)][_0x133f6b(0x86c)](this,_0x2d142e,_0x2cc5cd,_0x2e6ca9,_0x1d4415,_0x1615c5):Window_SkillList[_0x133f6b(0x8ec)][_0x133f6b(0x541)]['call'](this,_0x2cc5cd,_0x2e6ca9,_0x1d4415,_0x1615c5);},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x776)]=function(){},Window_ActorCommand[_0x2d1202(0x8ec)]['activate']=function(){const _0xa6e67e=_0x2d1202;Window_Command[_0xa6e67e(0x8ec)][_0xa6e67e(0x20a)][_0xa6e67e(0x86c)](this);const _0x2e33be=this[_0xa6e67e(0xbdc)]();_0x2e33be===_0xa6e67e(0xb81)&&this[_0xa6e67e(0x96a)]();},Window_ActorCommand[_0x2d1202(0x8ec)]['battleLayoutStyle']=function(){const _0x2b94b5=_0x2d1202;if(this['_battleLayoutStyle'])return this[_0x2b94b5(0x239)];return this[_0x2b94b5(0x239)]=SceneManager[_0x2b94b5(0xb69)][_0x2b94b5(0xbdc)](),this['_battleLayoutStyle'];},VisuMZ['BattleCore'][_0x2d1202(0xbda)]=Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x882)],Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x882)]=function(_0x50273b){const _0x589589=_0x2d1202,_0x14097b=this['battleLayoutStyle']();if(_0x50273b&&['xp',_0x589589(0x682)][_0x589589(0x7c6)](_0x14097b))this[_0x589589(0xab1)](_0x50273b);else _0x50273b&&['border'][_0x589589(0x7c6)](_0x14097b)&&(this[_0x589589(0x3ac)](_0x50273b),this['showHelpWindow']());VisuMZ['BattleCore'][_0x589589(0xbda)][_0x589589(0x86c)](this,_0x50273b),_0x50273b&&$gameTroop[_0x589589(0x973)]()[_0x589589(0x1d7)]>0x0&&_0x50273b[_0x589589(0x22c)]()&&_0x50273b[_0x589589(0x22c)]()['stepForward']();},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0xab1)]=function(_0x1bcae9){const _0x5270b9=_0x2d1202,_0x1e94a0=Math[_0x5270b9(0x4b4)](Graphics['boxWidth']/0x3),_0x7dc87f=Math[_0x5270b9(0x4b4)](Graphics[_0x5270b9(0x203)]/$gameParty[_0x5270b9(0x3b2)]()[_0x5270b9(0x1d7)]),_0x1e41f6=Math[_0x5270b9(0x52e)](_0x1e94a0,_0x7dc87f),_0x200f9e=this[_0x5270b9(0x744)](VisuMZ[_0x5270b9(0xa3c)][_0x5270b9(0x6a1)][_0x5270b9(0xbd5)][_0x5270b9(0x6ea)]),_0x60668e=_0x7dc87f*_0x1bcae9[_0x5270b9(0x8ee)]()+(_0x7dc87f-_0x1e41f6)/0x2,_0x882564=SceneManager[_0x5270b9(0xb69)][_0x5270b9(0x210)]['y']-_0x200f9e;this['move'](_0x60668e,_0x882564,_0x1e41f6,_0x200f9e),this[_0x5270b9(0x414)](),this[_0x5270b9(0xba9)](0x1);},Window_ActorCommand['prototype'][_0x2d1202(0x3ac)]=function(_0x24bca0){const _0x2a36be=_0x2d1202,_0x2b8898=SceneManager[_0x2a36be(0xb69)][_0x2a36be(0xb53)]();this[_0x2a36be(0x9b7)](_0x2b8898['x'],_0x2b8898['y'],_0x2b8898[_0x2a36be(0x72b)],_0x2b8898[_0x2a36be(0x940)]),this[_0x2a36be(0x414)](),this[_0x2a36be(0xba9)](0x0);},Window_ActorCommand[_0x2d1202(0x8ec)]['refreshDimmerBitmap']=function(){const _0x24bfaa=_0x2d1202;if(this['_dimmerSprite']){const _0x2a8de1=this[_0x24bfaa(0x624)][_0x24bfaa(0x834)],_0xa79efc=this[_0x24bfaa(0x72b)]-0x8,_0x35f925=this['height'],_0x2e4a71=this['padding'],_0x24e730=ColorManager['dimColor1'](),_0x50c5f2=ColorManager[_0x24bfaa(0x61f)]();this[_0x24bfaa(0x624)]['x']=0x4,_0x2a8de1['resize'](_0xa79efc,_0x35f925),_0x2a8de1['gradientFillRect'](0x0,0x0,_0xa79efc,_0x2e4a71,_0x50c5f2,_0x24e730,!![]),_0x2a8de1[_0x24bfaa(0x83e)](0x0,_0x2e4a71,_0xa79efc,_0x35f925-_0x2e4a71*0x2,_0x24e730),_0x2a8de1[_0x24bfaa(0x9c3)](0x0,_0x35f925-_0x2e4a71,_0xa79efc,_0x2e4a71,_0x24e730,_0x50c5f2,!![]),this[_0x24bfaa(0x624)][_0x24bfaa(0xa1b)](0x0,0x0,_0xa79efc,_0x35f925);}},Window_ActorCommand[_0x2d1202(0x8ec)][_0x2d1202(0x2b4)]=function(){const _0x32bcf7=_0x2d1202;if(!this['_actor'])return;const _0x2f0f0d=VisuMZ['BattleCore']['Settings'][_0x32bcf7(0x879)],_0x3e5870=this[_0x32bcf7(0x778)]();switch(_0x3e5870){case'attack':this[_0x32bcf7(0xb9f)]($dataSkills[this[_0x32bcf7(0x98f)][_0x32bcf7(0x53f)]()]);break;case _0x32bcf7(0x992):this[_0x32bcf7(0xb9f)]($dataSkills[this[_0x32bcf7(0x98f)]['guardSkillId']()]);break;case _0x32bcf7(0x935):const _0x34ae0d=_0x2f0f0d[_0x32bcf7(0x64b)],_0x215cf9=_0x34ae0d[_0x32bcf7(0x995)]($dataSystem[_0x32bcf7(0xb11)][this[_0x32bcf7(0x3ec)]()]);this[_0x32bcf7(0x646)][_0x32bcf7(0x399)](_0x215cf9);break;case _0x32bcf7(0x469):this[_0x32bcf7(0xb9f)]($dataSkills[this[_0x32bcf7(0x3ec)]()]);break;case _0x32bcf7(0x36f):this[_0x32bcf7(0x646)][_0x32bcf7(0x399)](_0x2f0f0d[_0x32bcf7(0x39a)]);break;case _0x32bcf7(0x3d5):this[_0x32bcf7(0x646)]['setText'](_0x2f0f0d[_0x32bcf7(0x35d)]);break;case'autoBattle':this[_0x32bcf7(0x646)][_0x32bcf7(0x399)](_0x2f0f0d[_0x32bcf7(0x4c8)]);break;default:this[_0x32bcf7(0x646)][_0x32bcf7(0x399)]('');break;}},VisuMZ[_0x2d1202(0xa3c)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)],Window_BattleStatus['prototype'][_0x2d1202(0x3dd)]=function(_0x2ff050){const _0x4fc85c=_0x2d1202;VisuMZ[_0x4fc85c(0xa3c)]['Window_BattleStatus_initialize'][_0x4fc85c(0x86c)](this,_0x2ff050),this[_0x4fc85c(0x634)](),this[_0x4fc85c(0xb89)]();},Window_BattleStatus[_0x2d1202(0x8ec)]['battleLayoutStyle']=function(){const _0x454a11=_0x2d1202;if(this['_battleLayoutStyle'])return this[_0x454a11(0x239)];return this['_battleLayoutStyle']=SceneManager[_0x454a11(0xb69)][_0x454a11(0xbdc)](),this[_0x454a11(0x239)];},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x634)]=function(){const _0x7a03e6=_0x2d1202;this[_0x7a03e6(0x1fb)]=this[_0x7a03e6(0x4b0)]();const _0x171c02=VisuMZ[_0x7a03e6(0xa3c)][_0x7a03e6(0x6a1)][_0x7a03e6(0xbd5)];_0x171c02[_0x7a03e6(0x788)]&&(this[_0x7a03e6(0xad4)]=0x0);},Window_BattleStatus[_0x2d1202(0x8ec)]['isFrameVisible']=function(){const _0x3f7364=_0x2d1202,_0x2aee0d=VisuMZ[_0x3f7364(0xa3c)]['Settings'][_0x3f7364(0xbd5)];if(_0x2aee0d['StatusWindowSkinFilename']){if(_0x3f7364(0x374)!=='JKiDr')return!![];else this['applyFreezeMotionFrames'](),_0x5adf49[_0x3f7364(0xa3c)]['Sprite_Actor_updateFrame'][_0x3f7364(0x86c)](this);}const _0x533756=this[_0x3f7364(0xbdc)]();switch(_0x533756){case _0x3f7364(0x7e9):case'border':return!![];break;case'default':case'xp':case _0x3f7364(0x682):default:return![];break;}},Window_BattleStatus[_0x2d1202(0x8ec)]['extraHeight']=function(){const _0x320be3=_0x2d1202;return this[_0x320be3(0x4b0)]()?0x0:0xa;},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x218)]=function(){const _0x2fab54=_0x2d1202,_0x498526=this['battleLayoutStyle']();switch(_0x498526){case _0x2fab54(0x7e9):return 0x1;break;case'xp':case'portrait':return $gameParty[_0x2fab54(0x3b2)]()[_0x2fab54(0x1d7)];break;case _0x2fab54(0x376):default:return $gameParty[_0x2fab54(0x736)]();break;}},Window_BattleStatus['prototype'][_0x2d1202(0xa5f)]=function(){const _0x413d47=_0x2d1202,_0x253796=this[_0x413d47(0xbdc)]();switch(_0x253796){case _0x413d47(0x7e9):return Window_StatusBase[_0x413d47(0x8ec)][_0x413d47(0xa5f)][_0x413d47(0x86c)](this);break;case'default':case'xp':case _0x413d47(0x682):default:return this[_0x413d47(0x796)];break;}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x405)]=function(){const _0x35c124=_0x2d1202,_0x312545=this[_0x35c124(0xbdc)]();switch(_0x312545){case _0x35c124(0x7e9):return Window_StatusBase['prototype'][_0x35c124(0x405)][_0x35c124(0x86c)](this);break;case _0x35c124(0x376):case'xp':case _0x35c124(0x682):default:return 0x0;break;}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x81b)]=function(){const _0x3fb60a=_0x2d1202;if(this[_0x3fb60a(0x4b0)]()){if(_0x3fb60a(0x22d)===_0x3fb60a(0x537)){if(this['isHidden']())return![];if(this[_0x3fb60a(0xb23)]()&&this[_0x3fb60a(0x61b)]())return!![];if(this[_0x3fb60a(0xad8)]()&&this[_0x3fb60a(0xb7b)]()){if(this[_0x3fb60a(0x7a6)]()&&this[_0x3fb60a(0x84e)]())return![];}else{if(this[_0x3fb60a(0x7a6)]())return![];}return!![];}else Window_StatusBase[_0x3fb60a(0x8ec)][_0x3fb60a(0x81b)][_0x3fb60a(0x86c)](this);}else{if(_0x3fb60a(0x8af)!==_0x3fb60a(0x8af)){if(!_0x308a6b[_0x3fb60a(0xb69)])return;if(!_0x52f754[_0x3fb60a(0xb69)]['_spriteset'])return;if(!_0x4942fd[_0x3fb60a(0x9ef)])return;_0x4621ef[_0x3fb60a(0x433)](_0x631809,_0x529bf5);const _0x23070b=_0x562e7c[_0x3fb60a(0xa20)](),_0x3d1ec6=_0x25f2d8[_0x3fb60a(0x4b4)](_0x403d7f['pointX']),_0x47117b=_0x5ac3f7[_0x3fb60a(0x4b4)](_0x3502ed[_0x3fb60a(0x91b)]);_0x31a57b[_0x3fb60a(0xaef)](_0x3d1ec6,_0x47117b,_0x523617[_0x3fb60a(0xa1f)],_0x15e62f[_0x3fb60a(0x5df)],_0x5855d7[_0x3fb60a(0x2d8)]),_0x457753[_0x3fb60a(0x222)]&&_0x23070b&&(_0xf9393f[_0x3fb60a(0xb69)][_0x3fb60a(0x3d2)][_0x3fb60a(0x310)](),_0x23070b[_0x3fb60a(0x76a)](_0x3fb60a(0x873)));}else this[_0x3fb60a(0x895)]=0x8;}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x29a)]=function(){const _0x5500e9=_0x2d1202,_0x47d7f6=VisuMZ[_0x5500e9(0xa3c)][_0x5500e9(0x6a1)][_0x5500e9(0xbd5)];_0x47d7f6[_0x5500e9(0x6cd)]?this['windowskin']=ImageManager[_0x5500e9(0x690)](_0x47d7f6[_0x5500e9(0x6cd)]):_0x5500e9(0xa66)===_0x5500e9(0xa66)?Window_StatusBase[_0x5500e9(0x8ec)][_0x5500e9(0x29a)][_0x5500e9(0x86c)](this):_0x288086['BattleCore'][_0x5500e9(0x427)][_0x5500e9(0x86c)](this,_0x19dcde);},Window_BattleStatus[_0x2d1202(0x8ec)]['drawItemBackground']=function(_0x3b0e28){const _0x3b870b=_0x2d1202,_0x5a14b8=VisuMZ['BattleCore']['Settings'][_0x3b870b(0xbd5)];if(_0x5a14b8['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0x3b870b(0x8ec)][_0x3b870b(0x573)]['call'](this,_0x3b0e28);},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x3a5)]=function(){const _0xba769d=_0x2d1202;this[_0xba769d(0xb1f)]=!![];},Window_BattleStatus['prototype']['update']=function(){const _0x1851e3=_0x2d1202;Window_StatusBase[_0x1851e3(0x8ec)][_0x1851e3(0x69e)][_0x1851e3(0x86c)](this),this['updateRefresh'](),this[_0x1851e3(0x20e)]();if(this['battleLayoutStyle']()===_0x1851e3(0xb81))this[_0x1851e3(0x517)]();},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x5bd)]=function(){const _0x48fde1=_0x2d1202;if($gameTemp[_0x48fde1(0x49d)]())this[_0x48fde1(0x842)](),this[_0x48fde1(0xb1f)]=![],$gameTemp[_0x48fde1(0xaee)]();else this['_requestRefresh']&&(this[_0x48fde1(0xb1f)]=![],this[_0x48fde1(0x2bd)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0xba5)]=function(){const _0x582819=_0x2d1202;Window_StatusBase[_0x582819(0x8ec)][_0x582819(0xba5)][_0x582819(0x86c)](this);if(!$gameSystem[_0x582819(0x1fd)]())this[_0x582819(0x2bd)]();},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x776)]=function(){const _0x567660=_0x2d1202;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase[_0x567660(0x8ec)][_0x567660(0x776)]['call'](this);},Window_BattleStatus['prototype'][_0x2d1202(0x71e)]=function(_0x49ca55){const _0xc246a1=_0x2d1202,_0x339e06=this[_0xc246a1(0xbdc)]();switch(_0x339e06){case'xp':case _0xc246a1(0x682):break;case'default':case _0xc246a1(0x7e9):case _0xc246a1(0xb81):default:return Window_StatusBase[_0xc246a1(0x8ec)][_0xc246a1(0x71e)][_0xc246a1(0x86c)](this,_0x49ca55);break;}},VisuMZ[_0x2d1202(0xa3c)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus['prototype'][_0x2d1202(0x3fb)],Window_BattleStatus[_0x2d1202(0x8ec)]['drawItemImage']=function(_0x550214){const _0x567a84=_0x2d1202,_0x5be156=this[_0x567a84(0xbdc)]();switch(_0x5be156){case _0x567a84(0x7e9):this[_0x567a84(0xa51)](_0x550214);break;case'xp':this[_0x567a84(0x5e5)](_0x550214);break;case _0x567a84(0x682):this['drawItemImagePortraitStyle'](_0x550214);break;case _0x567a84(0x376):case _0x567a84(0xb81):default:VisuMZ['BattleCore'][_0x567a84(0x530)]['call'](this,_0x550214);break;}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x252)]=function(_0x187226){const _0x459579=_0x2d1202,_0x174cae=this[_0x459579(0xbdc)]();if(!$gameSystem['isSideView']())this[_0x459579(0x871)](_0x187226);switch(_0x174cae){case _0x459579(0x7e9):this[_0x459579(0x966)](_0x187226);break;case'xp':case'portrait':case _0x459579(0x376):case _0x459579(0xb81):default:this[_0x459579(0xb2a)](_0x187226);break;}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0xbd9)]=function(){const _0x367212=_0x2d1202,_0x89fc35=this[_0x367212(0xbdc)]();if(['xp'][_0x367212(0x7c6)](_0x89fc35)&&!$gameSystem['isSideView']()){if(_0x367212(0x280)===_0x367212(0x5a2))_0x325207[_0x367212(0xa3c)][_0x367212(0xbae)][_0x367212(0x86c)](this),this[_0x367212(0x3ba)]();else{this[_0x367212(0x2b8)](0x0,0x0,0x0,0x0);return;}}Window_StatusBase['prototype'][_0x367212(0xbd9)]['call'](this);},Window_BattleStatus['prototype'][_0x2d1202(0x871)]=function(_0x51bdb0){const _0x269173=_0x2d1202,_0x406887=this[_0x269173(0x832)](_0x51bdb0)[_0x269173(0x22c)]();if(!_0x406887)return;const _0x43aa7a=this[_0x269173(0xbdc)](),_0x488f76=this[_0x269173(0x6d0)](_0x51bdb0);let _0xadf59d=Math[_0x269173(0x4b4)](_0x488f76['x']+_0x488f76['width']/0x2)+this['padding'];['list'][_0x269173(0x7c6)](_0x43aa7a)&&(_0xadf59d=_0x488f76['width']/$gameParty[_0x269173(0x3b2)]()[_0x269173(0x1d7)],_0xadf59d*=_0x51bdb0,_0xadf59d+=_0x488f76[_0x269173(0x72b)]/$gameParty[_0x269173(0x3b2)]()[_0x269173(0x1d7)]/0x2);let _0xc0b560=Math[_0x269173(0x4b4)](this[_0x269173(0x80b)](_0x51bdb0,_0x406887,_0x488f76));_0x406887[_0x269173(0x219)](_0xadf59d,_0xc0b560),this[_0x269173(0xa14)](_0x406887,0x1),_0x406887[_0x269173(0xba5)]();},Window_BattleStatus[_0x2d1202(0x8ec)]['frontviewSpriteY']=function(_0x2cdf57,_0x5909fa,_0x391606){const _0x2a4351=_0x2d1202,_0x517473=VisuMZ[_0x2a4351(0xa3c)]['Settings'][_0x2a4351(0xbd5)],_0x105300=this[_0x2a4351(0xbdc)]();if(_0x105300==='xp'){const _0x4bcc6d=_0x517473[_0x2a4351(0x5a0)];switch(_0x4bcc6d['toLowerCase']()[_0x2a4351(0x43b)]()){case _0x2a4351(0x91d):return _0x391606[_0x2a4351(0x940)]-_0x5909fa[_0x2a4351(0xa35)][_0x2a4351(0x940)]/0x4;break;case _0x2a4351(0x42b):const _0x56cc43=_0x517473[_0x2a4351(0x314)];return(_0x391606['height']+(_0x5909fa[_0x2a4351(0x940)]||_0x56cc43))/0x2;break;case _0x2a4351(0x712):return 0x0;case _0x2a4351(0x476):default:return this[_0x2a4351(0x660)](_0x391606);break;}}else{if(_0x105300===_0x2a4351(0x682)){}}return _0x5909fa[_0x2a4351(0x940)];},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0xa51)]=function(_0x44c955){const _0x273b01=_0x2d1202;if(!VisuMZ[_0x273b01(0xa3c)]['Settings']['BattleLayout'][_0x273b01(0x2eb)])return;const _0x430e80=this[_0x273b01(0x832)](_0x44c955),_0xe80df1=this[_0x273b01(0x6d0)](_0x44c955);_0xe80df1[_0x273b01(0x72b)]=ImageManager[_0x273b01(0xbc7)],_0xe80df1['height']-=0x2,this['drawActorFace'](_0x430e80,_0xe80df1['x']+0x1,_0xe80df1['y']+0x1,_0xe80df1['width'],_0xe80df1[_0x273b01(0x940)]);},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x966)]=function(_0x1673a0){const _0x2d9a58=_0x2d1202,_0x3b0e98=VisuMZ[_0x2d9a58(0xa3c)][_0x2d9a58(0x6a1)]['BattleLayout'],_0x58c326=$dataSystem['optDisplayTp']?0x4:0x3,_0x209027=_0x58c326*0x80+(_0x58c326-0x1)*0x8+0x4,_0xf3bfe=this['actor'](_0x1673a0),_0x22f0ca=this[_0x2d9a58(0x6d0)](_0x1673a0);let _0x4ba884=_0x22f0ca['x']+this['padding'];_0x3b0e98['ShowFacesListStyle']?_0x2d9a58(0x61a)===_0x2d9a58(0x61a)?_0x4ba884=_0x22f0ca['x']+ImageManager[_0x2d9a58(0xbc7)]+0x8:(_0x23ed2f[_0x2d9a58(0xa3c)][_0x2d9a58(0x4d1)][_0x2d9a58(0x86c)](this),this['createWeather'](),this[_0x2d9a58(0xb52)](),this[_0x2d9a58(0x4cc)]()):_0x4ba884+=ImageManager[_0x2d9a58(0x629)];const _0x580823=Math['round'](Math['min'](_0x22f0ca['x']+_0x22f0ca[_0x2d9a58(0x72b)]-_0x209027,_0x4ba884)),_0x382ab1=Math[_0x2d9a58(0x4b4)](_0x22f0ca['y']+(_0x22f0ca[_0x2d9a58(0x940)]-Sprite_Name[_0x2d9a58(0x8ec)][_0x2d9a58(0x5d4)]())/0x2),_0x2ae8a6=Math['round'](_0x580823-ImageManager['iconWidth']/0x2-0x4),_0x5972ed=Math[_0x2d9a58(0x4b4)](_0x22f0ca['y']+(_0x22f0ca['height']-ImageManager['iconHeight'])/0x2+ImageManager['iconHeight']/0x2);let _0x4d3b2d=_0x580823+0x88;const _0x4f6044=_0x382ab1;this[_0x2d9a58(0x726)](_0xf3bfe,_0x580823-0x4+(_0x3b0e98[_0x2d9a58(0x87d)]||0x0),_0x382ab1+(_0x3b0e98['TpbGaugeOffsetY']||0x0)),this[_0x2d9a58(0x5bf)](_0xf3bfe,_0x580823+(_0x3b0e98[_0x2d9a58(0x3a6)]||0x0),_0x382ab1+(_0x3b0e98[_0x2d9a58(0x5da)]||0x0)),this['placeStateIcon'](_0xf3bfe,_0x2ae8a6+(_0x3b0e98['StateIconOffsetX']||0x0),_0x5972ed+(_0x3b0e98[_0x2d9a58(0x603)]||0x0)),this[_0x2d9a58(0xba3)](_0xf3bfe,'hp',_0x4d3b2d+0x88*0x0+(_0x3b0e98['HpGaugeOffsetX']||0x0),_0x4f6044+(_0x3b0e98['HpGaugeOffsetY']||0x0)),this[_0x2d9a58(0xba3)](_0xf3bfe,'mp',_0x4d3b2d+0x88*0x1+(_0x3b0e98['MpGaugeOffsetX']||0x0),_0x4f6044+(_0x3b0e98['MpGaugeOffsetY']||0x0)),$dataSystem[_0x2d9a58(0x2f9)]&&this[_0x2d9a58(0xba3)](_0xf3bfe,'tp',_0x4d3b2d+0x88*0x2+(_0x3b0e98[_0x2d9a58(0xa2f)]||0x0),_0x4f6044+(_0x3b0e98['TpGaugeOffsetY']||0x0));},Window_BattleStatus['prototype'][_0x2d1202(0x5e5)]=function(_0x2d18ee){const _0x3f5165=_0x2d1202;if(!$gameSystem[_0x3f5165(0x1fd)]())return;VisuMZ[_0x3f5165(0xa3c)][_0x3f5165(0x530)][_0x3f5165(0x86c)](this,_0x2d18ee);},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0xb2a)]=function(_0x11b4ee){const _0x2ccc61=_0x2d1202,_0x33cfe9=VisuMZ[_0x2ccc61(0xa3c)][_0x2ccc61(0x6a1)][_0x2ccc61(0xbd5)],_0x33219f=this[_0x2ccc61(0x832)](_0x11b4ee),_0x162aeb=this['itemRect'](_0x11b4ee),_0x280276=Math[_0x2ccc61(0x4b4)](_0x162aeb['x']+(_0x162aeb[_0x2ccc61(0x72b)]-0x80)/0x2),_0x345ec6=this[_0x2ccc61(0x660)](_0x162aeb);let _0x435597=_0x280276-ImageManager[_0x2ccc61(0x629)]/0x2-0x4,_0x1446a=_0x345ec6+ImageManager[_0x2ccc61(0x420)]/0x2;if(_0x435597-ImageManager[_0x2ccc61(0x629)]/0x2<_0x162aeb['x']){if(_0x2ccc61(0x5b7)===_0x2ccc61(0x5b7))_0x435597=_0x280276+ImageManager[_0x2ccc61(0x629)]/0x2-0x4,_0x1446a=_0x345ec6-ImageManager[_0x2ccc61(0x420)]/0x2;else{let _0x1dc4de=_0x4fb744[_0x2ccc61(0x656)](_0x2b47f5['id']);this[_0x2ccc61(0x7be)](_0x1dc4de);}}const _0x3bbc12=_0x280276,_0x3d87a1=this['basicGaugesY'](_0x162aeb);this[_0x2ccc61(0x726)](_0x33219f,_0x280276+(_0x33cfe9['TpbGaugeOffsetX']||0x0),_0x345ec6+(_0x33cfe9[_0x2ccc61(0x2c8)]||0x0)),this['placeActorName'](_0x33219f,_0x280276+(_0x33cfe9[_0x2ccc61(0x3a6)]||0x0),_0x345ec6+(_0x33cfe9[_0x2ccc61(0x5da)]||0x0)),this[_0x2ccc61(0x782)](_0x33219f,_0x435597+(_0x33cfe9[_0x2ccc61(0x6cb)]||0x0),_0x1446a+(_0x33cfe9[_0x2ccc61(0x603)]||0x0)),this['placeGauge'](_0x33219f,'hp',_0x3bbc12+(_0x33cfe9[_0x2ccc61(0x80e)]||0x0),_0x3d87a1+(_0x33cfe9[_0x2ccc61(0x36a)]||0x0)),this[_0x2ccc61(0xba3)](_0x33219f,'mp',_0x3bbc12+(_0x33cfe9[_0x2ccc61(0x21b)]||0x0),_0x3d87a1+this[_0x2ccc61(0x43f)]()+(_0x33cfe9['MpGaugeOffsetY']||0x0)),$dataSystem[_0x2ccc61(0x2f9)]&&this[_0x2ccc61(0xba3)](_0x33219f,'tp',_0x3bbc12+(_0x33cfe9[_0x2ccc61(0xa2f)]||0x0),_0x3d87a1+this[_0x2ccc61(0x43f)]()*0x2+(_0x33cfe9[_0x2ccc61(0x54c)]||0x0));},Window_BattleStatus['prototype'][_0x2d1202(0xa41)]=function(_0x482036){const _0xec9298=_0x2d1202;if(!VisuMZ[_0xec9298(0xa3c)][_0xec9298(0x6a1)][_0xec9298(0xbd5)][_0xec9298(0xb4d)])return![];if(_0x482036[_0xec9298(0x592)]())return!![];return Imported[_0xec9298(0x3be)]&&_0x482036[_0xec9298(0x6ef)]();},Game_Actor[_0x2d1202(0x8ec)]['getBattlePortraitOffsetX']=function(){const _0x3208cf=_0x2d1202;if(this[_0x3208cf(0x832)]()[_0x3208cf(0x5fe)][_0x3208cf(0xaa0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3208cf(0x832)]()['note'][_0x3208cf(0xaa0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x2d1202(0x8ec)][_0x2d1202(0x30b)]=function(){const _0x56be35=_0x2d1202;if(this[_0x56be35(0x832)]()['note'][_0x56be35(0xaa0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x56be35(0x832)]()[_0x56be35(0x5fe)][_0x56be35(0xaa0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x6d9)]=function(_0x65f2cd){const _0x4e2202=_0x2d1202,_0x4a761a=this[_0x4e2202(0x832)](_0x65f2cd);if(this[_0x4e2202(0xa41)](_0x4a761a)){const _0x3f95e0='actor%1-portrait'[_0x4e2202(0x995)](_0x4a761a[_0x4e2202(0x3c4)]()),_0x40bfc0=this[_0x4e2202(0x74f)](_0x3f95e0,Sprite),_0x3db133=_0x4a761a[_0x4e2202(0x4f8)]();_0x3db133!==''?_0x40bfc0['bitmap']=ImageManager[_0x4e2202(0x546)](_0x3db133):_0x40bfc0[_0x4e2202(0x834)]=ImageManager[_0x4e2202(0xb1c)];const _0x2970f7=this[_0x4e2202(0x6d0)](_0x65f2cd);_0x40bfc0[_0x4e2202(0x5e0)]['x']=0.5,_0x40bfc0[_0x4e2202(0x5e0)]['y']=0x1;let _0x2c761d=Math[_0x4e2202(0x4b4)](_0x2970f7['x']+_0x2970f7[_0x4e2202(0x72b)]/0x2)+this['padding'];_0x2c761d+=_0x4a761a['getBattlePortraitOffsetX']();let _0x54e83c=Math[_0x4e2202(0x4b4)](this[_0x4e2202(0x940)]);_0x54e83c+=_0x4a761a['getBattlePortraitOffsetY'](),_0x40bfc0[_0x4e2202(0x9b7)](_0x2c761d,_0x54e83c);const _0x5659cf=VisuMZ[_0x4e2202(0xa3c)][_0x4e2202(0x6a1)][_0x4e2202(0xbd5)][_0x4e2202(0xac8)];_0x40bfc0[_0x4e2202(0x1de)]['x']=_0x5659cf,_0x40bfc0['scale']['y']=_0x5659cf,_0x40bfc0[_0x4e2202(0xba5)]();}else{const _0x1fe4d7=this[_0x4e2202(0x516)](_0x65f2cd);this[_0x4e2202(0x724)](_0x4a761a,_0x1fe4d7['x'],_0x1fe4d7['y'],_0x1fe4d7[_0x4e2202(0x72b)],_0x1fe4d7[_0x4e2202(0x940)]);}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x74f)]=function(_0x3cec55,_0x169f6b){const _0x32b87f=_0x2d1202,_0x2295e5=this[_0x32b87f(0x61d)];if(_0x2295e5[_0x3cec55])return _0x2295e5[_0x3cec55];else{if(_0x32b87f(0x3e9)===_0x32b87f(0x4a6)){this['_flashColor']=_0x3cc4fd[_0x32b87f(0x835)]||[0x0,0x0,0x0,0x0],this[_0x32b87f(0x4de)]=_0x5974a3[_0x32b87f(0x1c7)](this[_0x32b87f(0x4de)]),this[_0x32b87f(0x9f9)]=_0x2673e7[_0x32b87f(0x337)]||0x0;const _0x210121=this['fontSize'](),_0x54b2fd=_0x3408e6[_0x32b87f(0x914)](_0x210121*0x1e),_0x57c616=this[_0x32b87f(0x725)](_0x54b2fd,_0x210121);_0x57c616[_0x32b87f(0x834)]['textColor']=_0x21dffa[_0x32b87f(0x23b)](_0x4512bb[_0x32b87f(0x5fc)]),_0x57c616[_0x32b87f(0x834)][_0x32b87f(0xb51)](_0x3c5ced,0x0,0x0,_0x54b2fd,_0x210121,_0x32b87f(0x42b)),_0x57c616['dy']=0x0;}else{const _0x3f783d=new _0x169f6b();return _0x2295e5[_0x3cec55]=_0x3f783d,this[_0x32b87f(0x53c)](_0x3f783d),this[_0x32b87f(0x53c)](this[_0x32b87f(0x2dd)]),_0x3f783d;}}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x385)]=function(){const _0x1fdbfb=_0x2d1202;this[_0x1fdbfb(0x4af)](),this[_0x1fdbfb(0x27d)](),Window_StatusBase['prototype']['_createClientArea'][_0x1fdbfb(0x86c)](this),this[_0x1fdbfb(0x56c)]();},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x4af)]=function(){const _0x595ab0=_0x2d1202;this[_0x595ab0(0x2dd)]=new Sprite(),this[_0x595ab0(0x2dd)][_0x595ab0(0x875)]=[new PIXI[(_0x595ab0(0x875))][(_0x595ab0(0x533))]()],this['_cursorArea'][_0x595ab0(0x45f)]=new Rectangle(),this[_0x595ab0(0x2dd)][_0x595ab0(0x9b7)](this[_0x595ab0(0x58c)],this['_padding']),this[_0x595ab0(0x304)](this[_0x595ab0(0x2dd)]);},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x27d)]=function(){const _0x420ab=_0x2d1202;this[_0x420ab(0x8f9)]=new Sprite(),this[_0x420ab(0x304)](this[_0x420ab(0x8f9)]);},Window_BattleStatus['prototype'][_0x2d1202(0x56c)]=function(){const _0x2a28ad=_0x2d1202;this[_0x2a28ad(0x2e9)]=new Sprite(),this[_0x2a28ad(0x304)](this[_0x2a28ad(0x2e9)]);},Window_BattleStatus[_0x2d1202(0x8ec)]['_createCursorSprite']=function(){const _0x316498=_0x2d1202;this[_0x316498(0x521)]=new Sprite();for(let _0x3414b6=0x0;_0x3414b6<0x9;_0x3414b6++){if(_0x316498(0xab6)===_0x316498(0xab6))this[_0x316498(0x521)][_0x316498(0x304)](new Sprite());else{this[_0x316498(0xbab)]=new _0x3de5c4();const _0x1a944f=_0x8ac0f4[_0x316498(0xb69)],_0x229965=_0x1a944f[_0x316498(0x5cd)][_0x316498(0x783)](_0x1a944f[_0x316498(0x454)]);_0x1a944f['addChildAt'](this[_0x316498(0xbab)],_0x229965),this[_0x316498(0xbab)]['anchor']['x']=0.5,this['_borderPortraitSprite'][_0x316498(0x5e0)]['y']=0x1;const _0x13509c=_0x37875f[_0x316498(0xa3c)][_0x316498(0x6a1)]['BattleLayout'][_0x316498(0xbbd)];this[_0x316498(0xbab)][_0x316498(0x1de)]['x']=_0x13509c,this[_0x316498(0xbab)][_0x316498(0x1de)]['y']=_0x13509c,this['_borderPortraitSprite']['y']=this['y']+this[_0x316498(0x940)],this[_0x316498(0x7d4)]=0x0;}}this[_0x316498(0x2dd)]['addChild'](this['_cursorSprite']);},Window_BattleStatus['prototype']['_updateClientArea']=function(){const _0x541ac4=_0x2d1202;Window_StatusBase['prototype']['_updateClientArea']['call'](this),this[_0x541ac4(0x94b)]();},Window_BattleStatus[_0x2d1202(0x8ec)]['_updateCursorArea']=function(){const _0x3b8143=_0x2d1202,_0x30942b=this[_0x3b8143(0x58c)];this['_cursorArea'][_0x3b8143(0x9b7)](_0x30942b,_0x30942b),this['_cursorArea']['x']=_0x30942b-this[_0x3b8143(0x8fd)]['x'],this[_0x3b8143(0x2dd)]['y']=_0x30942b-this[_0x3b8143(0x8fd)]['y'],this['innerWidth']>0x0&&this[_0x3b8143(0x796)]>0x0?this[_0x3b8143(0x2dd)][_0x3b8143(0x3ef)]=this[_0x3b8143(0x8fa)]():this['_cursorArea']['visible']=![];},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x69b)]=function(){const _0x510e4e=_0x2d1202;Window_StatusBase[_0x510e4e(0x8ec)][_0x510e4e(0x69b)][_0x510e4e(0x86c)](this),this['_updateCursorFilterArea']();},Window_BattleStatus['prototype']['_updateCursorFilterArea']=function(){const _0x2e1bf6=_0x2d1202,_0x2a6a2f=this[_0x2e1bf6(0x2dd)]['worldTransform'][_0x2e1bf6(0x3da)](new Point(0x0,0x0)),_0x2d0aac=this[_0x2e1bf6(0x2dd)][_0x2e1bf6(0x45f)];_0x2d0aac['x']=_0x2a6a2f['x']+this[_0x2e1bf6(0x8fd)]['x'],_0x2d0aac['y']=_0x2a6a2f['y']+this['origin']['y'],_0x2d0aac[_0x2e1bf6(0x72b)]=this['innerWidth'],_0x2d0aac[_0x2e1bf6(0x940)]=this['innerHeight'];},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0xa90)]=function(_0x23cc18){const _0x2f5968=_0x2d1202;if(this[_0x2f5968(0xbdc)]()!==_0x2f5968(0x682))return;this[_0x2f5968(0x6d9)](_0x23cc18[_0x2f5968(0x8ee)]());},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x74d)]=function(_0x2c30ab,_0x26dab5){const _0xe88394=_0x2d1202;if(!this[_0xe88394(0x2e9)])return;if(!_0x2c30ab)return;if(!_0x26dab5)return;const _0x4c9e46=this[_0xe88394(0x6d0)](_0x26dab5[_0xe88394(0x8ee)]());_0x4c9e46['x']+=_0x4c9e46[_0xe88394(0x72b)]/0x2+this['padding'],_0x2c30ab['x']=_0x4c9e46['x'],_0x2c30ab['y']=_0x4c9e46['y'],this['_damageContainer'][_0xe88394(0x304)](_0x2c30ab);},Window_BattleStatus['prototype'][_0x2d1202(0x52a)]=function(_0x3c293b){const _0x3bf0eb=_0x2d1202;if(!this[_0x3bf0eb(0x2e9)])return;if(!_0x3c293b)return;this[_0x3bf0eb(0x2e9)][_0x3bf0eb(0x426)](_0x3c293b);},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x517)]=function(){const _0x1677e7=_0x2d1202;if(!this[_0x1677e7(0xb7c)]())return;if(!this[_0x1677e7(0xbab)])this[_0x1677e7(0x4be)]();this[_0x1677e7(0x5f9)](),this[_0x1677e7(0x965)]();},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0xb7c)]=function(){const _0x3d58cb=_0x2d1202;if(this[_0x3d58cb(0x276)]!==Window_BattleStatus)return![];if(!SceneManager[_0x3d58cb(0x346)]())return![];return VisuMZ[_0x3d58cb(0xa3c)][_0x3d58cb(0x6a1)]['BattleLayout'][_0x3d58cb(0x9ff)];},Window_BattleStatus['prototype']['createBorderStylePortraitSprite']=function(){const _0x28e531=_0x2d1202;this[_0x28e531(0xbab)]=new Sprite();const _0x55daa4=SceneManager[_0x28e531(0xb69)],_0x56946e=_0x55daa4[_0x28e531(0x5cd)]['indexOf'](_0x55daa4[_0x28e531(0x454)]);_0x55daa4[_0x28e531(0xa14)](this[_0x28e531(0xbab)],_0x56946e),this[_0x28e531(0xbab)][_0x28e531(0x5e0)]['x']=0.5,this[_0x28e531(0xbab)][_0x28e531(0x5e0)]['y']=0x1;const _0x1642b8=VisuMZ['BattleCore']['Settings'][_0x28e531(0xbd5)][_0x28e531(0xbbd)];this[_0x28e531(0xbab)][_0x28e531(0x1de)]['x']=_0x1642b8,this[_0x28e531(0xbab)][_0x28e531(0x1de)]['y']=_0x1642b8,this['_borderPortraitSprite']['y']=this['y']+this[_0x28e531(0x940)],this[_0x28e531(0x7d4)]=0x0;},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x5f9)]=function(){const _0x365c90=_0x2d1202;this['_borderPortraitSprite'][_0x365c90(0x3ef)]=BattleManager[_0x365c90(0x78d)]();const _0x5a86b6=BattleManager[_0x365c90(0x832)]();if(_0x5a86b6===this['_borderPortraitSprite'][_0x365c90(0x832)])return;this['_borderPortraitSprite'][_0x365c90(0x832)]=_0x5a86b6||this[_0x365c90(0xbab)][_0x365c90(0x832)];if(!_0x5a86b6)return;else{if(_0x5a86b6['getBattlePortraitFilename']()===''){if(_0x365c90(0x274)!==_0x365c90(0x274))return!![];else{this['_borderPortraitSprite'][_0x365c90(0x834)]=ImageManager[_0x365c90(0xb1c)];return;}}else{const _0x1647b4=ImageManager[_0x365c90(0x546)](_0x5a86b6['getBattlePortraitFilename']());_0x1647b4[_0x365c90(0x65a)](this[_0x365c90(0x8de)][_0x365c90(0x937)](this,_0x1647b4));}}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x8de)]=function(_0x2ec448){const _0x2e930f=_0x2d1202;this[_0x2e930f(0x7d4)]=0x14,this[_0x2e930f(0xbab)][_0x2e930f(0x834)]=_0x2ec448;SceneManager['_scene'][_0x2e930f(0x93a)]()?(this[_0x2e930f(0xbab)]['x']=0x0,this['_borderPortraitTargetX']=Math[_0x2e930f(0xb26)](_0x2ec448[_0x2e930f(0x72b)]/0x2)):_0x2e930f(0x6a9)===_0x2e930f(0x6a9)?(this[_0x2e930f(0xbab)]['x']=this[_0x2e930f(0x72b)],this['_borderPortraitTargetX']=this[_0x2e930f(0x72b)]*0x3/0x4):(this[_0x2e930f(0x746)]=new _0x13bc48(_0x2143c2),this['attachSpritesToDistortionSprite']());this[_0x2e930f(0xbab)][_0x2e930f(0xad4)]=0x0,this[_0x2e930f(0xbab)]['y']=this['y']+this['height'];const _0xa9efd1=BattleManager[_0x2e930f(0x832)]();if(_0xa9efd1){if('Ejcny'===_0x2e930f(0xbce)){if(this[_0x2e930f(0x276)]!==_0x44c373)return![];if(!_0x5dce47[_0x2e930f(0x346)]())return![];return _0x169be6[_0x2e930f(0xa3c)][_0x2e930f(0x6a1)][_0x2e930f(0xbd5)][_0x2e930f(0x9ff)];}else this[_0x2e930f(0x524)]+=_0xa9efd1['getBattlePortraitOffsetX'](),this[_0x2e930f(0xbab)]['y']+=_0xa9efd1[_0x2e930f(0x30b)]();}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x965)]=function(){const _0x20ca4f=_0x2d1202;if(this[_0x20ca4f(0x7d4)]>0x0){if('yMEbe'!==_0x20ca4f(0x3aa)){const _0x4b172e=this[_0x20ca4f(0x7d4)],_0x2a77de=this[_0x20ca4f(0xbab)];_0x2a77de['x']=(_0x2a77de['x']*(_0x4b172e-0x1)+this[_0x20ca4f(0x524)])/_0x4b172e,_0x2a77de[_0x20ca4f(0xad4)]=(_0x2a77de[_0x20ca4f(0xad4)]*(_0x4b172e-0x1)+0xff)/_0x4b172e,this[_0x20ca4f(0x7d4)]--;}else{const _0x211621=_0x10b144(_0x46dd0b['$1']);_0x211621!==_0x306aa7[_0x5246ea][_0x20ca4f(0x7f2)]&&(_0x36f0fd('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x20ca4f(0x995)](_0x1ec665,_0x211621)),_0x359801[_0x20ca4f(0xb3e)]());}}},Window_BattleStatus[_0x2d1202(0x8ec)][_0x2d1202(0x20e)]=function(){const _0x16de2a=_0x2d1202;return;this[_0x16de2a(0x8f9)]&&(this[_0x16de2a(0x8f9)]['x']=this['x'],this[_0x16de2a(0x8f9)]['y']=this['y']),this[_0x16de2a(0x2e9)]&&(_0x16de2a(0xb55)===_0x16de2a(0xb55)?(this[_0x16de2a(0x2e9)]['x']=this['x'],this[_0x16de2a(0x2e9)]['y']=this['y']):(this[_0x16de2a(0x5a3)]=new _0x26088c(),this[_0x16de2a(0x5a3)][_0x16de2a(0x5e0)]['x']=0.5,this[_0x16de2a(0x5a3)][_0x16de2a(0x5e0)]['y']=0.5,this['addChild'](this[_0x16de2a(0x5a3)])));},Window_BattleStatus['prototype'][_0x2d1202(0xb89)]=function(){const _0x19f598=_0x2d1202,_0x587916=VisuMZ[_0x19f598(0xa3c)][_0x19f598(0x6a1)][_0x19f598(0xbd5)];if(_0x587916[_0x19f598(0x8d8)]){const _0x532ca0=new Sprite();_0x532ca0['bitmap']=ImageManager[_0x19f598(0x690)](_0x587916['StatusWindowAttachmentBack']),_0x532ca0['x']=_0x587916[_0x19f598(0x591)]||0x0,_0x532ca0['y']=_0x587916[_0x19f598(0x264)]||0x0,this['addChildToBack'](_0x532ca0),this['_backAttachmentSprite']=_0x532ca0;}if(_0x587916[_0x19f598(0xbd1)]){const _0x33a95a=new Sprite();_0x33a95a[_0x19f598(0x834)]=ImageManager['loadSystem'](_0x587916[_0x19f598(0xbd1)]),_0x33a95a['x']=_0x587916['StatusWindowAttachmentFrontOffsetX']||0x0,_0x33a95a['y']=_0x587916[_0x19f598(0xac1)]||0x0,this['addChild'](_0x33a95a),this[_0x19f598(0x919)]=_0x33a95a;}},Window_BattleStatus['prototype'][_0x2d1202(0xbac)]=function(){const _0x3c384f=_0x2d1202;this[_0x3c384f(0x919)]&&this[_0x3c384f(0x304)](this['_frontAttachmentSprite']);},Window_BattleActor['prototype'][_0x2d1202(0x21a)]=function(){const _0x18fc4e=_0x2d1202;return Window_BattleStatus[_0x18fc4e(0x8ec)][_0x18fc4e(0x21a)][_0x18fc4e(0x86c)](this)&&this[_0x18fc4e(0xbcb)]();},Window_BattleActor[_0x2d1202(0x8ec)][_0x2d1202(0xbcb)]=function(){const _0x3cfc50=_0x2d1202,_0x4b6ec7=BattleManager[_0x3cfc50(0x5ac)](),_0x288008=this[_0x3cfc50(0x832)](this[_0x3cfc50(0x8ee)]());if(!_0x4b6ec7)return!![];if(!_0x4b6ec7[_0x3cfc50(0x36f)]())return!![];const _0x5f5457=_0x4b6ec7[_0x3cfc50(0x36f)]()[_0x3cfc50(0x5fe)];if(_0x5f5457['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x288008===BattleManager['actor']())return![];}return!![];},VisuMZ['BattleCore'][_0x2d1202(0x5f8)]=Window_BattleEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)],Window_BattleEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)]=function(_0x2db2da){this['_lastEnemy']=null,VisuMZ['BattleCore']['Window_BattleEnemy_initialize']['call'](this,_0x2db2da);},Window_BattleEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x218)]=function(){const _0x3b4730=_0x2d1202;return this[_0x3b4730(0xb3d)]();},VisuMZ['BattleCore'][_0x2d1202(0x580)]=Window_BattleEnemy[_0x2d1202(0x8ec)][_0x2d1202(0xba5)],Window_BattleEnemy[_0x2d1202(0x8ec)][_0x2d1202(0xba5)]=function(){const _0x18e512=_0x2d1202;VisuMZ[_0x18e512(0xa3c)][_0x18e512(0x580)][_0x18e512(0x86c)](this),this['y']=Graphics['height']*0xa;},Window_BattleEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x44e)]=function(){const _0x246530=_0x2d1202;return $gameTroop[_0x246530(0x973)]()[_0x246530(0x9e9)](0x0);},Window_BattleEnemy[_0x2d1202(0x8ec)]['refresh']=function(){const _0x249d1f=_0x2d1202;this[_0x249d1f(0x2a1)]=this['validTargets'](),this[_0x249d1f(0x99c)](),Window_Selectable[_0x249d1f(0x8ec)][_0x249d1f(0x2bd)][_0x249d1f(0x86c)](this);},Window_BattleEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x99c)]=function(){const _0x7fbd4e=_0x2d1202;this['_enemies'][_0x7fbd4e(0xbbb)]((_0x27a2e3,_0x498e43)=>{const _0x3d4e4c=_0x7fbd4e;return _0x27a2e3['battler']()[_0x3d4e4c(0x99a)]===_0x498e43[_0x3d4e4c(0x22c)]()['_baseX']?_0x27a2e3[_0x3d4e4c(0x22c)]()[_0x3d4e4c(0x75a)]-_0x498e43['battler']()['_baseY']:_0x27a2e3[_0x3d4e4c(0x22c)]()[_0x3d4e4c(0x99a)]-_0x498e43[_0x3d4e4c(0x22c)]()[_0x3d4e4c(0x99a)];});if(SceneManager[_0x7fbd4e(0x52d)]()){if(_0x7fbd4e(0x452)!==_0x7fbd4e(0x63d))this[_0x7fbd4e(0x2a1)]['reverse']();else{if(_0x52ed51[_0x7fbd4e(0xa3c)][_0x7fbd4e(0x6a1)][_0x7fbd4e(0x540)][_0x7fbd4e(0xb6d)])return;this[_0x7fbd4e(0x88d)]=new _0x1a33bf(),this[_0x7fbd4e(0x75c)][_0x7fbd4e(0x304)](this[_0x7fbd4e(0x88d)]);for(const _0x335dd6 of this[_0x7fbd4e(0x6b5)]){const _0x323df7=new _0x5a190c();this['_enemyNameContainer']['addChild'](_0x323df7),_0x323df7[_0x7fbd4e(0x91e)](_0x335dd6);}}}},Window_BattleEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x707)]=function(){const _0x331969=_0x2d1202,_0x7625d5=VisuMZ[_0x331969(0xa3c)][_0x331969(0x6a1)][_0x331969(0x540)];if(_0x7625d5[_0x331969(0x2b6)])this[_0x331969(0x590)]();else{if(_0x331969(0x908)==='seRHX'){if(_0x5b3006){const _0x54e8d3=_0x326517['indexOf'](_0x4ec024);return _0x54e8d3>=0x0?[_0x40388a[_0x54e8d3+0x1]||_0x4b3f85]:[_0x5c386e];}}else this[_0x331969(0x79c)]();}},Window_BattleEnemy[_0x2d1202(0x8ec)][_0x2d1202(0x590)]=function(){const _0x4f6836=_0x2d1202;if(this['_lastEnemy']&&this['_enemies'][_0x4f6836(0x7c6)](this[_0x4f6836(0xa4b)])){const _0x32cc63=this[_0x4f6836(0x2a1)]['indexOf'](this[_0x4f6836(0xa4b)]);this[_0x4f6836(0x9b5)](_0x32cc63);}else this[_0x4f6836(0x79c)]();},Window_BattleEnemy[_0x2d1202(0x8ec)]['autoSelectPriority']=function(){const _0x1ade8e=_0x2d1202,_0x29326f=VisuMZ[_0x1ade8e(0xa3c)]['Settings'][_0x1ade8e(0x540)];let _0x4d4572=![];$gameSystem[_0x1ade8e(0x1fd)]()?_0x4d4572=_0x29326f['SideviewSelect']:_0x4d4572=_0x29326f[_0x1ade8e(0x8c1)],this[_0x1ade8e(0x9b5)](_0x4d4572?this[_0x1ade8e(0xb3d)]()-0x1:0x0);},Window_BattleEnemy[_0x2d1202(0x8ec)]['callOkHandler']=function(){const _0x53373f=_0x2d1202;Window_Selectable[_0x53373f(0x8ec)][_0x53373f(0xb22)][_0x53373f(0x86c)](this),this[_0x53373f(0xa4b)]=this[_0x53373f(0xae4)]();},Window_BattleItem[_0x2d1202(0x8ec)][_0x2d1202(0x7c6)]=function(_0x47e02f){if(!_0x47e02f)return![];return _0x47e02f['occasion']===0x0||_0x47e02f['occasion']===0x1;};function Window_AutoBattleCancel(){const _0xa15132=_0x2d1202;this[_0xa15132(0x3dd)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x2d1202(0xa15)](Window_Base[_0x2d1202(0x8ec)]),Window_AutoBattleCancel[_0x2d1202(0x8ec)][_0x2d1202(0x276)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x2d1202(0x8ec)]['initialize']=function(_0x64833a){const _0x147efe=_0x2d1202;Window_Base[_0x147efe(0x8ec)][_0x147efe(0x3dd)]['call'](this,_0x64833a),this[_0x147efe(0xba9)](this['bgType']()),this[_0x147efe(0x2bd)]();},Window_AutoBattleCancel['prototype'][_0x2d1202(0x837)]=function(){const _0x4701b8=_0x2d1202;return VisuMZ[_0x4701b8(0xa3c)]['Settings'][_0x4701b8(0x265)][_0x4701b8(0xaa9)];},Window_AutoBattleCancel[_0x2d1202(0x8ec)][_0x2d1202(0x2bd)]=function(){const _0x50bf9a=_0x2d1202;this[_0x50bf9a(0x73a)][_0x50bf9a(0x932)]();const _0x2fae95=VisuMZ[_0x50bf9a(0xa3c)]['Settings'][_0x50bf9a(0x265)][_0x50bf9a(0x5ae)],_0x5ef90f=_0x2fae95['format'](this['okButtonText'](),this[_0x50bf9a(0x63b)]()),_0xc56688=this[_0x50bf9a(0x446)](_0x5ef90f)['width'],_0x1b438d=Math['floor']((this[_0x50bf9a(0x5d6)]-_0xc56688)/0x2);this[_0x50bf9a(0xb6a)](_0x5ef90f,_0x1b438d,0x0,_0xc56688);},Window_AutoBattleCancel[_0x2d1202(0x8ec)][_0x2d1202(0x416)]=function(){const _0xd1e5f7=_0x2d1202;return Imported[_0xd1e5f7(0x9ef)]?TextManager['getInputButtonString']('ok'):VisuMZ[_0xd1e5f7(0xa3c)][_0xd1e5f7(0x6a1)]['AutoBattle'][_0xd1e5f7(0x89e)];},Window_AutoBattleCancel[_0x2d1202(0x8ec)]['cancelButtonText']=function(){const _0x10341f=_0x2d1202;if(Imported['VisuMZ_0_CoreEngine']){if(_0x10341f(0x4ad)===_0x10341f(0x4ad))return TextManager[_0x10341f(0x49f)](_0x10341f(0x41b));else this[_0x10341f(0xb1f)]=!![];}else return VisuMZ[_0x10341f(0xa3c)][_0x10341f(0x6a1)][_0x10341f(0x265)][_0x10341f(0xbb2)];},Window_AutoBattleCancel[_0x2d1202(0x8ec)]['update']=function(){const _0x369283=_0x2d1202;Window_Base[_0x369283(0x8ec)]['update']['call'](this),this['updateVisibility'](),this[_0x369283(0x9bf)]();},Window_AutoBattleCancel[_0x2d1202(0x8ec)][_0x2d1202(0x2a8)]=function(){const _0x5494fc=_0x2d1202;this[_0x5494fc(0x3ef)]=BattleManager[_0x5494fc(0xa84)];},Window_AutoBattleCancel[_0x2d1202(0x8ec)][_0x2d1202(0x9bf)]=function(){const _0x4589f3=_0x2d1202;if(!BattleManager[_0x4589f3(0xa84)])return;if(Input[_0x4589f3(0x27f)]('ok')||Input['isTriggered'](_0x4589f3(0x41b))||TouchInput[_0x4589f3(0x960)]()||TouchInput[_0x4589f3(0x626)]()){if(_0x4589f3(0x5e9)===_0x4589f3(0x9d2)){let _0xf8ab19=_0x3f7dba['BattleCore'][_0x4589f3(0xbd0)]['call'](this);return this[_0x4589f3(0xb98)]&&(_0xf8ab19*=this[_0x4589f3(0xb98)]()),_0x493b82['ceil'](_0xf8ab19);}else SoundManager[_0x4589f3(0xb4b)](),BattleManager['_autoBattle']=![],Input[_0x4589f3(0x932)](),TouchInput['clear']();}};function Window_EnemyName(){const _0x3c458a=_0x2d1202;this[_0x3c458a(0x3dd)](...arguments);}Window_EnemyName['prototype']=Object[_0x2d1202(0xa15)](Window_StatusBase[_0x2d1202(0x8ec)]),Window_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x276)]=Window_EnemyName,Window_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x3dd)]=function(_0xd59d9e){const _0x5617be=_0x2d1202;this[_0x5617be(0xa16)]=_0xd59d9e,this[_0x5617be(0x5d3)]='';const _0x4ab260=new Rectangle(0x0,0x0,Graphics[_0x5617be(0x203)],this[_0x5617be(0xb4a)]()*0x4);Window_StatusBase[_0x5617be(0x8ec)][_0x5617be(0x3dd)][_0x5617be(0x86c)](this,_0x4ab260),this[_0x5617be(0xba9)](0x2),this[_0x5617be(0xa86)]=0x0;},Window_EnemyName['prototype'][_0x2d1202(0x81b)]=function(){const _0x54f0e6=_0x2d1202;this[_0x54f0e6(0x895)]=0x0;},Window_EnemyName[_0x2d1202(0x8ec)]['enemy']=function(){const _0xb66359=_0x2d1202;return $gameTroop[_0xb66359(0x76c)]()[this[_0xb66359(0xa16)]];},Window_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x69e)]=function(){const _0x5a7821=_0x2d1202;Window_StatusBase[_0x5a7821(0x8ec)]['update'][_0x5a7821(0x86c)](this),this[_0x5a7821(0xae4)]()&&this[_0x5a7821(0xae4)]()[_0x5a7821(0x476)]()!==this[_0x5a7821(0x5d3)]&&(this[_0x5a7821(0x5d3)]=this[_0x5a7821(0xae4)]()['name'](),this[_0x5a7821(0x2bd)]()),this[_0x5a7821(0x444)](),this['updatePosition']();},Window_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x444)]=function(){const _0x540b12=_0x2d1202;if(!this[_0x540b12(0xae4)]()){if(this[_0x540b12(0xa86)]>0x0)this[_0x540b12(0xa86)]-=0x10;}else{if(this[_0x540b12(0xae4)]()[_0x540b12(0x7a6)]()){if(this[_0x540b12(0xa86)]>0x0)this[_0x540b12(0xa86)]-=0x10;}else{if(SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x540b12(0xb69)][_0x540b12(0x28d)][_0x540b12(0xa7c)]&&SceneManager[_0x540b12(0xb69)][_0x540b12(0x28d)][_0x540b12(0x2a1)][_0x540b12(0x7c6)](this[_0x540b12(0xae4)]())){if(_0x540b12(0x50f)!==_0x540b12(0x50f))this['_windowLayer']['x']=_0x32c814['width']*0xa,this[_0x540b12(0x454)]['y']=_0x1a8c43[_0x540b12(0x940)]*0xa;else{if(this[_0x540b12(0xa86)]<0xff)this['contentsOpacity']+=0x10;}}else this[_0x540b12(0xa86)]>0x0&&(this[_0x540b12(0xa86)]-=0x10);}}},Window_EnemyName[_0x2d1202(0x8ec)]['updatePosition']=function(){const _0x559903=_0x2d1202;if(!this[_0x559903(0xae4)]())return;if(SceneManager[_0x559903(0x52d)]()){if(_0x559903(0xaa5)!==_0x559903(0x77e))this['x']=Graphics[_0x559903(0x203)]-this[_0x559903(0xae4)]()[_0x559903(0x22c)]()[_0x559903(0x99a)];else return _0x4cf488[_0x559903(0x5a3)]?this[_0x559903(0x38b)](_0x1e0cd7):_0x417d87[_0x559903(0xa3c)]['Sprite_Animation_targetSpritePosition'][_0x559903(0x86c)](this,_0x3973e3);}else _0x559903(0x1cb)!==_0x559903(0x484)?this['x']=this[_0x559903(0xae4)]()[_0x559903(0x22c)]()[_0x559903(0x99a)]:_0x5ea227-=_0x46c920[_0x559903(0x668)]()/0x2;this['x']-=Math[_0x559903(0x4b4)](this[_0x559903(0x72b)]/0x2),this['y']=this[_0x559903(0xae4)]()[_0x559903(0x22c)]()[_0x559903(0x75a)]-Math[_0x559903(0x4b4)](this['lineHeight']()*1.5);const _0x3c4c4a=VisuMZ[_0x559903(0xa3c)][_0x559903(0x6a1)][_0x559903(0x540)];this['x']+=_0x3c4c4a[_0x559903(0x3a6)]||0x0,this['y']+=_0x3c4c4a[_0x559903(0x5da)]||0x0;},Window_EnemyName[_0x2d1202(0x8ec)][_0x2d1202(0x606)]=function(){const _0x18bb66=_0x2d1202;Window_Base[_0x18bb66(0x8ec)][_0x18bb66(0x606)]['call'](this),this[_0x18bb66(0x73a)][_0x18bb66(0x703)]=VisuMZ[_0x18bb66(0xa3c)][_0x18bb66(0x6a1)][_0x18bb66(0x540)]['NameFontSize'];},Window_EnemyName['prototype'][_0x2d1202(0x2bd)]=function(){const _0x38a746=_0x2d1202;Window_StatusBase[_0x38a746(0x8ec)][_0x38a746(0x2bd)][_0x38a746(0x86c)](this),this['contents'][_0x38a746(0x932)]();if(!this[_0x38a746(0xae4)]())return;this[_0x38a746(0x64a)]();},Window_EnemyName[_0x2d1202(0x8ec)]['drawEnemyName']=function(){const _0x457add=_0x2d1202;this[_0x457add(0x5d3)]=this[_0x457add(0xae4)]()[_0x457add(0x476)]();const _0xbfbcfa=this[_0x457add(0x446)](this[_0x457add(0x5d3)])['width'],_0x355183=Math[_0x457add(0x4b4)]((this[_0x457add(0x5d6)]-_0xbfbcfa)/0x2);this['drawTextEx'](this['_text'],_0x355183,0x0,_0xbfbcfa+0x8);},Window_BattleLog['prototype'][_0x2d1202(0x559)]=function(){const _0x48f0f1=_0x2d1202;return VisuMZ[_0x48f0f1(0xa3c)][_0x48f0f1(0x6a1)][_0x48f0f1(0xace)][_0x48f0f1(0x6b4)];},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x398)]=function(){const _0x303a32=_0x2d1202;return VisuMZ[_0x303a32(0xa3c)][_0x303a32(0x6a1)][_0x303a32(0xace)][_0x303a32(0x4bf)];},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x959)]=function(){const _0xc70377=_0x2d1202;return VisuMZ['BattleCore'][_0xc70377(0x6a1)][_0xc70377(0xace)]['BackColor'];},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x8e2)]=function(){return![];},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x5af)]=function(_0x19560,_0x44ce3e){const _0x312752=_0x2d1202;this['unshift'](_0x312752(0x8e9)),BattleManager[_0x312752(0x307)](_0x19560,_0x44ce3e),this[_0x312752(0xac7)]();},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x8e9)]=function(){const _0x93abf3=_0x2d1202;this[_0x93abf3(0xac7)]();},Window_BattleLog['prototype']['push']=function(_0x17ffc5){const _0x10879e=_0x2d1202,_0x4c0a98=Array[_0x10879e(0x8ec)][_0x10879e(0x9e9)][_0x10879e(0x86c)](arguments,0x1),_0x55b0ee={'name':_0x17ffc5,'params':_0x4c0a98},_0x331919=this[_0x10879e(0x400)][_0x10879e(0x64c)](_0x21626d=>_0x21626d[_0x10879e(0x476)])[_0x10879e(0x783)]('actionSplicePoint');_0x331919>=0x0?this['_methods'][_0x10879e(0x62f)](_0x331919,0x0,_0x55b0ee):_0x10879e(0x888)===_0x10879e(0x599)?_0x4d76a8[_0x10879e(0x8ec)][_0x10879e(0x3dd)][_0x10879e(0x86c)](this):this[_0x10879e(0x400)][_0x10879e(0x5c8)](_0x55b0ee);},Window_BattleLog['prototype'][_0x2d1202(0x95c)]=function(_0x1768ad){const _0x341714=_0x2d1202,_0x2d74c8=Array[_0x341714(0x8ec)]['slice'][_0x341714(0x86c)](arguments,0x1);this[_0x341714(0x400)][_0x341714(0x95c)]({'name':_0x1768ad,'params':_0x2d74c8});},Window_BattleLog[_0x2d1202(0x8ec)]['logActionList']=function(){const _0x126ad9=_0x2d1202;if(!$gameTemp[_0x126ad9(0x4ea)]())return;console[_0x126ad9(0x2da)](this[_0x126ad9(0x400)][_0x126ad9(0x64c)](_0x4bebfc=>_0x4bebfc['name'])[_0x126ad9(0x31c)]('\x0a'));},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x2b2)]=Window_BattleLog['prototype']['refresh'],Window_BattleLog['prototype'][_0x2d1202(0x2bd)]=function(){const _0x506800=_0x2d1202;this[_0x506800(0xb1f)]=!![];},VisuMZ[_0x2d1202(0xa3c)]['Window_BattleLog_update']=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x69e)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x69e)]=function(){const _0x1b6578=_0x2d1202;VisuMZ[_0x1b6578(0xa3c)][_0x1b6578(0x98b)]['call'](this);if(this['_requestRefresh'])this[_0x1b6578(0x1f0)]();},Window_BattleLog[_0x2d1202(0x8ec)]['processRefresh']=function(){const _0x428e89=_0x2d1202;this[_0x428e89(0xb1f)]=![],VisuMZ[_0x428e89(0xa3c)]['Window_BattleLog_refresh'][_0x428e89(0x86c)](this);},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0xb9e)]=function(_0x33a59a){const _0x31b080=_0x2d1202;let _0x134cbb=VisuMZ[_0x31b080(0xa3c)][_0x31b080(0x6a1)]['BattleLog']['TextAlign']['toLowerCase']()[_0x31b080(0x43b)](),_0x3b6ccb=this[_0x31b080(0xa82)][_0x33a59a];if(_0x3b6ccb[_0x31b080(0xaa0)](/<LEFT>/i))_0x134cbb=_0x31b080(0x548);else{if(_0x3b6ccb[_0x31b080(0xaa0)](/<CENTER>/i))_0x134cbb=_0x31b080(0x42b);else _0x3b6ccb[_0x31b080(0xaa0)](/<RIGHT>/i)&&('oynnY'!==_0x31b080(0xb71)?(_0x2b20e9['BattleCore'][_0x31b080(0x5a4)][_0x31b080(0x86c)](this),this[_0x31b080(0x9cf)]()):_0x134cbb=_0x31b080(0x9d8));}_0x3b6ccb=_0x3b6ccb[_0x31b080(0x586)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x3b6ccb=_0x3b6ccb['replace'](/\\I\[0\]/gi,'');const _0x39657a=this[_0x31b080(0xa08)](_0x33a59a);this['contents'][_0x31b080(0x7bb)](_0x39657a['x'],_0x39657a['y'],_0x39657a[_0x31b080(0x72b)],_0x39657a[_0x31b080(0x940)]);const _0x4fdc57=this[_0x31b080(0x446)](_0x3b6ccb)[_0x31b080(0x72b)];let _0xec57bb=_0x39657a['x'];if(_0x134cbb===_0x31b080(0x42b))_0xec57bb+=(_0x39657a['width']-_0x4fdc57)/0x2;else _0x134cbb===_0x31b080(0x9d8)&&(_0xec57bb+=_0x39657a[_0x31b080(0x72b)]-_0x4fdc57);this['drawTextEx'](_0x3b6ccb,_0xec57bb,_0x39657a['y'],_0x4fdc57+0x8);},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x4ed)]=function(_0x3607db){const _0x405e15=_0x2d1202;this[_0x405e15(0xa82)]['push'](_0x3607db),this[_0x405e15(0x2bd)](),this[_0x405e15(0xac7)]();},Window_BattleLog[_0x2d1202(0x8ec)]['updateWaitMode']=function(){const _0x590440=_0x2d1202;let _0x293678=![];switch(this[_0x590440(0xa2b)]){case _0x590440(0x730):_0x293678=this[_0x590440(0x3d2)]['isEffecting']();break;case _0x590440(0x352):_0x293678=this[_0x590440(0x3d2)][_0x590440(0x3e6)]();break;case _0x590440(0x9ee):_0x293678=this[_0x590440(0x3d2)][_0x590440(0x974)]();break;case _0x590440(0x437):_0x293678=this[_0x590440(0x3d2)][_0x590440(0x636)]();break;case _0x590440(0x4cb):_0x293678=this[_0x590440(0x3d2)][_0x590440(0x56b)]();break;case _0x590440(0xad4):_0x293678=this[_0x590440(0x3d2)][_0x590440(0x775)]();break;}return!_0x293678&&('YwQPg'!==_0x590440(0x833)?this[_0x590440(0xa2b)]='':this[_0x590440(0x5c7)](_0x3ddfe1,_0x54a16f,_0x2186ea)),_0x293678;},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x2aa)]=function(){const _0x372819=_0x2d1202;this[_0x372819(0x76a)](_0x372819(0x9ee));},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x47f)]=function(){const _0x39ea2f=_0x2d1202;this[_0x39ea2f(0x76a)](_0x39ea2f(0x437));},Window_BattleLog[_0x2d1202(0x8ec)]['waitForJump']=function(){const _0x557614=_0x2d1202;this[_0x557614(0x76a)](_0x557614(0x4cb));},Window_BattleLog[_0x2d1202(0x8ec)]['waitForOpacity']=function(){const _0x2b9505=_0x2d1202;this[_0x2b9505(0x76a)]('opacity');},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x4dc)]=function(){const _0x2ca6c3=_0x2d1202,_0x181a82=VisuMZ[_0x2ca6c3(0xa3c)]['Settings'][_0x2ca6c3(0xace)];if(!_0x181a82[_0x2ca6c3(0x37a)])return;this[_0x2ca6c3(0x5c8)](_0x2ca6c3(0x4ed),_0x181a82[_0x2ca6c3(0x777)]['format']($gameTroop['turnCount']())),this[_0x2ca6c3(0x5c8)](_0x2ca6c3(0x886),_0x181a82['StartTurnWait']),this[_0x2ca6c3(0x5c8)](_0x2ca6c3(0x932));},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x8bf)]=function(_0x28d6a3,_0x17b141,_0x3d255f){const _0x2e26d9=_0x2d1202;this['isCustomActionSequence'](_0x17b141)?BattleManager[_0x2e26d9(0x94c)]():this[_0x2e26d9(0x5c7)](_0x28d6a3,_0x17b141,_0x3d255f);},Window_BattleLog[_0x2d1202(0x8ec)]['isCustomActionSequence']=function(_0x30297e){const _0x4bb244=_0x2d1202;if(!SceneManager[_0x4bb244(0x346)]())return![];if(!_0x30297e)return![];if(!_0x30297e[_0x4bb244(0x36f)]())return![];if(_0x30297e['item']()['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x4bb244(0xaca)!==_0x4bb244(0x643))return!![];else this[_0x4bb244(0xbdb)]()[_0x4bb244(0x304)](_0x1478ed);}if(DataManager[_0x4bb244(0x52b)](_0x30297e[_0x4bb244(0x36f)]())){if('VnrSx'!==_0x4bb244(0xb27))return!![];else _0x2735cb['wtypeId']=_0x3baf91['getWtypeIdWithName'](_0x5715a9['$1']);}return![];},Window_BattleLog['prototype']['usePremadeActionSequence']=function(_0x22b704,_0x2443b5,_0x1e50e2){const _0x587a01=_0x2d1202,_0x554f35=_0x2443b5[_0x587a01(0x36f)]();this[_0x587a01(0x840)](_0x22b704,_0x2443b5,_0x1e50e2),this['createEffectActionSet'](_0x22b704,_0x2443b5,_0x1e50e2),this[_0x587a01(0x582)](_0x22b704,_0x2443b5,_0x1e50e2);},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x949)]=function(_0x37eaca,_0x3133d7){const _0x5b8f0e=_0x2d1202,_0x3f812f=VisuMZ['BattleCore']['Settings'][_0x5b8f0e(0xace)];_0x3f812f[_0x5b8f0e(0x2bf)]&&this[_0x5b8f0e(0x5c8)](_0x5b8f0e(0x4ed),'<CENTER>%1'[_0x5b8f0e(0x995)](DataManager[_0x5b8f0e(0x504)](_0x3133d7)));if(DataManager[_0x5b8f0e(0x37e)](_0x3133d7)){if(_0x5b8f0e(0x3f1)!==_0x5b8f0e(0x3f1))_0x4018f6[_0x5b8f0e(0xa3c)][_0x5b8f0e(0x303)][_0x5b8f0e(0x86c)](this,_0x12cf8f);else{if(_0x3f812f[_0x5b8f0e(0x88f)])this[_0x5b8f0e(0x275)](_0x3133d7['message1'],_0x37eaca,_0x3133d7);if(_0x3f812f[_0x5b8f0e(0xa26)])this[_0x5b8f0e(0x275)](_0x3133d7['message2'],_0x37eaca,_0x3133d7);}}else{if(_0x3f812f[_0x5b8f0e(0x39f)])this[_0x5b8f0e(0x275)](TextManager[_0x5b8f0e(0x9a3)],_0x37eaca,_0x3133d7);}},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x840)]=function(_0xc6b314,_0x3bc571,_0x1025d6){const _0x1d71b2=_0x2d1202,_0x289d20=_0x3bc571[_0x1d71b2(0x36f)]();this['displayAction'](_0xc6b314,_0x289d20),this[_0x1d71b2(0x5c8)]('applyImmortal',_0xc6b314,_0x1025d6,!![]),this[_0x1d71b2(0x5c8)](_0x1d71b2(0xa42),_0xc6b314,_0x3bc571),this[_0x1d71b2(0x5c8)]('waitForMovement'),this['push'](_0x1d71b2(0x2cf),_0xc6b314,_0x3bc571),this[_0x1d71b2(0x5c8)](_0x1d71b2(0x2aa));},Window_BattleLog['prototype']['createEffectActionSet']=function(_0x30940e,_0x25d1e8,_0x55087d){const _0xf6d403=_0x2d1202;if(this[_0xf6d403(0x661)](_0x25d1e8))this[_0xf6d403(0x3c2)](_0x30940e,_0x25d1e8,_0x55087d);else{if(this[_0xf6d403(0x5b9)](_0x25d1e8))_0xf6d403(0x42c)!==_0xf6d403(0x42c)?(_0x557ca7['prototype']['initialize'][_0xf6d403(0x86c)](this,_0x282453),this[_0xf6d403(0x1de)]['x']=-0x1,this['_stateSprite'][_0xf6d403(0x1de)]['x']=-0x1):this[_0xf6d403(0x9a4)](_0x30940e,_0x25d1e8,_0x55087d);else{if(_0x25d1e8[_0xf6d403(0x9e2)]()){if('URWtx'==='mHdKy'){if(!_0x2baac1[_0xf6d403(0x346)]())return;if(!_0x4f92cc[_0xf6d403(0x297)])return;if(!_0x1dff35[_0xf6d403(0x4a4)]())return;_0x32809b[_0xf6d403(0x433)](_0x483b6f,_0x45b783);const _0x1dc830=_0xa2341[_0xf6d403(0x403)][_0xf6d403(0x30d)]();let _0x3f07db=_0x1a5ec6[_0xf6d403(0xbca)],_0x360509=_0x20d72a[_0xf6d403(0x9f8)];_0x1dc830[_0xf6d403(0x984)](_0x3f07db),_0x1dc830[_0xf6d403(0x4d9)](_0x360509);}else this[_0xf6d403(0x458)](_0x30940e,_0x25d1e8,_0x55087d);}else this[_0xf6d403(0x81e)](_0x30940e,_0x25d1e8,_0x55087d);}}},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x661)]=function(_0x569057){const _0x27dba1=_0x2d1202;if(!_0x569057[_0x27dba1(0x4ef)]())return![];if(!_0x569057[_0x27dba1(0xa88)]())return![];if(!_0x569057[_0x27dba1(0xaaa)]())return![];return VisuMZ[_0x27dba1(0xa3c)][_0x27dba1(0x6a1)][_0x27dba1(0xb3f)][_0x27dba1(0x630)];},Window_BattleLog['prototype'][_0x2d1202(0x3c2)]=function(_0x3735a8,_0x5986ce,_0x3c535d){const _0x370fc3=_0x2d1202,_0x519cf6=_0x3735a8['getAttackMotion']()[_0x370fc3(0x428)]<0x2,_0x8f2627=0x14,_0x3b5b21=0x30;if(_0x519cf6){if(_0x370fc3(0x387)===_0x370fc3(0x387))this[_0x370fc3(0x5c8)](_0x370fc3(0x820),[_0x3735a8],_0x3b5b21,_0x8f2627),this[_0x370fc3(0x5c8)](_0x370fc3(0x9fd),_0x3735a8,_0x3c535d,_0x370fc3(0x22e),_0x8f2627,!![],'Linear',!![]),this[_0x370fc3(0x5c8)]('requestMotion',[_0x3735a8],_0x370fc3(0x330)),this[_0x370fc3(0x5c8)](_0x370fc3(0x2be));else return _0x3e7643[_0x370fc3(0x30d)]()[_0x370fc3(0x973)]();}let _0x87bb04=_0x5986ce['isAttack']()?this[_0x370fc3(0x501)](_0x3735a8):0x1;for(let _0x24a3e3=0x0;_0x24a3e3<_0x87bb04;_0x24a3e3++){if('jcDKh'!==_0x370fc3(0x659)){this[_0x370fc3(0x4a1)](_0x370fc3(0x6cf));const _0x4fecee=this[_0x370fc3(0xb43)];_0x5d6877[_0x370fc3(0xa3c)][_0x370fc3(0x27b)][_0x370fc3(0x86c)](this),this[_0x370fc3(0xb43)]=_0x4fecee+_0x550522[_0x370fc3(0xa3c)]['Settings']['Mechanics'][_0x370fc3(0x770)][_0x370fc3(0x86c)](this),this[_0x370fc3(0xa22)]('EscapeFail');}else{if(_0x5986ce[_0x370fc3(0x7b6)]()&&_0x3735a8[_0x370fc3(0xb90)]()){if('WgidA'==='TTpmr')return this['_skewDuration']>0x0;else this['push'](_0x370fc3(0x3c3),_0x3735a8,_0x24a3e3);}if(_0x5986ce['item']()[_0x370fc3(0x836)]<0x0){if(_0x370fc3(0x326)===_0x370fc3(0x326))this[_0x370fc3(0x458)](_0x3735a8,_0x5986ce,_0x3c535d);else{if(!_0x15520e[_0x370fc3(0x75d)])return;const _0x464680=_0x27e94[_0x370fc3(0xb69)][_0x370fc3(0x3d2)];if(!_0x464680)return;_0x1c65af['ConvertParams'](_0x1416e4,_0x26d7b6);const _0x497d1a=_0x199011['X']||0x0,_0x45ec62=_0x49c0de['Y']||0x0,_0x9d45b4=_0x4fd718['Amp']||0x0,_0x3e6091=_0xe66367[_0x370fc3(0x3bd)]||0x0,_0x3015ca=_0x8097b[_0x370fc3(0x86e)]||0x1;_0x464680['setupShockwaveImpactFilter'](_0x497d1a,_0x45ec62,_0x9d45b4,_0x3e6091,_0x3015ca);}}else this[_0x370fc3(0x81e)](_0x3735a8,_0x5986ce,_0x3c535d);}}_0x5986ce['isAttack']()&&_0x3735a8['isActor']()&&(_0x370fc3(0x473)==='OkbVs'?this[_0x370fc3(0x4e1)](!![]):this[_0x370fc3(0x5c8)](_0x370fc3(0x4a3),_0x3735a8));this[_0x370fc3(0x5c8)]('applyImmortal',_0x3735a8,_0x3c535d,![]);if(_0x519cf6){const _0x273eac=_0x3735a8[_0x370fc3(0x22c)]();this[_0x370fc3(0x5c8)](_0x370fc3(0x820),[_0x3735a8],_0x3b5b21,_0x8f2627),this[_0x370fc3(0x5c8)]('performMoveToPoint',_0x3735a8,_0x273eac[_0x370fc3(0xb08)],_0x273eac['_homeY'],_0x8f2627,![],'Linear'),this['push'](_0x370fc3(0xa73),[_0x3735a8],_0x370fc3(0x5c0)),this[_0x370fc3(0x5c8)](_0x370fc3(0x2be)),this[_0x370fc3(0x5c8)](_0x370fc3(0xa73),[_0x3735a8],'walk');}},Window_BattleLog['prototype'][_0x2d1202(0x5b9)]=function(_0x2ce03c){const _0x5e7bf9=_0x2d1202;if(!_0x2ce03c['isPhysical']())return![];if(!_0x2ce03c['isForAll']())return![];if(!_0x2ce03c[_0x5e7bf9(0xaaa)]())return![];return VisuMZ[_0x5e7bf9(0xa3c)][_0x5e7bf9(0x6a1)][_0x5e7bf9(0xb3f)][_0x5e7bf9(0x921)];},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x9a4)]=function(_0x876848,_0xc3ad51,_0x1b8327){const _0x3dc0f1=_0x2d1202,_0x332a86=_0x876848['getAttackMotion']()[_0x3dc0f1(0x428)]<0x2,_0x28ef76=0x14,_0x207e19=0x30;_0x332a86&&(this['push']('performJump',[_0x876848],_0x207e19,_0x28ef76),this['push'](_0x3dc0f1(0x9fd),_0x876848,_0x1b8327,_0x3dc0f1(0xad9),_0x28ef76,!![],'Linear',!![]),this[_0x3dc0f1(0x5c8)](_0x3dc0f1(0xa73),[_0x876848],_0x3dc0f1(0x330)),this[_0x3dc0f1(0x5c8)](_0x3dc0f1(0x2be)));let _0x366dd7=_0xc3ad51[_0x3dc0f1(0x7b6)]()?this[_0x3dc0f1(0x501)](_0x876848):0x1;for(let _0x56422d=0x0;_0x56422d<_0x366dd7;_0x56422d++){'GOoSY'===_0x3dc0f1(0x3f4)?_0x50d4ef[_0x3dc0f1(0x768)]()?(this['tpbCommandFight'](),this['startActorCommandSelection']()):_0x1bb2fd['BattleCore'][_0x3dc0f1(0x81f)]['call'](this):(_0xc3ad51[_0x3dc0f1(0x7b6)]()&&_0x876848[_0x3dc0f1(0xb90)]()&&this['push'](_0x3dc0f1(0x3c3),_0x876848,_0x56422d),this[_0x3dc0f1(0x81e)](_0x876848,_0xc3ad51,_0x1b8327));}_0xc3ad51['isAttack']()&&_0x876848[_0x3dc0f1(0xb90)]()&&this[_0x3dc0f1(0x5c8)](_0x3dc0f1(0x4a3),_0x876848);this[_0x3dc0f1(0x5c8)](_0x3dc0f1(0xb2e),_0x876848,_0x1b8327,![]);if(_0x332a86){if(_0x3dc0f1(0x306)!==_0x3dc0f1(0x306)){if(_0x2faa3c['VisuMZ_2_BattleSystemCTB']&&_0x426160[_0x3dc0f1(0xba7)]())return![];else{if(!_0x267482['BattleCore'][_0x3dc0f1(0x2d4)])return![];const _0x2b2457=_0x9aa7fc[_0x3dc0f1(0x973)]()[_0x3dc0f1(0xb5f)](_0x2cdfc8=>_0x2cdfc8[_0x3dc0f1(0x217)]()&&_0x2cdfc8[_0x3dc0f1(0xa24)]());return _0x2b2457[_0x3dc0f1(0x1d7)]>0x0&&_0x2fe022['actor']()!==_0x2b2457[_0x2b2457[_0x3dc0f1(0x1d7)]-0x1];}}else{const _0x4e57ae=_0x876848['battler']();this['push'](_0x3dc0f1(0x820),[_0x876848],_0x207e19,_0x28ef76),this[_0x3dc0f1(0x5c8)]('performMoveToPoint',_0x876848,_0x4e57ae[_0x3dc0f1(0xb08)],_0x4e57ae['_homeY'],_0x28ef76,![],_0x3dc0f1(0x9d0)),this[_0x3dc0f1(0x5c8)](_0x3dc0f1(0xa73),[_0x876848],_0x3dc0f1(0x5c0)),this['push'](_0x3dc0f1(0x2be)),this[_0x3dc0f1(0x5c8)](_0x3dc0f1(0xa73),[_0x876848],'walk');}}},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x458)]=function(_0x425eb0,_0x2b6e0a,_0x356942){const _0x41db2f=_0x2d1202,_0x15c6df=_0x2b6e0a[_0x41db2f(0x36f)]();for(const _0x31b1de of _0x356942){if(!_0x31b1de)continue;this[_0x41db2f(0x5c8)](_0x41db2f(0x2b3),_0x425eb0,_0x2b6e0a),this[_0x41db2f(0x5c8)]('waitCount',Sprite_Battler[_0x41db2f(0xb0a)]),this[_0x41db2f(0x5c8)](_0x41db2f(0x698),_0x425eb0,[_0x31b1de],_0x15c6df[_0x41db2f(0x836)]),this['push'](_0x41db2f(0x886),0x18),this[_0x41db2f(0x5c8)](_0x41db2f(0x5af),_0x425eb0,_0x31b1de);}},Window_BattleLog['prototype'][_0x2d1202(0x81e)]=function(_0x52a08e,_0x4d7a10,_0x4f0a08){const _0x5a0146=_0x2d1202,_0x46068f=_0x4d7a10[_0x5a0146(0x36f)]();this[_0x5a0146(0x5c8)]('performAction',_0x52a08e,_0x4d7a10),this[_0x5a0146(0x5c8)](_0x5a0146(0x886),Sprite_Battler[_0x5a0146(0xb0a)]),this[_0x5a0146(0x5c8)](_0x5a0146(0x698),_0x52a08e,_0x4f0a08[_0x5a0146(0xb15)](),_0x46068f[_0x5a0146(0x836)]),this[_0x5a0146(0x5c8)](_0x5a0146(0x2aa));for(const _0x16f6b8 of _0x4f0a08){if(!_0x16f6b8)continue;this[_0x5a0146(0x5c8)](_0x5a0146(0x5af),_0x52a08e,_0x16f6b8);}},Window_BattleLog[_0x2d1202(0x8ec)]['finishActionSet']=function(_0x3e8a1a,_0x51e000,_0x23f992){const _0x204cb1=_0x2d1202,_0x444142=_0x51e000['item']();this['push'](_0x204cb1(0xb2e),_0x3e8a1a,_0x23f992,![]),this[_0x204cb1(0x5c8)](_0x204cb1(0x467)),this['push'](_0x204cb1(0x394)),this[_0x204cb1(0x5c8)](_0x204cb1(0x932)),this[_0x204cb1(0x5c8)]('performActionEnd',_0x3e8a1a),this[_0x204cb1(0x5c8)](_0x204cb1(0x2be));},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x824)]=function(_0x42961d){},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x642)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x706)],Window_BattleLog['prototype']['displayCurrentState']=function(_0x3c9996){const _0x3293b9=_0x2d1202;if(!VisuMZ[_0x3293b9(0xa3c)][_0x3293b9(0x6a1)][_0x3293b9(0xace)][_0x3293b9(0x929)])return;VisuMZ[_0x3293b9(0xa3c)][_0x3293b9(0x642)]['call'](this,_0x3c9996);},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x945)]=function(_0xa36ed0){const _0x228564=_0x2d1202;this[_0x228564(0x5c8)](_0x228564(0x371),_0xa36ed0);VisuMZ[_0x228564(0xa3c)][_0x228564(0x6a1)][_0x228564(0xb3f)][_0x228564(0x41d)]&&this[_0x228564(0x5c8)](_0x228564(0x698),_0xa36ed0,[BattleManager[_0x228564(0x403)]],-0x1);if(!VisuMZ['BattleCore'][_0x228564(0x6a1)]['BattleLog'][_0x228564(0x2e1)])return;this['push']('addText',TextManager[_0x228564(0xb74)][_0x228564(0x995)](_0xa36ed0[_0x228564(0x476)]()));},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x899)]=function(_0x1b6239){const _0x3f45ff=_0x2d1202;this['push'](_0x3f45ff(0x6bc),_0x1b6239);if(!VisuMZ[_0x3f45ff(0xa3c)]['Settings'][_0x3f45ff(0xace)]['ShowReflect'])return;this['push'](_0x3f45ff(0x4ed),TextManager[_0x3f45ff(0x358)][_0x3f45ff(0x995)](_0x1b6239['name']()));},Window_BattleLog['prototype'][_0x2d1202(0x32f)]=function(_0x1707d6,_0x2f36bc){const _0x529910=_0x2d1202;if(VisuMZ['BattleCore'][_0x529910(0x6a1)][_0x529910(0xb3f)][_0x529910(0x4df)]){const _0x39c5d6=_0x2f36bc[_0x529910(0x36f)]();this[_0x529910(0x5c8)]('showAnimation',_0x1707d6,[_0x1707d6],_0x39c5d6[_0x529910(0x836)]);}},Window_BattleLog['prototype'][_0x2d1202(0x608)]=function(_0x4111f2,_0x20599b){const _0x5b834f=_0x2d1202;this[_0x5b834f(0x5c8)](_0x5b834f(0x9c2),_0x4111f2,_0x20599b);if(!VisuMZ[_0x5b834f(0xa3c)][_0x5b834f(0x6a1)][_0x5b834f(0xace)]['ShowSubstitute'])return;const _0x3f688b=_0x4111f2[_0x5b834f(0x476)](),_0x4a2d18=TextManager[_0x5b834f(0x475)][_0x5b834f(0x995)](_0x3f688b,_0x20599b[_0x5b834f(0x476)]());this[_0x5b834f(0x5c8)]('addText',_0x4a2d18);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xa3b)]=Window_BattleLog['prototype'][_0x2d1202(0x681)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x681)]=function(_0x577a2d){const _0x2fb6d8=_0x2d1202;if(!VisuMZ[_0x2fb6d8(0xa3c)][_0x2fb6d8(0x6a1)]['BattleLog'][_0x2fb6d8(0x1f2)])return;VisuMZ[_0x2fb6d8(0xa3c)][_0x2fb6d8(0xa3b)][_0x2fb6d8(0x86c)](this,_0x577a2d);},VisuMZ['BattleCore'][_0x2d1202(0x6c8)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x66f)],Window_BattleLog['prototype']['displayCritical']=function(_0x3a0f96){const _0xe692e0=_0x2d1202;if(!VisuMZ[_0xe692e0(0xa3c)][_0xe692e0(0x6a1)][_0xe692e0(0xace)][_0xe692e0(0x478)])return;VisuMZ[_0xe692e0(0xa3c)]['Window_BattleLog_displayCritical'][_0xe692e0(0x86c)](this,_0x3a0f96);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x2cc)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x1f6)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x1f6)]=function(_0x2f1ae2){const _0x210df5=_0x2d1202;!VisuMZ[_0x210df5(0xa3c)]['Settings'][_0x210df5(0xace)][_0x210df5(0x6cc)]?this[_0x210df5(0x5c8)](_0x210df5(0x639),_0x2f1ae2):VisuMZ[_0x210df5(0xa3c)][_0x210df5(0x2cc)][_0x210df5(0x86c)](this,_0x2f1ae2);},VisuMZ[_0x2d1202(0xa3c)]['Window_BattleLog_displayEvasion']=Window_BattleLog['prototype']['displayEvasion'],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x6a5)]=function(_0x54315e){const _0x278de5=_0x2d1202;if(!VisuMZ[_0x278de5(0xa3c)][_0x278de5(0x6a1)]['BattleLog'][_0x278de5(0x6cc)])_0x54315e['result']()[_0x278de5(0x829)]?this[_0x278de5(0x5c8)]('performEvasion',_0x54315e):this[_0x278de5(0x5c8)](_0x278de5(0x58f),_0x54315e);else{if(_0x278de5(0x942)!==_0x278de5(0x3f8))VisuMZ[_0x278de5(0xa3c)]['Window_BattleLog_displayEvasion'][_0x278de5(0x86c)](this,_0x54315e);else{let _0x5ab1b3=_0x13d5af[_0x278de5(0x57c)](_0xd5a4a5[_0x278de5(0x798)]);_0x422f55['hpDamage']<0x0&&(_0x5ab1b3+=_0x1d97d9[_0x278de5(0x4d4)](_0x3f407b[_0x278de5(0x206)])),_0x3800ce[_0x278de5(0x4d7)](_0x4eed9c[_0x278de5(0x798)],_0x5ab1b3);}}},Window_BattleLog['prototype'][_0x2d1202(0x97b)]=function(_0x3c4ce2){const _0x8f2297=_0x2d1202;if(_0x3c4ce2[_0x8f2297(0x9b9)]()['hpAffected']){_0x3c4ce2['result']()[_0x8f2297(0x206)]>0x0&&!_0x3c4ce2['result']()[_0x8f2297(0x9bc)]&&this[_0x8f2297(0x5c8)](_0x8f2297(0x9a5),_0x3c4ce2);if(_0x3c4ce2['result']()['hpDamage']<0x0){if('XrawL'!=='XrawL'){const _0x55558a=_0x4c73be['note'];if(_0x55558a[_0x8f2297(0xaa0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x87b1da(_0x519237['$1'])*0.01;else{if(_0x55558a[_0x8f2297(0xaa0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x53f33f(_0x27a69f['$1'])||0x0;}}else this[_0x8f2297(0x5c8)](_0x8f2297(0x61c),_0x3c4ce2);}VisuMZ[_0x8f2297(0xa3c)]['Settings'][_0x8f2297(0xace)][_0x8f2297(0x685)]&&this['push'](_0x8f2297(0x4ed),this['makeHpDamageText'](_0x3c4ce2));}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x5ca)]=Window_BattleLog['prototype'][_0x2d1202(0x5ef)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x5ef)]=function(_0x1764a2){const _0x54ced1=_0x2d1202;if(!VisuMZ[_0x54ced1(0xa3c)][_0x54ced1(0x6a1)][_0x54ced1(0xace)][_0x54ced1(0x8ac)])return;VisuMZ[_0x54ced1(0xa3c)][_0x54ced1(0x5ca)][_0x54ced1(0x86c)](this,_0x1764a2);},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xbc8)]=Window_BattleLog['prototype']['displayTpDamage'],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0xa5e)]=function(_0x5a4c67){const _0x1d9fa8=_0x2d1202;if(!VisuMZ[_0x1d9fa8(0xa3c)][_0x1d9fa8(0x6a1)][_0x1d9fa8(0xace)]['ShowTpDmg'])return;VisuMZ[_0x1d9fa8(0xa3c)][_0x1d9fa8(0xbc8)][_0x1d9fa8(0x86c)](this,_0x5a4c67);},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x94d)]=function(_0x1c94c0){const _0x537be2=_0x2d1202,_0x124798=_0x1c94c0[_0x537be2(0x9b9)](),_0x8ed4ef=_0x124798['addedStateObjects']();for(const _0x4cfe8a of _0x8ed4ef){const _0x2845ee=_0x1c94c0['isActor']()?_0x4cfe8a['message1']:_0x4cfe8a['message2'];_0x2845ee&&VisuMZ[_0x537be2(0xa3c)]['Settings'][_0x537be2(0xace)][_0x537be2(0x6e7)]&&(this['push'](_0x537be2(0x6af)),this[_0x537be2(0x5c8)](_0x537be2(0x4bc)),this[_0x537be2(0x5c8)](_0x537be2(0x4ed),_0x2845ee[_0x537be2(0x995)](_0x1c94c0['name']())),this['push'](_0x537be2(0x251))),_0x4cfe8a['id']===_0x1c94c0[_0x537be2(0x803)]()&&this[_0x537be2(0x5c8)](_0x537be2(0xb8c),_0x1c94c0);}},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x213)]=function(_0x1c77dd){const _0x4f2ea1=_0x2d1202;if(!VisuMZ['BattleCore'][_0x4f2ea1(0x6a1)][_0x4f2ea1(0xace)][_0x4f2ea1(0x4f3)])return;const _0x305258=_0x1c77dd[_0x4f2ea1(0x9b9)](),_0x4332aa=_0x305258['removedStateObjects']();for(const _0x57a888 of _0x4332aa){if(_0x57a888['message4']){if(_0x4f2ea1(0xa11)!==_0x4f2ea1(0xa11))return _0xe4f93['BattleCore'][_0x4f2ea1(0x6a1)][_0x4f2ea1(0xace)][_0x4f2ea1(0xba8)];else this[_0x4f2ea1(0x5c8)](_0x4f2ea1(0x6af)),this['push']('pushBaseLine'),this['push'](_0x4f2ea1(0x4ed),_0x57a888[_0x4f2ea1(0x472)][_0x4f2ea1(0x995)](_0x1c77dd[_0x4f2ea1(0x476)]())),this[_0x4f2ea1(0x5c8)](_0x4f2ea1(0x251));}}},Window_BattleLog['prototype'][_0x2d1202(0x674)]=function(_0x4042e7){const _0x3abd03=_0x2d1202,_0x221408=VisuMZ[_0x3abd03(0xa3c)]['Settings'][_0x3abd03(0xace)],_0x46ef99=_0x4042e7[_0x3abd03(0x9b9)]();if(_0x221408['ShowAddedBuff'])this['displayBuffs'](_0x4042e7,_0x46ef99[_0x3abd03(0x6f8)],TextManager[_0x3abd03(0x6dc)]);if(_0x221408[_0x3abd03(0x522)])this[_0x3abd03(0x943)](_0x4042e7,_0x46ef99[_0x3abd03(0xa31)],TextManager[_0x3abd03(0x45e)]);if(_0x221408[_0x3abd03(0x9b4)])this['displayBuffs'](_0x4042e7,_0x46ef99[_0x3abd03(0x58a)],TextManager[_0x3abd03(0xa8e)]);},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x943)]=function(_0x48947d,_0x13872a,_0x3615d9){const _0x4d43f0=_0x2d1202;for(const _0x5eb2dd of _0x13872a){if(_0x4d43f0(0x818)!=='SOXDA'){const _0x1b65a4=_0x3615d9[_0x4d43f0(0x995)](_0x48947d[_0x4d43f0(0x476)](),TextManager[_0x4d43f0(0xb2f)](_0x5eb2dd));this['push'](_0x4d43f0(0x6af)),this[_0x4d43f0(0x5c8)](_0x4d43f0(0x4bc)),this[_0x4d43f0(0x5c8)](_0x4d43f0(0x4ed),_0x1b65a4),this[_0x4d43f0(0x5c8)](_0x4d43f0(0x251));}else _0x9df1a6[_0x4d43f0(0x832)]()[_0x4d43f0(0x83b)](),_0x5c32c4[_0x4d43f0(0x90b)](),_0x2410e0[_0x4d43f0(0x1d1)](),this['changeInputWindow']();}},VisuMZ[_0x2d1202(0xa3c)]['Window_BattleLog_clear']=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x932)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x932)]=function(){const _0x2197af=_0x2d1202;VisuMZ['BattleCore'][_0x2197af(0x7b5)][_0x2197af(0x86c)](this),this['callNextMethod']();},VisuMZ[_0x2d1202(0xa3c)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x4bc)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x4bc)]=function(){const _0x4e9f08=_0x2d1202;VisuMZ[_0x4e9f08(0xa3c)][_0x4e9f08(0x6d8)][_0x4e9f08(0x86c)](this),this[_0x4e9f08(0xac7)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x45c)]=Window_BattleLog['prototype']['popBaseLine'],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x6af)]=function(){const _0x1bde94=_0x2d1202;VisuMZ[_0x1bde94(0xa3c)][_0x1bde94(0x45c)]['call'](this),this['refresh'](),this[_0x1bde94(0xac7)]();},VisuMZ['BattleCore'][_0x2d1202(0x3f7)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x91a)],Window_BattleLog[_0x2d1202(0x8ec)]['popupDamage']=function(_0x1cf791){const _0x55d5d5=_0x2d1202;VisuMZ[_0x55d5d5(0xa3c)][_0x55d5d5(0x3f7)][_0x55d5d5(0x86c)](this,_0x1cf791),this[_0x55d5d5(0xac7)]();},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x467)]=function(){const _0x251532=_0x2d1202;let _0x471771=0x0;this[_0x251532(0x927)][_0x251532(0x1d7)]>0x0&&('vOBlq'!==_0x251532(0x270)?_0x471771=this[_0x251532(0x927)][this[_0x251532(0x927)][_0x251532(0x1d7)]-0x1]:(_0x1825bb[_0x251532(0xa3c)][_0x251532(0x496)]&&_0x100780[_0x251532(0xa3c)][_0x251532(0x496)]['call'](this,_0x5a5149),_0x165d57['BattleCore'][_0x251532(0x512)](_0x545637)));if(this['_lines'][_0x251532(0x1d7)]>_0x471771)this[_0x251532(0x251)]();else{if(_0x251532(0x578)===_0x251532(0x954))return this[_0x251532(0x8dd)]()&&this[_0x251532(0x8dd)]()[_0x251532(0x36f)]()&&this[_0x251532(0x8dd)]()[_0x251532(0x830)]();else this[_0x251532(0xac7)]();}},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x5bc)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0xa42)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0xa42)]=function(_0x569ee1,_0x3346bf){const _0x2c36b6=_0x2d1202;VisuMZ[_0x2c36b6(0xa3c)][_0x2c36b6(0x5bc)]['call'](this,_0x569ee1,_0x3346bf),this['callNextMethod']();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x610)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x2b3)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x2b3)]=function(_0x5eea86,_0x48b0b4){const _0xb71094=_0x2d1202;VisuMZ[_0xb71094(0xa3c)][_0xb71094(0x610)][_0xb71094(0x86c)](this,_0x5eea86,_0x48b0b4),this[_0xb71094(0xac7)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x49a)]=Window_BattleLog['prototype']['performActionEnd'],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0xac2)]=function(_0x5c31d0){const _0x142650=_0x2d1202;VisuMZ[_0x142650(0xa3c)][_0x142650(0x49a)]['call'](this,_0x5c31d0);for(const _0x344075 of BattleManager[_0x142650(0x26c)]()){if(!_0x344075)continue;if(_0x344075[_0x142650(0x7a6)]())continue;_0x344075[_0x142650(0x313)]();}this[_0x142650(0xac7)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x8c7)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x9a5)],Window_BattleLog['prototype'][_0x2d1202(0x9a5)]=function(_0x27a411){const _0x43ab8f=_0x2d1202;VisuMZ[_0x43ab8f(0xa3c)][_0x43ab8f(0x8c7)][_0x43ab8f(0x86c)](this,_0x27a411),this[_0x43ab8f(0xac7)]();},VisuMZ[_0x2d1202(0xa3c)]['Window_BattleLog_performMiss']=Window_BattleLog[_0x2d1202(0x8ec)]['performMiss'],Window_BattleLog['prototype'][_0x2d1202(0x639)]=function(_0xd57328){const _0x4a0bff=_0x2d1202;VisuMZ[_0x4a0bff(0xa3c)]['Window_BattleLog_performMiss']['call'](this,_0xd57328),this['callNextMethod']();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x9ed)]=Window_BattleLog['prototype'][_0x2d1202(0x61c)],Window_BattleLog['prototype'][_0x2d1202(0x61c)]=function(_0xf0ef12){const _0x89e747=_0x2d1202;VisuMZ[_0x89e747(0xa3c)][_0x89e747(0x9ed)][_0x89e747(0x86c)](this,_0xf0ef12),this[_0x89e747(0xac7)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x2e3)]=Window_BattleLog['prototype'][_0x2d1202(0x939)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x939)]=function(_0x39b631){const _0x46a639=_0x2d1202;VisuMZ[_0x46a639(0xa3c)][_0x46a639(0x2e3)]['call'](this,_0x39b631),this['callNextMethod']();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0xbc4)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x58f)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x58f)]=function(_0x11c606){const _0x1bdd98=_0x2d1202;VisuMZ[_0x1bdd98(0xa3c)][_0x1bdd98(0xbc4)][_0x1bdd98(0x86c)](this,_0x11c606),this['callNextMethod']();},VisuMZ['BattleCore'][_0x2d1202(0x8c8)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x371)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x371)]=function(_0x38a9a9){const _0x4dd020=_0x2d1202;VisuMZ[_0x4dd020(0xa3c)][_0x4dd020(0x8c8)][_0x4dd020(0x86c)](this,_0x38a9a9),this[_0x4dd020(0xac7)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x1da)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x6bc)],Window_BattleLog['prototype'][_0x2d1202(0x6bc)]=function(_0x28eb6e){const _0x505c80=_0x2d1202;VisuMZ[_0x505c80(0xa3c)][_0x505c80(0x1da)]['call'](this,_0x28eb6e),this[_0x505c80(0xac7)]();},VisuMZ[_0x2d1202(0xa3c)][_0x2d1202(0x3b0)]=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x9c2)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x9c2)]=function(_0xb20f6f,_0x18a034){const _0x491b45=_0x2d1202;VisuMZ[_0x491b45(0xa3c)]['Window_BattleLog_performSubstitute'][_0x491b45(0x86c)](this,_0xb20f6f,_0x18a034),this[_0x491b45(0xac7)]();},VisuMZ[_0x2d1202(0xa3c)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0xb8c)],Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0xb8c)]=function(_0x3c150e){const _0x501e6d=_0x2d1202;VisuMZ[_0x501e6d(0xa3c)][_0x501e6d(0xb92)][_0x501e6d(0x86c)](this,_0x3c150e),this[_0x501e6d(0xac7)]();},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x2cf)]=function(_0x4705a2,_0x37184d){const _0x22ebe9=_0x2d1202;_0x4705a2[_0x22ebe9(0x2cf)](_0x37184d),this[_0x22ebe9(0xac7)]();},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x7cf)]=function(_0x41f351,_0x1fd120){const _0x1443c2=_0x2d1202,_0xe8f3a9=_0x41f351[_0x1443c2(0xb96)]();if(_0xe8f3a9<=0x0)SoundManager[_0x1443c2(0x214)]();else{if(_0x1443c2(0xb3b)===_0x1443c2(0x7aa)){if(_0x575274[_0x1443c2(0x99a)]>_0x32f75b)_0x184b89+=_0x2d8e7e[_0x1443c2(0x72b)]/0x2+_0x17139a;if(_0xbaa2f0[_0x1443c2(0x99a)]<_0x6e7134)_0x6a7182-=_0x506d42[_0x1443c2(0x72b)]/0x2+_0x249704;}else this[_0x1443c2(0x95f)](_0x1fd120,_0xe8f3a9);}},Window_BattleLog['prototype'][_0x2d1202(0xb2e)]=function(_0x2bd586,_0x4a3164,_0x71f78d){const _0x145151=_0x2d1202,_0x842bef=[_0x2bd586][_0x145151(0x8d2)](_0x4a3164);for(const _0x1493a3 of _0x842bef){if('BjFkG'===_0x145151(0x705)){if(!_0x1493a3)continue;_0x1493a3['setImmortal'](_0x71f78d);}else this[_0x145151(0x235)]=![],this['_autoBattle']=_0x19282d[_0x145151(0x294)],this[_0x145151(0x4a1)](_0x145151(0xbaa)),_0x5adeda['BattleCore']['BattleManager_startBattle'][_0x145151(0x86c)](this),this[_0x145151(0x4a1)](_0x145151(0x4c2));}this['callNextMethod']();},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x886)]=function(_0x5e980d){this['_waitCount']=_0x5e980d;},Window_BattleLog['prototype']['requestMotion']=function(_0x4ec78c,_0x12ee77){const _0xed2f23=_0x2d1202;for(const _0xd30675 of _0x4ec78c){if(_0xed2f23(0x24d)!==_0xed2f23(0x708)){if(!_0xd30675)continue;_0xd30675[_0xed2f23(0xa73)](_0x12ee77);}else this[_0xed2f23(0x63f)]=_0xed2f23(0x7d6);}this[_0xed2f23(0xac7)]();},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x78e)]=function(_0x4ecd22,_0x124628,_0x31aa25,_0x1c86ac,_0x52d2df,_0x281885){const _0xeb36a5=_0x2d1202;_0x4ecd22[_0xeb36a5(0x9be)](_0x124628,_0x31aa25,_0x1c86ac,_0x52d2df,_0x281885,-0x1),this[_0xeb36a5(0xac7)]();},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x9fd)]=function(_0x20405e,_0x382b7a,_0x31d140,_0x30250d,_0x236af4,_0x39a99d,_0x499a12){const _0x320fad=_0x2d1202,_0x556e4a=Math[_0x320fad(0x52e)](..._0x382b7a['map'](_0x2eee5b=>_0x2eee5b[_0x320fad(0x22c)]()[_0x320fad(0x99a)]-_0x2eee5b[_0x320fad(0x22c)]()[_0x320fad(0x81d)]()/0x2)),_0x32fa53=Math[_0x320fad(0x717)](..._0x382b7a[_0x320fad(0x64c)](_0x2d9778=>_0x2d9778[_0x320fad(0x22c)]()['_baseX']+_0x2d9778[_0x320fad(0x22c)]()[_0x320fad(0x81d)]()/0x2)),_0x1d5917=Math['min'](..._0x382b7a[_0x320fad(0x64c)](_0xc1da42=>_0xc1da42[_0x320fad(0x22c)]()[_0x320fad(0x75a)]-_0xc1da42[_0x320fad(0x22c)]()[_0x320fad(0x668)]())),_0x4c956a=Math[_0x320fad(0x717)](..._0x382b7a['map'](_0x24a958=>_0x24a958[_0x320fad(0x22c)]()['_baseY'])),_0x3e4372=_0x382b7a[_0x320fad(0xb5f)](_0x362c6d=>_0x362c6d[_0x320fad(0xb90)]())[_0x320fad(0x1d7)],_0x31a77d=_0x382b7a[_0x320fad(0xb5f)](_0x4877f3=>_0x4877f3['isEnemy']())['length'];let _0x38f747=0x0,_0x272d10=0x0;if(_0x31d140[_0x320fad(0xaa0)](/front/i))_0x38f747=_0x3e4372>=_0x31a77d?_0x556e4a:_0x32fa53;else{if(_0x31d140[_0x320fad(0xaa0)](/middle/i))_0x38f747=(_0x556e4a+_0x32fa53)/0x2,_0x499a12=-0x1;else{if(_0x31d140[_0x320fad(0xaa0)](/back/i)){if(_0x320fad(0xa63)!==_0x320fad(0xa63))return!![];else _0x38f747=_0x3e4372>=_0x31a77d?_0x32fa53:_0x556e4a;}}}if(_0x31d140[_0x320fad(0xaa0)](/head/i)){if(_0x320fad(0x3a9)!==_0x320fad(0x7bc))_0x272d10=_0x1d5917;else{if(!_0x1827d7['VisuMZ_0_CoreEngine'])return;if(!_0x3aea49[_0x320fad(0x346)]())return;if(this[_0x320fad(0x7a6)]())return;if(this[_0x320fad(0x6b9)]())return;if(_0x19a354['note'][_0x320fad(0xaa0)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x490cbd=_0x1dc490(_0x529611['$1']);_0x119b2a['requestFauxAnimation']([this],_0x490cbd,![],![]);}}}else{if(_0x31d140[_0x320fad(0xaa0)](/center/i))_0x272d10=(_0x1d5917+_0x4c956a)/0x2;else _0x31d140[_0x320fad(0xaa0)](/base/i)&&(_0x272d10=_0x4c956a);}_0x20405e[_0x320fad(0x9be)](_0x38f747,_0x272d10,_0x30250d,_0x236af4,_0x39a99d,_0x499a12),this[_0x320fad(0xac7)]();},Window_BattleLog[_0x2d1202(0x8ec)][_0x2d1202(0x820)]=function(_0x13c704,_0x13e4ce,_0x3e573b){const _0x287507=_0x2d1202;for(const _0x4a6c83 of _0x13c704){if(!_0x4a6c83)continue;_0x4a6c83[_0x287507(0xaf8)](_0x13e4ce,_0x3e573b);}this[_0x287507(0xac7)]();};